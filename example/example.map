{"version":3.0,"file":"example.js","sourceRoot":"","names":["s","locfmt","x","erase_rel","rest","rest$0","rest$1","rest$2","rest$3","rest$4","rest$5","rest$6","rest$7","ty","rest$8","ty1","rest$9","rest$10","rest$11","rest$12","rest$13","concat_fmtty","fmtty1","fmtty2","ty2","concat_fmt","fmt1","fmt2","pad","pad$0","prec","pad$1","iconv","prec$0","pad$2","iconv$0","prec$1","pad$3","iconv$1","prec$2","pad$4","iconv$2","prec$3","pad$5","fconv","str","chr","fmtty","pad$6","fmtty$0","pad$7","rest$14","rest$15","rest$16","fmting_lit","rest$17","fmting_gen","rest$18","rest$19","char_set","width_opt","rest$20","counter","rest$21","rest$22","ign","rest$23","f","arity","invalid_arg","abs","max_int","_a_","s1","s2","l1","l2","stdout","stderr","flush_all","iter","l","a","output_string","oc","prerr_string","exit_function","do_at_exit","make","n","c","sub_string","b","ofs","len","r","blit","ofs1","ofs2","blit$0","make$0","max_array_length","max_string_length","create","n$0","n$1","resize","more","new_len","new_buffer","add_string","new_position","default_float_precision","buffer_create","init_size","buffer_check_size","buf","overhead","y","new_str","buffer_add_char","buffer_add_string","str_len","buffer_contents","string_of_formatting_lit","formatting_lit","str$0","bprint_fmtty","sub_fmtty","sub_fmtty$0","symm","fmtty_rel_det","de","ed","af","fa","de$0","ed$0","af$0","fa$0","de$1","ed$1","af$1","fa$1","de$2","ed$2","af$2","fa$2","de$3","ed$3","af$3","fa$3","de$4","ed$4","af$4","fa$4","de$5","ed$5","af$5","fa$5","de$6","ed$6","af$6","fa$6","de$7","ed$7","af$7","fa$7","de$8","ed$8","af$8","fa$8","trans","jd","dj","ga","ag","de$9","ed$9","af$9","fa$9","de$10","ed$10","af$10","fa$10","de$11","ed$11","af$11","fa$11","de$12","ed$12","af$12","fa$12","de$13","ed$13","af$13","fa$13","match","rest2","rest2$0","rest2$1","rest2$2","rest2$3","rest2$4","rest2$5","rest2$6","rest2$7","rest2$8","ty22","ty21","f4","f2","rest2$9","rest2$10","rest2$11","rest2$12","rest2$13","type_padding","w","padty","padty$0","type_padprec","p","type_ignored_param_one","fmt","type_format_gen","fmt$0","fmtty_rest","fmt_rest","fmtty_rest$0","fmt_rest$0","fmtty$1","fmt$1","fmt_rest$1","fmtty_rest$1","fmtty$2","fmt$2","fmt_rest$2","fmtty_rest$2","fmtty$3","fmt$3","fmt_rest$3","fmtty_rest$3","fmtty$4","fmt$4","fmt_rest$4","fmtty_rest$4","fmtty$5","fmt$5","fmt_rest$5","fmtty_rest$5","fmtty$6","fmt$6","fmt_rest$6","fmtty_rest$6","fmtty$7","fmt$7","fmt_rest$7","fmtty_rest$7","fmtty$8","fmt$8","fmtty_rest$8","fmt_rest$8","fmtty$9","fmt$9","fmt_rest$9","fmtty$10","fmt$10","fmt_rest$10","fmtty$11","fmt$11","fmt_rest$11","fmtty$12","fmt$12","fmtty_rest$9","fmt_rest$12","pad_opt","fmtty$13","fmt$13","fmtty_rest$10","sub_fmtty1","fmt_rest$13","sub_fmtty$1","pad_opt$0","fmtty$14","fmt$14","fmtty_rest$11","fmt_rest$14","fmtty$15","fmt$15","fmtty_rest$12","fmt_rest$15","fmtty$16","fmt$16","fmt_rest$16","fmtty$17","fmt$17","fmt_rest$17","formatting_gen","fmtty3","fmt3","str$1","fmt1$0","fmtty2$0","fmt2$0","fmtty3$0","fmt3$0","fmtty_rest$13","fmt_rest$18","fmtty$18","fmt$18","fmtty_rest$14","fmt_rest$19","fmtty$19","fmt$19","fmtty_rest$15","fmt_rest$20","fmtty$20","fmt$20","fmtty_rest$16","fmtty$21","fmt$21","sub_fmtty$2","pad_opt$1","sub_fmtty$3","pad_opt$2","type_ignored_format_substitution","fmtty$22","fmt$22","sub_fmtty$4","sub_fmtty_rest","sub_fmtty_rest$0","sub_fmtty_rest$1","sub_fmtty_rest$2","sub_fmtty_rest$3","sub_fmtty_rest$4","sub_fmtty_rest$5","sub_fmtty_rest$6","sub_fmtty_rest$7","sub_fmtty_rest$8","sub_fmtty_rest$9","sub_fmtty_rest$10","sub_fmtty_rest$11","sub_fmtty_rest$12","sub_fmtty_rest$13","sub_fmtty_rest$14","sub2_fmtty","sub_fmtty_rest$15","sub2_fmtty$0","sub_fmtty_rest$16","sub2_fmtty$1","sub1_fmtty","sub_fmtty_rest$17","sub2_fmtty$2","sub1_fmtty$0","sub_fmtty_rest$18","sub_fmtty_rest$19","sub_fmtty_rest$20","sub_fmtty_rest$21","sub_fmtty_rest$22","sub_fmtty_rest$23","sub_fmtty_rest$24","sub_fmtty_rest$25","sub_fmtty_rest$26","fix_padding","width","res","fix_int_precision","res$1","res$0","string_to_caml_string","i$1","i$2","i$0","i","convert_int","convert_int32","convert_nativeint","convert_int64","convert_float","sign","symb","make_int_padding_precision","k","o","acc","make_printf","p$0","p$1","make_string_padding","new_acc","make_printf$0","k$0","acc$0","s$0","acc$1","acc$2","acc$3","acc$4","k$3","koc","kacc","k$1","k$4","k$2","make_invalid_arg","make_from_fmtty$0","make_custom$0","make_from_fmtty","arity$0","make_custom","output_acc","p$2","p$3","msg","p$4","strput_acc","pos","fprintf","sprintf","printers","field","other_fields","fields","to_string","conv","tl","hd","char$0","line","file","char$1","line$0","file$0","char$2","line$1","file$1","constructor","print_backtrace","outchan","raw_backtrace","backtrace","slot","info$0","info","is_raise","register_printer","fn","add_queue","q","take_queue","pp_enqueue","state","token","pp_infinity","pp_output_string","pp_output_newline","pp_output_spaces","break_new_line","offset","real_indent","break_line","break_same_line","pp_force_break_line","bl_ty","pp_skip_token","size","format_pp_token","tabs","add_tab","ls","ls$0","tags","tag_name","marker","off","width$0","off$0","insertion_point","tabs$0","find","x$0","tab","ty$0","off$1","insertion_point$0","offset$0","bl_type","tbox","tag_name$0","marker$0","advance_loop","tok","size$0","advance_left","q_elem","scan_stack_bottom","clear_scan_stack","set_size","queue_elem","left_tot","t","blank_line","default_pp_mark_open_tag","default_pp_mark_close_tag","default_pp_print_open_tag","default_pp_print_close_tag","make_formatter","output","flush","h","pp_queue","sys_tok","sys_scan_stack","ppf","formatter_of_out_channel","stdbuf","g","br_ty","indent","tok$0","exn","constr","accu","l$0","accu$0"],"mappings":"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","sources":["/Users/xvw/.opam/4.04.0/lib/js_of_ocaml/stdlib.js","/Users/xvw/.opam/4.04.0/lib/js_of_ocaml/mlString.js","/Users/xvw/.opam/4.04.0/lib/js_of_ocaml/ieee_754.js","/Users/xvw/.opam/4.04.0/lib/js_of_ocaml/int64.js","/Users/xvw/.opam/4.04.0/lib/js_of_ocaml/jslib_js_of_ocaml.js","/Users/xvw/.opam/4.04.0/lib/js_of_ocaml/jslib.js","/Users/xvw/.opam/4.04.0/lib/js_of_ocaml/io.js","/Users/xvw/.opam/4.04.0/lib/js_of_ocaml/fs.js","/Users/xvw/.opam/4.04.0/lib/js_of_ocaml/unix.js","/Users/xvw/.opam/4.04.0/lib/ocaml/pervasives.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/printexc.ml","/Users/xvw/Programmation/OCaml/broadcast/example/example.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/camlinternalFormatBasics.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/bytes.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/string.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/sys.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/buffer.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/camlinternalFormat.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/char.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/printf.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/obj.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/format.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/queue.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/callback.ml","/Users/xvw/Programmation/OCaml/broadcast/_build/src/broadcastChannel.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/list.ml","/Users/xvw/.opam/4.04.0/lib/ocaml/std_exit.ml"],"sourcesContent":["// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Core\n\n//Provides: raw_array_sub\nfunction raw_array_sub (a,i,l) {\n  var b = new Array(l);\n  for(var j = 0; j < l; j++) b[j] = a[i+j];\n  return b\n}\n\n//Provides: raw_array_copy\nfunction raw_array_copy (a) {\n  var l = a.length;\n  var b = new Array(l);\n  for(var i = 0; i < l; i++ ) b[i] = a[i];\n  return b\n}\n\n//Provides: raw_array_cons\nfunction raw_array_cons (a,x) {\n  var l = a.length;\n  var b = new Array(l+1);\n  b[0]=x;\n  for(var i = 1; i <= l; i++ ) b[i] = a[i-1];\n  return b\n}\n\n//Provides: raw_array_append_one\nfunction raw_array_append_one(a,x) {\n  var l = a.length;\n  var b = new Array(l+1);\n  var i = 0;\n  for(; i < l; i++ ) b[i] = a[i];\n  b[i]=x;\n  return b\n}\n\n//Provides: caml_call_gen (const, shallow)\n//Requires: raw_array_sub\n//Requires: raw_array_append_one\nfunction caml_call_gen(f, args) {\n  if(f.fun)\n    return caml_call_gen(f.fun, args);\n  var n = f.length;\n  var argsLen = args.length;\n  var d = n - argsLen;\n  if (d == 0)\n    return f.apply(null, args);\n  else if (d < 0)\n    return caml_call_gen(f.apply(null,\n                                 raw_array_sub(args,0,n)),\n                         raw_array_sub(args,n,argsLen - n));\n  else\n    return function (x){ return caml_call_gen(f, raw_array_append_one(args,x)); };\n}\n\n//Provides: caml_named_values\nvar caml_named_values = {};\n\n//Provides: caml_register_named_value (const,const)\n//Requires: caml_named_values, caml_bytes_of_string\nfunction caml_register_named_value(nm,v) {\n  caml_named_values[caml_bytes_of_string(nm)] = v;\n  return 0;\n}\n\n//Provides: caml_named_value\n//Requires: caml_named_values\nfunction caml_named_value(nm) {\n  return caml_named_values[nm]\n}\n\n//Provides: caml_global_data\nvar caml_global_data = [0];\n\n//Provides: caml_register_global (const, shallow, const)\n//Requires: caml_global_data\nfunction caml_register_global (n, v, name_opt) {\n  caml_global_data[n + 1] = v;\n  if(name_opt) caml_global_data[name_opt] = v;\n}\n\n//Provides: caml_get_global_data mutable\n//Requires: caml_global_data\nfunction caml_get_global_data () { return caml_global_data; }\n\n//Raise exception\n\n\n//Provides: caml_raise_constant (const)\n//Version: < 4.02\nfunction caml_raise_constant (tag) { throw [0, tag]; }\n\n//Provides: caml_raise_constant (const)\n//Version: >= 4.02\nfunction caml_raise_constant (tag) { throw tag; }\n\n//Provides: caml_return_exn_constant (const)\n//Version: < 4.02\nfunction caml_return_exn_constant (tag) { return [0, tag]; }\n\n//Provides: caml_return_exn_constant (const)\n//Version: >= 4.02\nfunction caml_return_exn_constant (tag) { return tag; }\n\n//Provides: caml_raise_with_arg (const, const)\nfunction caml_raise_with_arg (tag, arg) { throw [0, tag, arg]; }\n\n//Provides: caml_raise_with_string (const, const)\n//Requires: caml_raise_with_arg,caml_new_string\nfunction caml_raise_with_string (tag, msg) {\n  caml_raise_with_arg (tag, caml_new_string (msg));\n}\n\n//Provides: caml_raise_sys_error (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_raise_sys_error (msg) {\n  caml_raise_with_string(caml_global_data.Sys_error, msg);\n}\n\n//Provides: caml_failwith (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_failwith (msg) {\n  caml_raise_with_string(caml_global_data.Failure, msg);\n}\n\n//Provides: caml_wrap_exception const (const)\n//Requires: caml_global_data,caml_js_to_string,caml_named_value\n//Requires: caml_return_exn_constant\nfunction caml_wrap_exception(e) {\n  if(e instanceof Array) return e;\n  //Stack_overflow: chrome, safari\n  if(joo_global_object.RangeError\n     && e instanceof joo_global_object.RangeError\n     && e.message\n     && e.message.match(/maximum call stack/i))\n    return caml_return_exn_constant(caml_global_data.Stack_overflow);\n  //Stack_overflow: firefox\n  if(joo_global_object.InternalError\n     && e instanceof joo_global_object.InternalError\n     && e.message\n     && e.message.match(/too much recursion/i))\n    return caml_return_exn_constant(caml_global_data.Stack_overflow);\n  //Wrap Error in Js.Error exception\n  if(e instanceof joo_global_object.Error)\n    return [0,caml_named_value(\"jsError\"),e];\n  //fallback: wrapped in Failure\n  return [0,caml_global_data.Failure,caml_js_to_string (String(e))];\n}\n\n// Experimental\n//Provides: caml_exn_with_js_backtrace\n//Requires: caml_global_data\nfunction caml_exn_with_js_backtrace(exn, force) {\n  if(!exn.js_error || force) exn.js_error = new joo_global_object.Error(\"Js exception containing backtrace\");\n  return exn;\n}\n//Provides: caml_js_error_of_exception\nfunction caml_js_error_of_exception(exn) {\n  if(exn.js_error) { return exn.js_error; }\n  return null;\n}\n\n//Provides: caml_invalid_argument (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_invalid_argument (msg) {\n  caml_raise_with_string(caml_global_data.Invalid_argument, msg);\n}\n\n//Provides: caml_raise_end_of_file\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_end_of_file () {\n  caml_raise_constant(caml_global_data.End_of_file);\n}\n\n//Provides: caml_raise_zero_divide\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_zero_divide () {\n  caml_raise_constant(caml_global_data.Division_by_zero);\n}\n\n//Provides: caml_raise_not_found\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_not_found () {\n  caml_raise_constant(caml_global_data.Not_found); }\n\n\n//Provides: caml_array_bound_error\n//Requires: caml_invalid_argument\nfunction caml_array_bound_error () {\n  caml_invalid_argument(\"index out of bounds\");\n}\n\n//Provides: caml_update_dummy\nfunction caml_update_dummy (x, y) {\n  if( typeof y===\"function\" ) { x.fun = y; return 0; }\n  if( y.fun ) { x.fun = y.fun; return 0; }\n  var i = y.length; while (i--) x[i] = y[i]; return 0;\n}\n\n//Provides: caml_obj_is_block const (const)\nfunction caml_obj_is_block (x) { return +(x instanceof Array); }\n//Provides: caml_obj_tag const (const)\n//Requires: MlString\nfunction caml_obj_tag (x) { return (x instanceof Array)?x[0]:(x instanceof MlString)?252:1000; }\n//Provides: caml_obj_set_tag (mutable, const)\nfunction caml_obj_set_tag (x, tag) { x[0] = tag; return 0; }\n//Provides: caml_obj_block const (const,const)\nfunction caml_obj_block (tag, size) {\n  var o = new Array(size+1);\n  o[0]=tag;\n  for (var i = 1; i <= size; i++) o[i] = 0;\n  return o;\n}\n//Provides: caml_obj_dup mutable (const)\nfunction caml_obj_dup (x) {\n  var l = x.length;\n  var a = new Array(l);\n  for(var i = 0; i < l; i++ ) a[i] = x[i];\n  return a;\n}\n//Provides: caml_obj_truncate (mutable, const)\n//Requires: caml_invalid_argument\nfunction caml_obj_truncate (x, s) {\n  if (s<=0 || s + 1 > x.length)\n    caml_invalid_argument (\"Obj.truncate\");\n  if (x.length != s + 1) x.length = s + 1;\n  return 0;\n}\n\n//Provides: caml_lazy_make_forward const (const)\nfunction caml_lazy_make_forward (v) { return [250, v]; }\n\n//Provides: caml_mul const\nif (!Math.imul)\n  Math.imul =\n    function (x,y)\n    { y |= 0; return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0; };\nvar caml_mul = Math.imul;\n\n//slightly slower\n// function mul32(x,y) {\n//   var xlo = x & 0xffff;\n//   var xhi = x - xlo;\n//   return (((xhi * y) |0) + xlo * y)|0;\n// }\n\n//Provides: caml_div\n//Requires: caml_raise_zero_divide\nfunction caml_div(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return (x/y)|0;\n}\n\n//Provides: caml_mod\n//Requires: caml_raise_zero_divide\nfunction caml_mod(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return x%y;\n}\n\n///////////// Pervasive\n//Provides: caml_array_set (mutable, const, const)\n//Requires: caml_array_bound_error\nfunction caml_array_set (array, index, newval) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  array[index+1]=newval; return 0;\n}\n\n//Provides: caml_array_get mutable (const, const)\n//Requires: caml_array_bound_error\nfunction caml_array_get (array, index) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  return array[index+1];\n}\n\n//Provides: caml_check_bound (const, const)\n//Requires: caml_array_bound_error\nfunction caml_check_bound (array, index) {\n  if (index >>> 0 >= array.length - 1) caml_array_bound_error();\n  return array;\n}\n\n//Provides: caml_make_vect const (const, const)\nfunction caml_make_vect (len, init) {\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=0;\n  for (var i = 1; i < len; i++) b[i] = init;\n  return b;\n}\n\n//Provides: caml_make_float_vect const (const)\nfunction caml_make_float_vect(len){\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n\n//Provides: caml_compare_val (const, const, const)\n//Requires: MlString, caml_int64_compare, caml_int_compare, caml_string_compare\n//Requires: caml_invalid_argument\nfunction caml_compare_val (a, b, total) {\n  var stack = [];\n  for(;;) {\n    if (!(total && a === b)) {\n      if (a instanceof MlString) {\n        if (b instanceof MlString) {\n            if (a !== b) {\n\t\tvar x = caml_string_compare(a, b);\n\t\tif (x != 0) return x;\n\t    }\n        } else\n          // Should not happen\n          return 1;\n      } else if (a instanceof Array && a[0] === (a[0]|0)) {\n        var ta = a[0];\n        // ignore double_array_tag\n        if (ta === 254) ta=0;\n        // Forward object\n        if (ta === 250) {\n          a = a[1];\n          continue;\n        } else if (b instanceof Array && b[0] === (b[0]|0)) {\n          var tb = b[0];\n          // ignore double_array_tag\n          if (tb === 254) tb=0;\n          // Forward object\n          if (tb === 250) {\n            b = b[1];\n            continue;\n          } else if (ta != tb) {\n            return (ta < tb)?-1:1;\n          } else {\n            switch (ta) {\n            case 248: {\n\t\t// Object\n\t\tvar x = caml_int_compare(a[2], b[2]);\n\t\tif (x != 0) return x;\n\t\tbreak;\n\t    }\n            case 251: {\n                caml_invalid_argument(\"equal: abstract value\");\n            }\n            case 255: {\n\t\t// Int64\n\t\tvar x = caml_int64_compare(a, b);\n\t\tif (x != 0) return x;\n\t\tbreak;\n\t    }\n            default:\n              if (a.length != b.length) return (a.length < b.length)?-1:1;\n              if (a.length > 1) stack.push(a, b, 1);\n            }\n          }\n        } else\n          return 1;\n      } else if (b instanceof MlString ||\n                 (b instanceof Array && b[0] === (b[0]|0))) {\n        return -1;\n      } else if (typeof a != \"number\" && a && a.compare) {\n        return a.compare(b,total);\n      } else if (typeof a == \"function\") {\n        caml_invalid_argument(\"equal: functional value\");\n      } else {\n        if (a < b) return -1;\n        if (a > b) return 1;\n        if (a != b) {\n          if (!total) return NaN;\n          if (a == a) return 1;\n          if (b == b) return -1;\n        }\n      }\n    }\n    if (stack.length == 0) return 0;\n    var i = stack.pop();\n    b = stack.pop();\n    a = stack.pop();\n    if (i + 1 < a.length) stack.push(a, b, i + 1);\n    a = a[i];\n    b = b[i];\n  }\n}\n//Provides: caml_compare (const, const)\n//Requires: caml_compare_val\nfunction caml_compare (a, b) { return caml_compare_val (a, b, true); }\n//Provides: caml_int_compare mutable (const, const)\nfunction caml_int_compare (a, b) {\n  if (a < b) return (-1); if (a == b) return 0; return 1;\n}\n//Provides: caml_equal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_equal (x, y) { return +(caml_compare_val(x,y,false) == 0); }\n//Provides: caml_notequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_notequal (x, y) { return +(caml_compare_val(x,y,false) != 0); }\n//Provides: caml_greaterequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterequal (x, y) { return +(caml_compare_val(x,y,false) >= 0); }\n//Provides: caml_greaterthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterthan (x, y) { return +(caml_compare_val(x,y,false) > 0); }\n//Provides: caml_lessequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessequal (x, y) { return +(caml_compare_val(x,y,false) <= 0); }\n//Provides: caml_lessthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessthan (x, y) { return +(caml_compare_val(x,y,false) < 0); }\n\n//Provides: caml_parse_sign_and_base\n//Requires: caml_string_unsafe_get, caml_ml_string_length\nfunction caml_parse_sign_and_base (s) {\n  var i = 0, len = caml_ml_string_length(s), base = 10,\n     sign = (len > 0 && caml_string_unsafe_get(s,0) == 45)?(i++,-1):1;\n  if (i + 1 < len && caml_string_unsafe_get(s, i) == 48)\n    switch (caml_string_unsafe_get(s, i + 1)) {\n    case 120: case 88: base = 16; i += 2; break;\n    case 111: case 79: base =  8; i += 2; break;\n    case  98: case 66: base =  2; i += 2; break;\n    }\n  return [i, sign, base];\n}\n\n//Provides: caml_parse_digit\nfunction caml_parse_digit(c) {\n  if (c >= 48 && c <= 57)  return c - 48;\n  if (c >= 65 && c <= 90)  return c - 55;\n  if (c >= 97 && c <= 122) return c - 87;\n  return -1;\n}\n\n//Provides: caml_int_of_string (const)\n//Requires: caml_ml_string_length, caml_string_unsafe_get\n//Requires: caml_parse_sign_and_base, caml_parse_digit, caml_failwith\nfunction caml_int_of_string (s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var len = caml_ml_string_length(s);\n  var threshold = -1 >>> 0;\n  var c = (i < len)?caml_string_unsafe_get(s, i):0;\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = d;\n  for (i++;i<len;i++) {\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    res = base * res + d;\n    if (res > threshold) caml_failwith(\"int_of_string\");\n  }\n  if (i != len) caml_failwith(\"int_of_string\");\n  // For base different from 10, we expect an unsigned representation,\n  // hence any value of 'res' (less than 'threshold') is acceptable.\n  // But we have to convert the result back to a signed integer.\n  res = sign * res;\n  if ((base == 10) && ((res | 0) != res))\n    /* Signed representation expected, allow -2^(nbits-1) to 2^(nbits-1) - 1 */\n    caml_failwith(\"int_of_string\");\n  return res | 0;\n}\n\n//Provides: caml_float_of_string (const)\n//Requires: caml_failwith, caml_bytes_of_string\nfunction caml_float_of_string(s) {\n  var res;\n  s = caml_bytes_of_string (s);\n  res = +s;\n  if ((s.length > 0) && (res === res)) return res;\n  s = s.replace(/_/g,\"\");\n  res = +s;\n  if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) return res;\n  var m = /^ *([+-]?)0x([0-9a-f]+)\\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);\n//            1        2             3           4\n  if(m){\n    var m3 = m[3].replace(/0+$/,'');\n    var mantissa = parseInt(m[1] + m[2] + m3, 16);\n    var exponent = (m[4]|0) - 4*m3.length;\n    res = mantissa * Math.pow(2, exponent);\n    return res;\n  }\n  if(/^\\+?inf(inity)?$/i.test(s)) return Infinity;\n  if(/^-inf(inity)?$/i.test(s)) return -Infinity;\n  caml_failwith(\"float_of_string\");\n}\n\n//Provides: caml_is_printable const (const)\nfunction caml_is_printable(c) { return +(c > 31 && c < 127); }\n\n///////////// Format\n//Provides: caml_parse_format\n//Requires: caml_bytes_of_string, caml_invalid_argument\nfunction caml_parse_format (fmt) {\n  fmt = caml_bytes_of_string(fmt);\n  var len = fmt.length;\n  if (len > 31) caml_invalid_argument(\"format_int: format too long\");\n  var f =\n    { justify:'+', signstyle:'-', filler:' ', alternate:false,\n      base:0, signedconv:false, width:0, uppercase:false,\n      sign:1, prec:-1, conv:'f' };\n  for (var i = 0; i < len; i++) {\n    var c = fmt.charAt(i);\n    switch (c) {\n    case '-':\n      f.justify = '-'; break;\n    case '+': case ' ':\n      f.signstyle = c; break;\n    case '0':\n      f.filler = '0'; break;\n    case '#':\n      f.alternate = true; break;\n    case '1': case '2': case '3': case '4': case '5':\n    case '6': case '7': case '8': case '9':\n      f.width = 0;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.width = f.width * 10 + c; i++\n      }\n      i--;\n     break;\n    case '.':\n      f.prec = 0;\n      i++;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.prec = f.prec * 10 + c; i++\n      }\n      i--;\n    case 'd': case 'i':\n      f.signedconv = true; /* fallthrough */\n    case 'u':\n      f.base = 10; break;\n    case 'x':\n      f.base = 16; break;\n    case 'X':\n      f.base = 16; f.uppercase = true; break;\n    case 'o':\n      f.base = 8; break;\n    case 'e': case 'f': case 'g':\n      f.signedconv = true; f.conv = c; break;\n    case 'E': case 'F': case 'G':\n      f.signedconv = true; f.uppercase = true;\n      f.conv = c.toLowerCase (); break;\n    }\n  }\n  return f;\n}\n\n//Provides: caml_finish_formatting\n//Requires: caml_new_string\nfunction caml_finish_formatting(f, rawbuffer) {\n  if (f.uppercase) rawbuffer = rawbuffer.toUpperCase();\n  var len = rawbuffer.length;\n  /* Adjust len to reflect additional chars (sign, etc) */\n  if (f.signedconv && (f.sign < 0 || f.signstyle != '-')) len++;\n  if (f.alternate) {\n    if (f.base == 8) len += 1;\n    if (f.base == 16) len += 2;\n  }\n  /* Do the formatting */\n  var buffer = \"\";\n  if (f.justify == '+' && f.filler == ' ')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  if (f.signedconv) {\n    if (f.sign < 0) buffer += '-';\n    else if (f.signstyle != '-') buffer += f.signstyle;\n  }\n  if (f.alternate && f.base == 8) buffer += '0';\n  if (f.alternate && f.base == 16) buffer += \"0x\";\n  if (f.justify == '+' && f.filler == '0')\n    for (var i = len; i < f.width; i++) buffer += '0';\n  buffer += rawbuffer;\n  if (f.justify == '-')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  return caml_new_string (buffer);\n}\n\n//Provides: caml_format_int const (const, const)\n//Requires: caml_parse_format, caml_finish_formatting, caml_str_repeat\n//Requires: caml_new_string, caml_bytes_of_string\nfunction caml_format_int(fmt, i) {\n  if (caml_bytes_of_string(fmt) == \"%d\") return caml_new_string(\"\"+i);\n  var f = caml_parse_format(fmt);\n  if (i < 0) { if (f.signedconv) { f.sign = -1; i = -i; } else i >>>= 0; }\n  var s = i.toString(f.base);\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - s.length;\n    if (n > 0) s = caml_str_repeat (n, '0') + s;\n  }\n  return caml_finish_formatting(f, s);\n}\n\n//Provides: caml_format_float const\n//Requires: caml_parse_format, caml_finish_formatting\nfunction caml_format_float (fmt, x) {\n  var s, f = caml_parse_format(fmt);\n  var prec = (f.prec < 0)?6:f.prec;\n  if (x < 0 || (x == 0 && 1/x == -Infinity)) { f.sign = -1; x = -x; }\n  if (isNaN(x)) { s = \"nan\"; f.filler = ' '; }\n  else if (!isFinite(x)) { s = \"inf\"; f.filler = ' '; }\n  else\n    switch (f.conv) {\n    case 'e':\n      var s = x.toExponential(prec);\n      // exponent should be at least two digits\n      var i = s.length;\n      if (s.charAt(i - 3) == 'e')\n        s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n      break;\n    case 'f':\n      s = x.toFixed(prec); break;\n    case 'g':\n      prec = prec?prec:1;\n      s = x.toExponential(prec - 1);\n      var j = s.indexOf('e');\n      var exp = +s.slice(j + 1);\n      if (exp < -4 || x >= 1e21 || x.toFixed(0).length > prec) {\n        // remove trailing zeroes\n        var i = j - 1; while (s.charAt(i) == '0') i--;\n        if (s.charAt(i) == '.') i--;\n        s = s.slice(0, i + 1) + s.slice(j);\n        i = s.length;\n        if (s.charAt(i - 3) == 'e')\n          s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n        break;\n      } else {\n        var p = prec;\n        if (exp < 0) { p -= exp + 1; s = x.toFixed(p); }\n        else while (s = x.toFixed(p), s.length > prec + 1) p--;\n        if (p) {\n          // remove trailing zeroes\n          var i = s.length - 1; while (s.charAt(i) == '0') i--;\n          if (s.charAt(i) == '.') i--;\n          s = s.slice(0, i + 1);\n        }\n      }\n      break;\n    }\n  return caml_finish_formatting(f, s);\n}\n\n///////////// Hashtbl\n//Provides: caml_hash_univ_param mutable\n//Requires: MlString, caml_convert_string_to_bytes\n//Requires: caml_int64_to_bytes, caml_int64_bits_of_float\nfunction caml_hash_univ_param (count, limit, obj) {\n  var hash_accu = 0;\n  function hash_aux (obj) {\n    limit --;\n    if (count < 0 || limit < 0) return;\n    if (obj instanceof Array && obj[0] === (obj[0]|0)) {\n      switch (obj[0]) {\n      case 248:\n        // Object\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[2]) | 0;\n        break;\n      case 250:\n        // Forward\n        limit++; hash_aux(obj); break;\n      case 255:\n        // Int64\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[1] + (obj[2] << 24)) | 0;\n        break;\n      default:\n        count --;\n        hash_accu = (hash_accu * 19 + obj[0]) | 0;\n        for (var i = obj.length - 1; i > 0; i--) hash_aux (obj[i]);\n      }\n    } else if (obj instanceof MlString) {\n      count --;\n      switch (obj.t & 6) {\n      default: /* PARTIAL */\n        caml_convert_string_to_bytes(obj);\n      case 0: /* BYTES */\n        for (var b = obj.c, l = obj.l, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n        break;\n      case 2: /* ARRAY */\n        for (var a = obj.c, l = obj.l, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + a[i]) | 0;\n      }\n    } else if (obj === (obj|0)) {\n      // Integer\n      count --;\n      hash_accu = (hash_accu * 65599 + obj) | 0;\n    } else if (obj === +obj) {\n      // Float\n      count--;\n      var p = caml_int64_to_bytes (caml_int64_bits_of_float (obj));\n      for (var i = 7; i >= 0; i--) hash_accu = (hash_accu * 19 + p[i]) | 0;\n    }\n  }\n  hash_aux (obj);\n  return hash_accu & 0x3FFFFFFF;\n}\n\n//function ROTL32(x,n) { return ((x << n) | (x >>> (32-n))); }\n//Provides: caml_hash_mix_int\n//Requires: caml_mul\nfunction caml_hash_mix_int(h,d) {\n  d = caml_mul(d, 0xcc9e2d51|0);\n  d = ((d << 15) | (d >>> (32-15))); // ROTL32(d, 15);\n  d = caml_mul(d, 0x1b873593);\n  h ^= d;\n  h = ((h << 13) | (h >>> (32-13)));   //ROTL32(h, 13);\n  return (((h + (h << 2))|0) + (0xe6546b64|0))|0;\n}\n\n//Provides: caml_hash_mix_final\n//Requires: caml_mul\nfunction caml_hash_mix_final(h) {\n  h ^= h >>> 16;\n  h = caml_mul (h, 0x85ebca6b|0);\n  h ^= h >>> 13;\n  h = caml_mul (h, 0xc2b2ae35|0);\n  h ^= h >>> 16;\n  return h;\n}\n\n//Provides: caml_hash_mix_float\n//Requires: caml_hash_mix_int, caml_int64_bits_of_float\nfunction caml_hash_mix_float (h, v0) {\n  var v = caml_int64_bits_of_float (v0);\n  var lo = v[1] | (v[2] << 24);\n  var hi = (v[2] >>> 8) | (v[3] << 16);\n  h = caml_hash_mix_int(h, lo);\n  h = caml_hash_mix_int(h, hi);\n  return h;\n}\n//Provides: caml_hash_mix_int64\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_int64 (h, v) {\n  var lo = v[1] | (v[2] << 24);\n  var hi = (v[2] >>> 8) | (v[3] << 16);\n  h = caml_hash_mix_int(h, hi ^ lo);\n  return h;\n}\n\n//Provides: caml_hash_mix_string_str\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_string_str(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s.charCodeAt(i)\n        | (s.charCodeAt(i+1) << 8)\n        | (s.charCodeAt(i+2) << 16)\n        | (s.charCodeAt(i+3) << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s.charCodeAt(i+2) << 16;\n  case 2: w |= s.charCodeAt(i+1) << 8;\n  case 1: w |= s.charCodeAt(i);\n          h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_string_arr\n//Requires: caml_hash_mix_int\nfunction caml_hash_mix_string_arr(h, s) {\n  var len = s.length, i, w;\n  for (i = 0; i + 4 <= len; i += 4) {\n    w = s[i]\n      | (s[i+1] << 8)\n      | (s[i+2] << 16)\n      | (s[i+3] << 24);\n    h = caml_hash_mix_int(h, w);\n  }\n  w = 0;\n  switch (len & 3) {\n  case 3: w  = s[i+2] << 16;\n  case 2: w |= s[i+1] << 8;\n  case 1: w |= s[i];\n    h = caml_hash_mix_int(h, w);\n  default:\n  }\n  h ^= len;\n  return h;\n}\n\n//Provides: caml_hash_mix_string\n//Requires: caml_convert_string_to_bytes\n//Requires: caml_hash_mix_string_str\n//Requires: caml_hash_mix_string_arr\nfunction caml_hash_mix_string(h, v) {\n    switch (v.t & 6) {\n    default:\n        caml_convert_string_to_bytes (v);\n    case 0: /* BYTES */\n        h = caml_hash_mix_string_str(h, v.c);\n        break;\n    case 2: /* ARRAY */\n        h = caml_hash_mix_string_arr(h, v.c);\n    }\n    return h\n}\n\n\n//Provides: caml_hash mutable\n//Requires: MlString\n//Requires: caml_int64_bits_of_float, caml_hash_mix_int, caml_hash_mix_final\n//Requires: caml_hash_mix_int64, caml_hash_mix_float, caml_hash_mix_string\nvar HASH_QUEUE_SIZE = 256;\nfunction caml_hash (count, limit, seed, obj) {\n    var queue, rd, wr, sz, num, h, v, i, len;\n    sz = limit;\n    if (sz < 0 || sz > HASH_QUEUE_SIZE) sz = HASH_QUEUE_SIZE;\n    num = count;\n    h = seed;\n    queue = [obj]; rd = 0; wr = 1;\n    while (rd < wr && num > 0) {\n        v = queue[rd++];\n        if (v instanceof Array && v[0] === (v[0]|0)) {\n            switch (v[0]) {\n            case 248:\n                // Object\n                h = caml_hash_mix_int(h, v[2]);\n                num--;\n                break;\n            case 250:\n                // Forward\n                queue[--rd] = v[1];\n                break;\n            case 255:\n                // Int64\n                h = caml_hash_mix_int64 (h, v);\n                num --;\n                break;\n            default:\n                var tag = ((v.length - 1) << 10) | v[0];\n                h = caml_hash_mix_int(h, tag);\n                for (i = 1, len = v.length; i < len; i++) {\n                    if (wr >= sz) break;\n                    queue[wr++] = v[i];\n                }\n                break;\n            }\n        } else if (v instanceof MlString) {\n            h = caml_hash_mix_string(h,v)\n            num--;\n        } else if (v === (v|0)) {\n            // Integer\n            h = caml_hash_mix_int(h, v+v+1);\n            num--;\n        } else if (v === +v) {\n            // Float\n            h = caml_hash_mix_float(h,v);\n            num--;\n        }\n    }\n    h = caml_hash_mix_final(h);\n    return h & 0x3FFFFFFF;\n}\n\n///////////// Sys\n//Provides: caml_sys_time mutable\nvar caml_initial_time = new Date() * 0.001;\nfunction caml_sys_time () { return new Date() * 0.001 - caml_initial_time; }\n//Provides: caml_sys_get_config const\n//Requires: caml_new_string\nfunction caml_sys_get_config () {\n  return [0, caml_new_string(\"Unix\"), 32, 0];\n}\n\n//Provides: caml_sys_const_backend_type const\n//Requires: caml_new_string\nfunction caml_sys_const_backend_type () {\n  return [0, caml_new_string(\"js_of_ocaml\")];\n}\n\n\n//Provides: caml_sys_random_seed mutable\n//Version: < 4.00\n//The function needs to return an array since OCaml 4.0...\nfunction caml_sys_random_seed () {\n  var x = new Date()^0xffffffff*Math.random();\n  return x;\n}\n\n//Provides: caml_sys_random_seed mutable\n//Version: >= 4.00\n//The function needs to return an array since OCaml 4.0...\nfunction caml_sys_random_seed () {\n  var x = new Date()^0xffffffff*Math.random();\n  return [0,x];\n}\n\n\n\n//Provides: caml_sys_const_big_endian const\nfunction caml_sys_const_big_endian () { return 0; }\n//Provides: caml_sys_const_word_size const\nfunction caml_sys_const_word_size () { return 32; }\n//Provides: caml_sys_const_int_size const\nfunction caml_sys_const_int_size () { return 32; }\n\n//Provides: caml_sys_const_max_wosize const\n// max_int / 4 so that the following does not overflow\n//let max_string_length = word_size / 8 * max_array_length - 1;;\nfunction caml_sys_const_max_wosize () { return (0x7FFFFFFF/4) | 0;}\n\n//Provides: caml_sys_const_ostype_cygwin const\nfunction caml_sys_const_ostype_cygwin () { return 0; }\n//Provides: caml_sys_const_ostype_unix const\nfunction caml_sys_const_ostype_unix () { return 1; }\n//Provides: caml_sys_const_ostype_win32 const\nfunction caml_sys_const_ostype_win32 () { return 0; }\n\n//Provides: caml_sys_system_command\nfunction caml_sys_system_command(_cmd){\n  return 127;\n}\n\n///////////// Array\n//Provides: caml_array_sub mutable\nfunction caml_array_sub (a, i, len) {\n  var a2 = new Array(len+1);\n  a2[0]=0;\n  for(var i2 = 1, i1= i+1; i2 <= len; i2++,i1++ ){\n    a2[i2]=a[i1];\n  }\n  return a2;\n}\n\n//Provides: caml_array_append mutable\nfunction caml_array_append(a1, a2) {\n  var l1 = a1.length, l2 = a2.length;\n  var l = l1+l2-1\n  var a = new Array(l);\n  a[0] = 0;\n  var i = 1,j = 1;\n  for(;i<l1;i++) a[i]=a1[i];\n  for(;i<l;i++,j++) a[i]=a2[j];\n  return a;\n}\n\n//Provides: caml_array_concat mutable\nfunction caml_array_concat(l) {\n  var a = [0];\n  while (l !== 0) {\n    var b = l[1];\n    for (var i = 1; i < b.length; i++) a.push(b[i]);\n    l = l[2];\n  }\n  return a;\n}\n\n//Provides: caml_array_blit\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for (var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];\n  } else {\n    for (var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];\n  };\n  return 0;\n}\n\n///////////// CamlinternalOO\n//Provides: caml_get_public_method const\nvar caml_method_cache = [];\nfunction caml_get_public_method (obj, tag, cacheid) {\n  var meths = obj[1];\n  var ofs = caml_method_cache[cacheid];\n  if (ofs === null) {\n    // Make sure the array is not sparse\n    for (var i = caml_method_cache.length; i < cacheid; i++)\n      caml_method_cache[i] = 0;\n  } else if (meths[ofs] === tag) {\n//      console.log(\"cache hit\");\n    return meths[ofs - 1];\n  }\n//  console.log(\"cache miss\");\n  var li = 3, hi = meths[1] * 2 + 1, mi;\n  while (li < hi) {\n    mi = ((li+hi) >> 1) | 1;\n    if (tag < meths[mi+1]) hi = mi-2;\n    else li = mi;\n  }\n  caml_method_cache[cacheid] = li + 1;\n  /* return 0 if tag is not there */\n  return (tag == meths[li+1] ? meths[li] : 0);\n}\n\n//Provides: caml_final_register const\nfunction caml_final_register () { return 0; }\n//Provides: caml_final_register_called_without_value const\nfunction caml_final_register_called_without_value () { return 0; }\n//Provides: caml_final_release const\nfunction caml_final_release () { return 0; }\n//Provides: caml_backtrace_status const\nfunction caml_backtrace_status () { return 0; }\n//Provides: caml_get_exception_backtrace const\nfunction caml_get_exception_backtrace () { return 0; }\n//Provides: caml_get_exception_raw_backtrace const\nfunction caml_get_exception_raw_backtrace () { return [0]; }\n//Provides: caml_record_backtrace\nfunction caml_record_backtrace () { return 0; }\n//Provides: caml_convert_raw_backtrace const\nfunction caml_convert_raw_backtrace () { return 0; }\n//Provides: caml_raw_backtrace_length\nfunction caml_raw_backtrace_length() { return 0; }\n//Provides: caml_raw_backtrace_next_slot\nfunction caml_raw_backtrace_next_slot() { return 0 }\n//Provides: caml_raw_backtrace_slot\n//Requires: caml_invalid_argument\nfunction caml_raw_backtrace_slot () {\n  caml_invalid_argument(\"Printexc.get_raw_backtrace_slot: index out of bounds\");\n}\n//Provides: caml_get_current_callstack const\nfunction caml_get_current_callstack () { return [0]; }\n//Provides: caml_sys_getenv (const)\n//Requires: caml_raise_not_found\n//Requires: caml_js_to_string\nfunction caml_sys_getenv (name) {\n  var g = joo_global_object;\n  var n = name.toString();\n  //nodejs env\n  if(g.process\n     && g.process.env\n     && g.process.env[n] != undefined)\n    return caml_js_to_string(g.process.env[n]);\n  caml_raise_not_found ();\n}\n//Provides: caml_sys_exit\n//Requires: caml_invalid_argument\nfunction caml_sys_exit (code) {\n  var g = joo_global_object;\n  if(g.quit) g.quit(code);\n  //nodejs\n  if(g.process && g.process.exit) g.process.exit(code);\n  caml_invalid_argument(\"Function 'exit' not implemented\");\n}\n\n//Provides: caml_sys_get_argv const\n//Requires: caml_js_to_string\n//Requires: raw_array_sub\nfunction caml_sys_get_argv () {\n  var g = joo_global_object;\n  var main = \"a.out\";\n  var args = []\n\n  if(g.process\n     && g.process.argv\n     && g.process.argv.length > 1) {\n    var argv = g.process.argv\n    //nodejs\n    main = argv[1];\n    args = raw_array_sub(argv,2,argv.length - 2);\n  }\n\n  var p = caml_js_to_string(main);\n  var args2 = [0, p];\n  for(var i = 0; i < args.length; i++)\n    args2.push(caml_js_to_string(args[i]));\n  return [0, p, args2];\n}\n\n//Provides: unix_inet_addr_of_string\nfunction unix_inet_addr_of_string () {return 0;}\n\n//Provides: caml_oo_last_id\nvar caml_oo_last_id = 0;\n\n//Provides: caml_set_oo_id\n//Requires: caml_oo_last_id\nfunction caml_set_oo_id (b) {\n  b[2]=caml_oo_last_id++;\n  return b;\n}\n\n//Provides: caml_fresh_oo_id\n//Requires: caml_oo_last_id\nfunction caml_fresh_oo_id() {\n  return caml_oo_last_id++;\n}\n\n//Provides: caml_install_signal_handler const\nfunction caml_install_signal_handler(){return 0}\n\n\n//Provides: caml_convert_raw_backtrace_slot\n//Requires: caml_failwith\nfunction caml_convert_raw_backtrace_slot(){\n  caml_failwith(\"caml_convert_raw_backtrace_slot\");\n}\n\n//Provides: caml_bswap16\nfunction caml_bswap16(x) {\n  return ((((x & 0x00FF) << 8) |\n           ((x & 0xFF00) >> 8)));\n}\n//Provides: caml_int32_bswap\nfunction caml_int32_bswap(x) {\n  return (((x & 0x000000FF) << 24) |\n          ((x & 0x0000FF00) << 8) |\n          ((x & 0x00FF0000) >>> 8) |\n          ((x & 0xFF000000) >>> 24));\n}\n//Provides: caml_int64_bswap\nfunction caml_int64_bswap(x) {\n  return [\n    255,\n    (((x[3] & 0x0000ff00) >> 8) |\n     ((x[3] & 0x000000ff) << 8) |\n     ((x[2] & 0x00ff0000))),\n    (((x[2] & 0x0000ff00) >> 8) |\n     ((x[2] & 0x000000ff) << 8) |\n     ((x[1] & 0x00ff0000))),\n    (((x[1] & 0x0000ff00) >> 8) |\n     ((x[1] & 0x000000ff) << 8))]\n}\n\n//Provides: caml_list_of_js_array const (const)\nfunction caml_list_of_js_array(a){\n  var l = 0;\n  for(var i=a.length - 1; i>=0; i--){\n    var e = a[i];\n    l = [0,e,l];\n  }\n  return l\n}\n\n//Provides: caml_runtime_warnings\nvar caml_runtime_warnings = 0;\n\n//Provides: caml_ml_enable_runtime_warnings\n//Requires: caml_runtime_warnings\nfunction caml_ml_enable_runtime_warnings (bool) {\n  caml_runtime_warnings = bool;\n  return 0;\n}\n\n//Provides: caml_ml_runtime_warnings_enabled\n//Requires: caml_runtime_warnings\nfunction caml_ml_runtime_warnings_enabled (_unit) {\n  return caml_runtime_warnings;\n}\n\n\n//Provides: caml_sys_isatty\nfunction caml_sys_isatty(_chan) {\n  return 0;\n}\n\n//Provides: caml_spacetime_enabled const (const)\nfunction caml_spacetime_enabled(_unit) {\n  return 0;\n}\n\n//Provides: caml_register_channel_for_spacetime const (const)\nfunction caml_register_channel_for_spacetime(_channel) {\n  return 0;\n}\n\n//Provides: caml_spacetime_only_works_for_native_code\n//Requires: caml_failwith\nfunction caml_spacetime_only_works_for_native_code() {\n  caml_failwith(\"Spacetime profiling only works for native code\");\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010-2014 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n// An OCaml string is an object with three fields:\n// - tag 't'\n// - length 'l'\n// - contents 'c'\n//\n// The contents of the string can be either a JavaScript array or\n// a JavaScript string. The length of this string can be less than the\n// length of the OCaml string. In this case, remaining bytes are\n// assumed to be zeroes. Arrays are mutable but consumes more memory\n// than strings. A common pattern is to start from an empty string and\n// progressively fill it from the start. Partial strings makes it\n// possible to implement this efficiently.\n//\n// When converting to and from UTF-16, we keep track of whether the\n// string is composed only of ASCII characters (in which case, no\n// conversion needs to be performed) or not.\n//\n// The string tag can thus take the following values:\n//   full string     BYTE | UNKNOWN:      0\n//                   BYTE | ASCII:        9\n//                   BYTE | NOT_ASCII:    8\n//   string prefix   PARTIAL:             2\n//   array           ARRAY:               4\n//\n// One can use bit masking to discriminate these different cases:\n//   known_encoding(x) = x&8\n//   is_ascii(x) =       x&1\n//   kind(x) =           x&6\n\n//Provides: caml_str_repeat\nfunction caml_str_repeat(n, s) {\n  if (s.repeat) return s.repeat(n); // ECMAscript 6 and Firefox 24+\n  var r = \"\", l = 0;\n  if (n == 0) return r;\n  for(;;) {\n    if (n & 1) r += s;\n    n >>= 1;\n    if (n == 0) return r;\n    s += s;\n    l++;\n    if (l == 9) {\n      s.slice(0,1); // flatten the string\n      // then, the flattening of the whole string will be faster,\n      // as it will be composed of larger pieces\n    }\n  }\n}\n\n//Provides: caml_subarray_to_string\n//Requires: raw_array_sub\nfunction caml_subarray_to_string (a, i, len) {\n  var f = String.fromCharCode;\n  if (i == 0 && len <= 4096 && len == a.length) return f.apply (null, a);\n  var s = \"\";\n  for (; 0 < len; i += 1024,len-=1024)\n    s += f.apply (null, raw_array_sub(a,i, Math.min(len, 1024)));\n  return s;\n}\n\n//Provides: caml_utf8_of_utf16\nfunction caml_utf8_of_utf16(s) {\n  for (var b = \"\", t = b, c, d, i = 0, l = s.length; i < l; i++) {\n    c = s.charCodeAt(i);\n    if (c < 0x80) {\n      for (var j = i + 1; (j < l) && (c = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    if (c < 0x800) {\n      t += String.fromCharCode(0xc0 | (c >> 6));\n      t += String.fromCharCode(0x80 | (c & 0x3f));\n    } else if (c < 0xd800 || c >= 0xdfff) {\n      t += String.fromCharCode(0xe0 | (c >> 12),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    } else if (c >= 0xdbff || i + 1 == l ||\n               (d = s.charCodeAt(i + 1)) < 0xdc00 || d > 0xdfff) {\n      // Unmatched surrogate pair, replaced by \\ufffd (replacement character)\n      t += \"\\xef\\xbf\\xbd\";\n    } else {\n      i++;\n      c = (c << 10) + d - 0x35fdc00;\n      t += String.fromCharCode(0xf0 | (c >> 18),\n                               0x80 | ((c >> 12) & 0x3f),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    }\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_utf16_of_utf8\nfunction caml_utf16_of_utf8(s) {\n  for (var b = \"\", t = \"\", c, c1, c2, v, i = 0, l = s.length; i < l; i++) {\n    c1 = s.charCodeAt(i);\n    if (c1 < 0x80) {\n      for (var j = i + 1; (j < l) && (c1 = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    v = 1;\n    if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n      c = c2 + (c1 << 6);\n      if (c1 < 0xe0) {\n        v = c - 0x3080;\n        if (v < 0x80) v = 1;\n      } else {\n        v = 2;\n        if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n          c = c2 + (c << 6);\n          if (c1 < 0xf0) {\n            v = c - 0xe2080;\n            if ((v < 0x800) || ((v >= 0xd7ff) && (v < 0xe000))) v = 2;\n          } else {\n              v = 3;\n              if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128) &&\n                  (c1 < 0xf5)) {\n                v = c2 - 0x3c82080 + (c << 6);\n                if (v < 0x10000 || v > 0x10ffff) v = 3;\n              }\n          }\n        }\n      }\n    }\n    if (v < 4) { // Invalid sequence\n      i -= v;\n      t += \"\\ufffd\";\n    } else if (v > 0xffff)\n      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF))\n    else\n      t += String.fromCharCode(v);\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_is_ascii\nfunction caml_is_ascii (s) {\n  // The regular expression gets better at around this point for all browsers\n  if (s.length < 24) {\n    // Spidermonkey gets much slower when s.length >= 24 (on 64 bit archs)\n    for (var i = 0; i < s.length; i++) if (s.charCodeAt(i) > 127) return false;\n    return true;\n  } else\n    return !/[^\\x00-\\x7f]/.test(s);\n}\n\n//Provides: caml_to_js_string\n//Requires: caml_convert_string_to_bytes, caml_is_ascii, caml_utf16_of_utf8\nfunction caml_to_js_string(s) {\n  switch (s.t) {\n  case 9: /*BYTES | ASCII*/\n    return s.c;\n  default:\n    caml_convert_string_to_bytes(s);\n  case 0: /*BYTES | UNKOWN*/\n    if (caml_is_ascii(s.c)) {\n      s.t = 9; /*BYTES | ASCII*/\n      return s.c;\n    }\n    s.t = 8; /*BYTES | NOT_ASCII*/\n  case 8: /*BYTES | NOT_ASCII*/\n    return caml_utf16_of_utf8(s.c);\n  }\n}\n\n//Provides: caml_string_unsafe_get mutable\nfunction caml_string_unsafe_get (s, i) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    if (i >= s.c.length) return 0;\n  case 0: /* BYTES */\n    return s.c.charCodeAt(i);\n  case 4: /* ARRAY */\n    return s.c[i]\n  }\n}\n\n//Provides: caml_bytes_unsafe_get mutable\nfunction caml_bytes_unsafe_get (s, i) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    if (i >= s.c.length) return 0;\n  case 0: /* BYTES */\n    return s.c.charCodeAt(i);\n  case 4: /* ARRAY */\n    return s.c[i]\n  }\n}\n\n//Provides: caml_string_unsafe_set\n//Requires: caml_convert_string_to_array\nfunction caml_string_unsafe_set (s, i, c) {\n  // The OCaml compiler uses Char.unsafe_chr on integers larger than 255!\n  c &= 0xff;\n  if (s.t != 4 /* ARRAY */) {\n    if (i == s.c.length) {\n      s.c += String.fromCharCode (c);\n      if (i + 1 == s.l) s.t = 0; /*BYTES | UNKOWN*/\n      return 0;\n    }\n    caml_convert_string_to_array (s);\n  }\n  s.c[i] = c;\n  return 0;\n}\n\n//Provides: caml_bytes_unsafe_set\n//Requires: caml_convert_string_to_array\nfunction caml_bytes_unsafe_set (s, i, c) {\n  // The OCaml compiler uses Char.unsafe_chr on integers larger than 255!\n  c &= 0xff;\n  if (s.t != 4 /* ARRAY */) {\n    if (i == s.c.length) {\n      s.c += String.fromCharCode (c);\n      if (i + 1 == s.l) s.t = 0; /*BYTES | UNKOWN*/\n      return 0;\n    }\n    caml_convert_string_to_array (s);\n  }\n  s.c[i] = c;\n  return 0;\n}\n\n//Provides: caml_string_bound_error\n//Requires: caml_invalid_argument\nfunction caml_string_bound_error () {\n  caml_invalid_argument (\"index out of bounds\");\n}\n\n//Provides: caml_string_get\n//Requires: caml_string_bound_error, caml_string_unsafe_get\nfunction caml_string_get (s, i) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_get (s, i);\n}\n\n//Provides: caml_string_get16\n//Requires: caml_string_unsafe_get, caml_string_bound_error\nfunction caml_string_get16(s,i) {\n  if (i >>> 0 >= s.l + 1) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1);\n  return (b2 << 8 | b1);\n}\n\n//Provides: caml_string_get32\n//Requires: caml_string_unsafe_get, caml_string_bound_error\nfunction caml_string_get32(s,i) {\n  if (i >>> 0 >= s.l + 3) caml_string_bound_error();\n  var b1 = caml_string_unsafe_get (s, i),\n      b2 = caml_string_unsafe_get (s, i + 1),\n      b3 = caml_string_unsafe_get (s, i + 2),\n      b4 = caml_string_unsafe_get (s, i + 3);\n  return (b4 << 24 | b3 << 16 | b2 << 8 | b1);\n}\n\n//Provides: caml_string_get64\n//Requires: caml_string_unsafe_get, caml_string_bound_error\n//Requires: caml_int64_of_bytes\nfunction caml_string_get64(s,i) {\n  if (i >>> 0 >= s.l + 7) caml_string_bound_error();\n  var a = new Array(8);\n  for(var j = 0; j < 8; j++){\n    a[7 - j] = caml_string_unsafe_get (s, i + j);\n  }\n  return caml_int64_of_bytes(a);\n}\n\n//Provides: caml_bytes_get\n//Requires: caml_string_bound_error, caml_bytes_unsafe_get\nfunction caml_bytes_get (s, i) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_bytes_unsafe_get (s, i);\n}\n\n//Provides: caml_string_set\n//Requires: caml_string_bound_error, caml_string_unsafe_set\nfunction caml_string_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_set (s, i, c);\n}\n\n//Provides: caml_string_set16\n//Requires: caml_string_bound_error, caml_string_unsafe_set\nfunction caml_string_set16(s,i,i16){\n  if (i >>> 0 >= s.l + 1) caml_string_bound_error();\n  var b2 = 0xFF & i16 >> 8,\n      b1 = 0xFF & i16;\n  caml_string_unsafe_set (s, i + 0, b1);\n  caml_string_unsafe_set (s, i + 1, b2);\n  return 0\n}\n\n//Provides: caml_string_set32\n//Requires: caml_string_bound_error, caml_string_unsafe_set\nfunction caml_string_set32(s,i,i32){\n  if (i >>> 0 >= s.l + 3) caml_string_bound_error();\n  var b4 = 0xFF & i32 >> 24,\n      b3 = 0xFF & i32 >> 16,\n      b2 = 0xFF & i32 >> 8,\n      b1 = 0xFF & i32;\n  caml_string_unsafe_set (s, i + 0, b1);\n  caml_string_unsafe_set (s, i + 1, b2);\n  caml_string_unsafe_set (s, i + 2, b3);\n  caml_string_unsafe_set (s, i + 3, b4);\n  return 0\n}\n\n//Provides: caml_string_set64\n//Requires: caml_string_bound_error, caml_string_unsafe_set\n//Requires: caml_int64_to_bytes\nfunction caml_string_set64(s,i,i64){\n  if (i >>> 0 >= s.l + 7) caml_string_bound_error();\n  var a = caml_int64_to_bytes(i64);\n  for(var j = 0; j < 8; j++) {\n    caml_string_unsafe_set (s, i + 7 - j, a[j]);\n  }\n  return 0\n}\n\n\n\n//Provides: caml_bytes_set\n//Requires: caml_string_bound_error, caml_bytes_unsafe_set\nfunction caml_bytes_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_bytes_unsafe_set (s, i, c);\n}\n\n//Provides: MlString\n//Requires: caml_to_js_string\nfunction MlString (tag, contents, length) {\n  this.t=tag; this.c=contents; this.l=length;\n}\nMlString.prototype.toString = function(){return caml_to_js_string(this)};\n\n//Provides: caml_convert_string_to_bytes\n//Requires: caml_str_repeat, caml_subarray_to_string\nfunction caml_convert_string_to_bytes (s) {\n  /* Assumes not BYTES */\n  if (s.t == 2 /* PARTIAL */)\n    s.c += caml_str_repeat(s.l - s.c.length, '\\0')\n  else\n    s.c = caml_subarray_to_string (s.c, 0, s.c.length);\n  s.t = 0; /*BYTES | UNKOWN*/\n}\n\n//Provides: caml_convert_string_to_array\nfunction caml_convert_string_to_array (s) {\n  /* Assumes not ARRAY */\n  if(joo_global_object.Uint8Array) {\n    var a = new joo_global_object.Uint8Array(s.l);\n  } else {\n    var a = new Array(s.l);\n  }\n  var b = s.c, l = b.length, i = 0;\n  for (; i < l; i++) a[i] = b.charCodeAt(i);\n  for (l = s.l; i < l; i++) a[i] = 0;\n  s.c = a;\n  s.t = 4; /* ARRAY */\n  return a;\n}\n\n//Provides: caml_array_of_string mutable\n//Requires: caml_convert_string_to_array\nfunction caml_array_of_string (s) {\n  if (s.t != 4 /* ARRAY */) caml_convert_string_to_array(s);\n  return s.c;\n}\n\n//Provides: caml_bytes_of_string mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_of_string (s) {\n  if ((s.t & 6) != 0 /* BYTES */) caml_convert_string_to_bytes(s);\n  return s.c;\n}\n\n//Provides: caml_js_to_string const\n//Requires: caml_is_ascii, caml_utf8_of_utf16, MlString\nfunction caml_js_to_string (s) {\n  var tag = 9 /* BYTES | ASCII */;\n  if (!caml_is_ascii(s))\n    tag = 8 /* BYTES | NOT_ASCII */, s = caml_utf8_of_utf16(s);\n  return new MlString(tag, s, s.length);\n}\n\n//Provides: caml_create_string const\n//Requires: MlString,caml_invalid_argument\nfunction caml_create_string(len) {\n  if (len < 0) caml_invalid_argument(\"String.create\");\n  return new MlString(len?2:9,\"\",len);\n}\n//Provides: caml_create_bytes const\n//Requires: MlString,caml_invalid_argument\nfunction caml_create_bytes(len) {\n  if (len < 0) caml_invalid_argument(\"Bytes.create\");\n  return new MlString(len?2:9,\"\",len);\n}\n\n//Provides: caml_new_string\n//Requires: MlString\nfunction caml_new_string (s) { return new MlString(0,s,s.length); }\n//Provides: caml_string_of_array\n//Requires: MlString\nfunction caml_string_of_array (a) { return new MlString(4,a,a.length); }\n\n//Provides: caml_string_compare mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_compare(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?-1:(s1.c > s2.c)?1:0;\n}\n\n\n//Provides: caml_bytes_compare mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_compare(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?-1:(s1.c > s2.c)?1:0;\n}\n\n//Provides: caml_string_equal mutable (const, const)\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c == s2.c)?1:0;\n}\n\n//Provides: caml_bytes_equal mutable (const, const)\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_equal(s1, s2) {\n  if(s1 === s2) return 1;\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c == s2.c)?1:0;\n}\n\n//Provides: caml_string_notequal mutable (const, const)\n//Requires: caml_string_equal\nfunction caml_string_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_bytes_notequal mutable (const, const)\n//Requires: caml_string_equal\nfunction caml_bytes_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_string_lessequal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_lessequal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c <= s2.c)?1:0;\n}\n\n//Provides: caml_bytes_lessequal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessequal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c <= s2.c)?1:0;\n}\n\n//Provides: caml_string_lessthan mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_lessthan(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?1:0;\n}\n\n//Provides: caml_bytes_lessthan mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_lessthan(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?1:0;\n}\n\n//Provides: caml_string_greaterequal\n//Requires: caml_string_lessequal\nfunction caml_string_greaterequal(s1, s2) {\n  return caml_string_lessequal(s2,s1);\n}\n//Provides: caml_bytes_greaterequal\n//Requires: caml_bytes_lessequal\nfunction caml_bytes_greaterequal(s1, s2) {\n  return caml_bytes_lessequal(s2,s1);\n}\n\n//Provides: caml_string_greaterthan\n//Requires: caml_string_lessthan\nfunction caml_string_greaterthan(s1, s2) {\n  return caml_string_lessthan(s2, s1);\n}\n\n//Provides: caml_bytes_greaterthan\n//Requires: caml_bytes_lessthan\nfunction caml_bytes_greaterthan(s1, s2) {\n  return caml_bytes_lessthan(s2, s1);\n}\n\n//Provides: caml_fill_string\n//Requires: caml_str_repeat, caml_convert_string_to_array\nfunction caml_fill_string(s, i, l, c) {\n  if (l > 0) {\n    if (i == 0 && (l >= s.l || (s.t == 2 /* PARTIAL */ && l >= s.c.length))) {\n      if (c == 0) {\n        s.c = \"\";\n        s.t = 2; /* PARTIAL */\n      } else {\n        s.c = caml_str_repeat (l, String.fromCharCode(c));\n        s.t = (l == s.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n      }\n    } else {\n      if (s.t != 4 /* ARRAY */) caml_convert_string_to_array(s);\n      for (l += i; i < l; i++) s.c[i] = c;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_fill_bytes\n//Requires: caml_fill_string\nvar caml_fill_bytes = caml_fill_string\n\n//Provides: caml_blit_string\n//Requires: caml_subarray_to_string, caml_convert_string_to_array\nfunction caml_blit_string(s1, i1, s2, i2, len) {\n  if (len == 0) return 0;\n  if ((i2 == 0) &&\n      (len >= s2.l || (s2.t == 2 /* PARTIAL */ && len >= s2.c.length))) {\n    s2.c = (s1.t == 4 /* ARRAY */)?\n             caml_subarray_to_string(s1.c, i1, len):\n             (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else if (s2.t == 2 /* PARTIAL */ && i2 == s2.c.length) {\n    s2.c += (s1.t == 4 /* ARRAY */)?\n             caml_subarray_to_string(s1.c, i1, len):\n             (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else {\n    if (s2.t != 4 /* ARRAY */) caml_convert_string_to_array(s2);\n    var c1 = s1.c, c2 = s2.c;\n    if (s1.t == 4 /* ARRAY */) {\n        if (i2 <= i1) {\n          for (var i = 0; i < len; i++) c2 [i2 + i] = c1 [i1 + i];\n        } else {\n          for (var i = len - 1; i >= 0; i--) c2 [i2 + i] = c1 [i1 + i];\n        }\n   } else {\n      var l = Math.min (len, c1.length - i1);\n      for (var i = 0; i < l; i++) c2 [i2 + i] = c1.charCodeAt(i1 + i);\n      for (; i < len; i++) c2 [i2 + i] = 0;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_blit_bytes\n//Requires: caml_blit_string\nvar caml_blit_bytes = caml_blit_string\n\n//Provides: caml_ml_string_length const\nfunction caml_ml_string_length(s) { return s.l }\n\n//Provides: caml_ml_bytes_length const\nfunction caml_ml_bytes_length(s) { return s.l }\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: jsoo_floor_log2\nvar log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020\nfunction jsoo_floor_log2(x) {\n    if(log2_ok) return Math.floor(Math.log2(x))\n    var i = 0;\n    if (x == 0) return -Infinity;\n    if(x>=1) {while (x>=2) {x/=2; i++} }\n    else {while (x < 1) {x*=2; i--} };\n    return i;\n}\n\n//Provides: caml_int64_bits_of_float const\n//Requires: jsoo_floor_log2\nfunction caml_int64_bits_of_float (x) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return [255, 1, 0, 0x7ff0];\n    return (x > 0)?[255,0,0,0x7ff0]:[255,0,0,0xfff0];\n  }\n  var sign = (x==0 && 1/x == -Infinity)?0x8000:(x>=0)?0:0x8000;\n  if (sign) x = -x;\n  // Int64.bits_of_float 1.1235582092889474E+307 = 0x7fb0000000000000L\n  // using Math.LOG2E*Math.log(x) in place of Math.log2 result in precision lost\n  var exp = jsoo_floor_log2(x) + 1023;\n  if (exp <= 0) {\n    exp = 0;\n    x /= Math.pow(2,-1026);\n  } else {\n    x /= Math.pow(2,exp-1027);\n    if (x < 16) {\n      x *= 2; exp -=1; }\n    if (exp == 0) {\n      x /= 2; }\n  }\n  var k = Math.pow(2,24);\n  var r3 = x|0;\n  x = (x - r3) * k;\n  var r2 = x|0;\n  x = (x - r2) * k;\n  var r1 = x|0;\n  r3 = (r3 &0xf) | sign | exp << 4;\n  return [255, r1, r2, r3];\n}\n\n//Provides: caml_int32_bits_of_float const\n//Requires: jsoo_floor_log2\nfunction caml_int32_bits_of_float (x) {\n  var float32a = new joo_global_object.Float32Array(1);\n  float32a[0] = x;\n  var int32a = new joo_global_object.Int32Array(float32a.buffer);\n  return int32a[0] | 0;\n}\n\n//FP literals can be written using the hexadecimal\n//notation 0x<mantissa in hex>p<exponent> from ISO C99.\n//https://github.com/dankogai/js-hexfloat/blob/master/hexfloat.js\n//Provides: caml_hexstring_of_float const\n//Requires: caml_js_to_string, caml_str_repeat\nfunction caml_hexstring_of_float (x, prec, style) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return caml_js_to_string(\"nan\");\n    return caml_js_to_string ((x > 0)?\"infinity\":\"-infinity\");\n  }\n  var sign = (x==0 && 1/x == -Infinity)?1:(x>=0)?0:1;\n  if(sign) x = -x;\n  var exp = 0;\n  if (x == 0) { }\n  else if (x < 1) {\n    while (x < 1 && exp > -1022)  { x *= 2; exp-- }\n  } else {\n    while (x >= 2) { x /= 2; exp++ }\n  }\n  var exp_sign = exp < 0 ? '' : '+';\n  var sign_str = '';\n  if (sign) sign_str = '-'\n  else {\n    switch(style){\n    case 43 /* '+' */: sign_str = '+'; break;\n    case 32 /* ' ' */: sign_str = ' '; break;\n    default: break;\n    }\n  }\n  if (prec >= 0 && prec < 13) {\n    /* If a precision is given, and is small, round mantissa accordingly */\n      var cst = Math.pow(2,prec * 4);\n      x = Math.round(x * cst) / cst;\n  }\n  var x_str = x.toString(16);\n  if(prec >= 0){\n      var idx = x_str.indexOf('.');\n    if(idx<0) {\n      x_str += '.' + caml_str_repeat(prec, '0');\n    }\n    else {\n      var size = idx+1+prec;\n      if(x_str.length < size)\n        x_str += caml_str_repeat(size - x_str.length, '0');\n      else\n        x_str = x_str.substr(0,size);\n    }\n  }\n  return caml_js_to_string (sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10));\n}\n\n//Provides: caml_int64_float_of_bits const\nfunction caml_int64_float_of_bits (x) {\n  var exp = (x[3] & 0x7fff) >> 4;\n  if (exp == 2047) {\n      if ((x[1]|x[2]|(x[3]&0xf)) == 0)\n        return (x[3] & 0x8000)?(-Infinity):Infinity;\n      else\n        return NaN;\n  }\n  var k = Math.pow(2,-24);\n  var res = (x[1]*k+x[2])*k+(x[3]&0xf);\n  if (exp > 0) {\n    res += 16;\n    res *= Math.pow(2,exp-1027);\n  } else\n    res *= Math.pow(2,-1026);\n  if (x[3] & 0x8000) res = - res;\n  return res;\n}\n\n//Provides: caml_int32_float_of_bits const\nfunction caml_int32_float_of_bits (x) {\n  var int32a = new joo_global_object.Int32Array(1);\n  int32a[0] = x;\n  var float32a = new joo_global_object.Float32Array(int32a.buffer);\n  return float32a[0];\n}\n\n//Provides: caml_classify_float const\nfunction caml_classify_float (x) {\n  if (isFinite (x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) return 0;\n    if (x != 0) return 1;\n    return 2;\n  }\n  return isNaN(x)?4:3;\n}\n//Provides: caml_modf_float const\nfunction caml_modf_float (x) {\n  if (isFinite (x)) {\n    var neg = (1/x) < 0;\n    x = Math.abs(x);\n    var i = Math.floor (x);\n    var f = x - i;\n    if (neg) { i = -i; f = -f; }\n    return [0, f, i];\n  }\n  if (isNaN (x)) return [0, NaN, NaN];\n  return [0, 1/x, x];\n}\n//Provides: caml_ldexp_float const\nfunction caml_ldexp_float (x,exp) {\n  exp |= 0;\n  if (exp > 1023) {\n    exp -= 1023;\n    x *= Math.pow(2, 1023);\n    if (exp > 1023) {  // in case x is subnormal\n      exp -= 1023;\n      x *= Math.pow(2, 1023);\n    }\n  }\n  if (exp < -1023) {\n    exp += 1023;\n    x *= Math.pow(2, -1023);\n  }\n  x *= Math.pow(2, exp);\n  return x;\n}\n//Provides: caml_frexp_float const\n//Requires: jsoo_floor_log2\nfunction caml_frexp_float (x) {\n  if ((x == 0) || !isFinite(x)) return [0, x, 0];\n  var neg = x < 0;\n  if (neg) x = - x;\n  var exp = jsoo_floor_log2(x) + 1;\n  x *= Math.pow(2,-exp);\n  if (x < 0.5) { x *= 2; exp -= 1; }\n  if (neg) x = - x;\n  return [0, x, exp];\n}\n\n//Provides: caml_float_compare const\nfunction caml_float_compare (x, y) {\n  if (x === y) return 0;\n  if (x < y) return -1;\n  if (x > y) return 1;\n  if (x === x) return 1;\n  if (y === y) return -1;\n  return 0;\n}\n\n//Provides: caml_copysign_float const\nfunction caml_copysign_float (x, y) {\n  if (y == 0) y = 1 / y;\n  x = Math.abs(x);\n  return (y < 0)?(-x):x;\n}\n\n//Provides: caml_expm1_float const\nfunction caml_expm1_float (x) {\n  var y = Math.exp(x), z = y - 1;\n  return (Math.abs(x)>1?z:(z==0?x:x*z/Math.log(y)));\n}\n\n//Provides: caml_log1p_float const\nfunction caml_log1p_float (x) {\n  var y = 1 + x, z = y - 1;\n  return (z==0?x:x*Math.log(y)/z);\n}\n\n//Provides: caml_hypot_float const\nfunction caml_hypot_float (x, y) {\n  var x = Math.abs(x), y = Math.abs(y);\n  var a = Math.max(x, y), b = Math.min(x,y) / (a?a:1);\n  return (a * Math.sqrt(1 + b*b));\n}\n\n// FIX: these five functions only give approximate results.\n//Provides: caml_log10_float const\nfunction caml_log10_float (x) { return Math.LOG10E * Math.log(x); }\n//Provides: caml_cosh_float const\nfunction caml_cosh_float (x) { return (Math.exp(x) + Math.exp(-x)) / 2; }\n//Provides: caml_sinh_float const\nfunction caml_sinh_float (x) { return (Math.exp(x) - Math.exp(-x)) / 2; }\n//Provides: caml_tanh_float const\nfunction caml_tanh_float (x) {\n  var y = Math.exp(x), z = Math.exp(-x);\n  return (y + z) / (y - z);\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_int64_offset\nvar caml_int64_offset = Math.pow(2, -24);\n\n//Provides: caml_int64_ucompare const\nfunction caml_int64_ucompare(x,y) {\n  if (x[3] > y[3]) return 1;\n  if (x[3] < y[3]) return -1;\n  if (x[2] > y[2]) return 1;\n  if (x[2] < y[2]) return -1;\n  if (x[1] > y[1]) return 1;\n  if (x[1] < y[1]) return -1;\n  return 0;\n}\n\n//Provides: caml_int64_ult const\n//Requires: caml_int64_ucompare\nfunction caml_int64_ult(x,y) { return caml_int64_ucompare(x,y) < 0; }\n\n//Provides: caml_int64_compare const\nfunction caml_int64_compare(x,y) {\n  var x3 = x[3] << 16;\n  var y3 = y[3] << 16;\n  if (x3 > y3) return 1;\n  if (x3 < y3) return -1;\n  if (x[2] > y[2]) return 1;\n  if (x[2] < y[2]) return -1;\n  if (x[1] > y[1]) return 1;\n  if (x[1] < y[1]) return -1;\n  return 0;\n}\n\n//Provides: caml_int64_neg const\nfunction caml_int64_neg (x) {\n  var y1 = - x[1];\n  var y2 = - x[2] + (y1 >> 24);\n  var y3 = - x[3] + (y2 >> 24);\n  return [255, y1 & 0xffffff, y2 & 0xffffff, y3 & 0xffff];\n}\n\n//Provides: caml_int64_add const\nfunction caml_int64_add (x, y) {\n  var z1 = x[1] + y[1];\n  var z2 = x[2] + y[2] + (z1 >> 24);\n  var z3 = x[3] + y[3] + (z2 >> 24);\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_sub const\nfunction caml_int64_sub (x, y) {\n  var z1 = x[1] - y[1];\n  var z2 = x[2] - y[2] + (z1 >> 24);\n  var z3 = x[3] - y[3] + (z2 >> 24);\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_mul const\n//Requires: caml_int64_offset\nfunction caml_int64_mul(x,y) {\n  var z1 = x[1] * y[1];\n  var z2 = ((z1 * caml_int64_offset) | 0) + x[2] * y[1] + x[1] * y[2];\n  var z3 = ((z2 * caml_int64_offset) | 0) + x[3] * y[1] + x[2] * y[2] + x[1] * y[3];\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_is_zero const\nfunction caml_int64_is_zero(x) {\n  return (x[3]|x[2]|x[1]) == 0;\n}\n\n//Provides: caml_int64_is_negative const\nfunction caml_int64_is_negative(x) {\n  return (x[3] << 16) < 0;\n}\n\n//Provides: caml_int64_is_min_int const\nfunction caml_int64_is_min_int(x) {\n  return x[3] == 0x8000 && (x[1]|x[2]) == 0;\n}\n\n//Provides: caml_int64_is_minus_one const\nfunction caml_int64_is_minus_one(x) {\n  return x[3] == 0xffff && (x[1]&x[2]) == 0xffffff;\n}\n\n//Provides: caml_int64_and const\nfunction caml_int64_and (x, y) {\n  return [255, x[1]&y[1], x[2]&y[2], x[3]&y[3]];\n}\n\n//Provides: caml_int64_or const\nfunction caml_int64_or (x, y) {\n  return [255, x[1]|y[1], x[2]|y[2], x[3]|y[3]];\n}\n\n//Provides: caml_int64_xor const\nfunction caml_int64_xor (x, y) {\n  return [255, x[1]^y[1], x[2]^y[2], x[3]^y[3]];\n}\n\n//Provides: caml_int64_shift_left const\nfunction caml_int64_shift_left (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  if (s < 24)\n    return [255,\n            (x[1] << s) & 0xffffff,\n            ((x[2] << s) | (x[1] >> (24 - s))) & 0xffffff,\n            ((x[3] << s) | (x[2] >> (24 - s))) & 0xffff];\n  if (s < 48)\n    return [255, 0,\n            (x[1] << (s - 24)) & 0xffffff,\n            ((x[2] << (s - 24)) | (x[1] >> (48 - s))) & 0xffff];\n  return [255, 0, 0, (x[1] << (s - 48)) & 0xffff];\n}\n\n//Provides: caml_int64_shift_right_unsigned const\nfunction caml_int64_shift_right_unsigned (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  if (s < 24)\n    return [255,\n            ((x[1] >> s) | (x[2] << (24 - s))) & 0xffffff,\n            ((x[2] >> s) | (x[3] << (24 - s))) & 0xffffff,\n            (x[3] >> s)];\n  if (s < 48)\n    return [255,\n            ((x[2] >> (s - 24)) | (x[3] << (48 - s))) & 0xffffff,\n            (x[3] >> (s - 24)),\n            0];\n  return [255, (x[3] >> (s - 48)), 0, 0];\n}\n\n//Provides: caml_int64_shift_right const\nfunction caml_int64_shift_right (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  var h = (x[3] << 16) >> 16;\n  if (s < 24)\n    return [255,\n            ((x[1] >> s) | (x[2] << (24 - s))) & 0xffffff,\n            ((x[2] >> s) | (h << (24 - s))) & 0xffffff,\n            ((x[3] << 16) >> s) >>> 16];\n  var sign = (x[3] << 16) >> 31;\n  if (s < 48)\n    return [255,\n            ((x[2] >> (s - 24)) | (x[3] << (48 - s))) & 0xffffff,\n            ((x[3] << 16) >> (s - 24) >> 16) & 0xffffff,\n            sign & 0xffff];\n  return [255,\n          ((x[3] << 16) >> (s - 32)) & 0xffffff,\n          sign & 0xffffff, sign & 0xffff];\n}\n\n//Provides: caml_int64_lsl1 const\nfunction caml_int64_lsl1 (x) {\n  x[3] = (x[3] << 1) | (x[2] >> 23);\n  x[2] = ((x[2] << 1) | (x[1] >> 23)) & 0xffffff;\n  x[1] = (x[1] << 1) & 0xffffff;\n}\n\n//Provides: caml_int64_lsr1 const\nfunction caml_int64_lsr1 (x) {\n  x[1] = ((x[1] >>> 1) | (x[2] << 23)) & 0xffffff;\n  x[2] = ((x[2] >>> 1) | (x[3] << 23)) & 0xffffff;\n  x[3] = x[3] >>> 1;\n}\n\n//Provides: caml_int64_udivmod const\n//Requires: caml_int64_ucompare, caml_int64_lsl1, caml_int64_lsr1\n//Requires: caml_int64_sub\n//Requires: caml_obj_dup\nfunction caml_int64_udivmod (x, y) {\n  var offset = 0;\n  var modulus = caml_obj_dup(x);\n  var divisor = caml_obj_dup(y);\n  var quotient = [255, 0, 0, 0];\n  while (caml_int64_ucompare (modulus, divisor) > 0) {\n    offset++;\n    caml_int64_lsl1 (divisor);\n  }\n  while (offset >= 0) {\n    offset --;\n    caml_int64_lsl1 (quotient);\n    if (caml_int64_ucompare (modulus, divisor) >= 0) {\n      quotient[1] ++;\n      modulus = caml_int64_sub (modulus, divisor);\n    }\n    caml_int64_lsr1 (divisor);\n  }\n  return [0,quotient, modulus];\n}\n\n//Provides: caml_int64_div const\n//Requires: caml_int64_is_zero, caml_raise_zero_divide\n//Requires: caml_int64_neg, caml_int64_udivmod\nfunction caml_int64_div (x, y)\n{\n  if (caml_int64_is_zero (y)) caml_raise_zero_divide ();\n  var sign = x[3] ^ y[3];\n  if (x[3] & 0x8000) x = caml_int64_neg(x);\n  if (y[3] & 0x8000) y = caml_int64_neg(y);\n  var q = caml_int64_udivmod(x, y)[1];\n  if (sign & 0x8000) q = caml_int64_neg(q);\n  return q;\n}\n\n//Provides: caml_int64_mod const\n//Requires: caml_int64_is_zero, caml_raise_zero_divide\n//Requires: caml_int64_neg, caml_int64_udivmod\nfunction caml_int64_mod (x, y)\n{\n  if (caml_int64_is_zero (y)) caml_raise_zero_divide ();\n  var sign = x[3];\n  if (x[3] & 0x8000) x = caml_int64_neg(x);\n  if (y[3] & 0x8000) y = caml_int64_neg(y);\n  var r = caml_int64_udivmod(x, y)[2];\n  if (sign & 0x8000) r = caml_int64_neg(r);\n  return r;\n}\n\n//Provides: caml_int64_of_int32 const\nfunction caml_int64_of_int32 (x) {\n  return [255, x & 0xffffff, (x >> 24) & 0xffffff, (x >> 31) & 0xffff]\n}\n\n//Provides: caml_int64_to_int32 const\nfunction caml_int64_to_int32 (x) {\n  return x[1] | (x[2] << 24);\n}\n\n//Provides: caml_int64_to_float const\nfunction caml_int64_to_float (x) {\n  return ((x[3] << 16) * Math.pow(2, 32) + x[2] * Math.pow(2, 24)) + x[1];\n}\n\n//Provides: caml_int64_of_float const\n//Requires: caml_int64_offset\nfunction caml_int64_of_float (x) {\n  if (x < 0) x = Math.ceil(x);\n  return [255,\n          x & 0xffffff,\n          Math.floor(x * caml_int64_offset) & 0xffffff,\n          Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff];\n}\n\n//Provides: caml_int64_format const\n//Requires: caml_parse_format, caml_finish_formatting\n//Requires: caml_int64_is_negative, caml_int64_neg\n//Requires: caml_int64_of_int32, caml_int64_udivmod, caml_int64_to_int32\n//Requires: caml_int64_is_zero, caml_str_repeat\nfunction caml_int64_format (fmt, x) {\n  var f = caml_parse_format(fmt);\n  if (f.signedconv && caml_int64_is_negative(x)) {\n    f.sign = -1; x = caml_int64_neg(x);\n  }\n  var buffer = \"\";\n  var wbase = caml_int64_of_int32(f.base);\n  var cvtbl = \"0123456789abcdef\";\n  do {\n    var p = caml_int64_udivmod(x, wbase);\n    x = p[1];\n    buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer;\n  } while (! caml_int64_is_zero(x));\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - buffer.length;\n    if (n > 0) buffer = caml_str_repeat (n, '0') + buffer;\n  }\n  return caml_finish_formatting(f, buffer);\n}\n\n//Provides: caml_int64_of_string\n//Requires: caml_parse_sign_and_base, caml_failwith, caml_parse_digit, MlString\n//Requires: caml_int64_of_int32, caml_int64_udivmod, caml_int64_ult\n//Requires: caml_int64_add, caml_int64_mul, caml_int64_neg\n//Requires: caml_ml_string_length,caml_string_unsafe_get\nfunction caml_int64_of_string(s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var base64 = caml_int64_of_int32(base);\n  var threshold =\n    caml_int64_udivmod([255, 0xffffff, 0xfffffff, 0xffff], base64)[1];\n  var c = caml_string_unsafe_get(s, i);\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = caml_int64_of_int32(d);\n  for (;;) {\n    i++;\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    /* Detect overflow in multiplication base * res */\n    if (caml_int64_ult(threshold, res)) caml_failwith(\"int_of_string\");\n    d = caml_int64_of_int32(d);\n    res = caml_int64_add(caml_int64_mul(base64, res), d);\n    /* Detect overflow in addition (base * res) + d */\n    if (caml_int64_ult(res, d)) caml_failwith(\"int_of_string\");\n  }\n  if (i != caml_ml_string_length(s)) caml_failwith(\"int_of_string\");\n  if (r[2] == 10 && caml_int64_ult([255, 0, 0, 0x8000], res))\n    caml_failwith(\"int_of_string\");\n  if (sign < 0) res = caml_int64_neg(res);\n  return res;\n}\n\n//Provides: caml_int64_of_bytes\nfunction caml_int64_of_bytes(a) {\n  return [255, a[7] | (a[6] << 8) | (a[5] << 16),\n          a[4] | (a[3] << 8) | (a[2] << 16), a[1] | (a[0] << 8)];\n}\n//Provides: caml_int64_to_bytes\nfunction caml_int64_to_bytes(x) {\n  return [x[3] >> 8, x[3] & 0xff, x[2] >> 16, (x[2] >> 8) & 0xff, x[2] & 0xff,\n          x[1] >> 16, (x[1] >> 8) & 0xff, x[1] & 0xff];\n}\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib: code specific to Js_of_ocaml\n\n//Provides: caml_js_from_bool const (const)\nfunction caml_js_from_bool(x) { return !!x; }\n//Provides: caml_js_to_bool const (const)\nfunction caml_js_to_bool(x) { return +x; }\n//Provides: caml_js_from_float const (const)\nfunction caml_js_from_float(x) { return x; }\n//Provides: caml_js_to_float const (const)\nfunction caml_js_to_float(x) { return x; }\n//Provides: caml_js_from_string mutable (const)\n//Requires: MlString\nfunction caml_js_from_string(s) { return s.toString(); }\n//Provides: caml_js_from_array mutable (shallow)\n//Requires: raw_array_sub\nfunction caml_js_from_array(a) { return raw_array_sub(a,1,a.length-1); }\n//Provides: caml_js_to_array mutable (shallow)\n//Requires: raw_array_cons\nfunction caml_js_to_array(a) { return raw_array_cons(a,0); }\n\n//Provides: caml_js_var mutable (const)\n//Requires: js_print_stderr\n//Requires: MlString\nfunction caml_js_var(x) {\n  var x = x.toString();\n  //Checks that x has the form ident[.ident]*\n  if(!x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/)){\n    js_print_stderr(\"caml_js_var: \\\"\" + x + \"\\\" is not a valid JavaScript variable. continuing ..\");\n    //joo_global_object.console.error(\"Js.Unsafe.eval_string\")\n  }\n  return eval(x);\n}\n//Provides: caml_js_call (const, mutable, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_call(f, o, args) { return f.apply(o, caml_js_from_array(args)); }\n//Provides: caml_js_fun_call (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_fun_call(f, args) { return f.apply(null, caml_js_from_array(args)); }\n//Provides: caml_js_meth_call (mutable, const, shallow)\n//Requires: MlString\n//Requires: caml_js_from_array\nfunction caml_js_meth_call(o, f, args) {\n  return o[f.toString()].apply(o, caml_js_from_array(args));\n}\n//Provides: caml_js_new (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_new(c, a) {\n  switch (a.length) {\n  case 1: return new c;\n  case 2: return new c (a[1]);\n  case 3: return new c (a[1],a[2]);\n  case 4: return new c (a[1],a[2],a[3]);\n  case 5: return new c (a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return new c (a[1],a[2],a[3],a[4],a[5],a[6], a[7]);\n  }\n  function F() { return c.apply(this, caml_js_from_array(a)); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_js_wrap_callback const (const)\n//Requires: caml_call_gen,raw_array_copy\nfunction caml_js_wrap_callback(f) {\n  return function () {\n    if(arguments.length > 0){\n      return caml_call_gen(f, raw_array_copy(arguments));\n    } else {\n      return caml_call_gen(f, [undefined]);\n    }\n  }\n}\n//Provides: caml_js_wrap_meth_callback const (const)\n//Requires: caml_call_gen,raw_array_cons\nfunction caml_js_wrap_meth_callback(f) {\n  return function () {\n    return caml_call_gen(f,raw_array_cons(arguments,this));\n  }\n}\n//Provides: caml_js_wrap_meth_callback_unsafe const (const)\n//Requires: caml_call_gen,raw_array_cons\nfunction caml_js_wrap_meth_callback_unsafe(f) {\n  return function () { f.apply(null, raw_array_cons(arguments,this)); }\n}\n//Provides: caml_js_equals mutable (const, const)\nfunction caml_js_equals (x, y) { return +(x == y); }\n//Provides: caml_js_to_byte_string const\n//Requires: caml_new_string\nfunction caml_js_to_byte_string (s) {return caml_new_string (s);}\n\n//Provides: caml_js_eval_string (const)\n//Requires: MlString\nfunction caml_js_eval_string (s) {return eval(s.toString());}\n\n//Provides: caml_js_expr (const)\n//Requires: js_print_stderr\n//Requires: MlString\nfunction caml_js_expr(s) {\n  js_print_stderr(\"caml_js_expr: fallback to runtime evaluation\");\n  return eval(s.toString());}\n\n//Provides: caml_pure_js_expr const (const)\n//Requires: js_print_stderr\n//Requires: MlString\nfunction caml_pure_js_expr (s){\n  js_print_stderr(\"caml_pure_js_expr: fallback to runtime evaluation\");\n  return eval(s.toString());}\n\n//Provides: caml_js_object (object_literal)\n//Requires: MlString\nfunction caml_js_object (a) {\n  var o = {};\n  for (var i = 1; i < a.length; i++) {\n    var p = a[i];\n    o[p[1].toString()] = p[2];\n  }\n  return o;\n}\n\n\n//Provides: caml_js_export_var\nfunction caml_js_export_var (){\n  if(typeof module !== 'undefined' && module && module.exports)\n    return module.exports\n  else\n    return joo_global_object;\n}\n","// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib\n\n//Provides: caml_js_pure_expr const\nfunction caml_js_pure_expr (f) { return f(); }\n\n//Provides: caml_js_set (mutable, const, const)\nfunction caml_js_set(o,f,v) { o[f]=v;return 0}\n//Provides: caml_js_get mutable (const, const)\nfunction caml_js_get(o,f) { return o[f]; }\n//Provides: caml_js_delete (mutable, const)\nfunction caml_js_delete(o,f) { delete o[f]; return 0}\n\n//Provides: caml_js_instanceof (const, const)\nfunction caml_js_instanceof(o,c) { return o instanceof c; }\n\n//Provides: caml_js_typeof (const)\nfunction caml_js_typeof(o) { return typeof o; }\n\n//Provides: caml_js_on_ie const\nfunction caml_js_on_ie () {\n  var ua =\n    joo_global_object.navigator?joo_global_object.navigator.userAgent:\"\";\n  return ua.indexOf(\"MSIE\") != -1 && ua.indexOf(\"Opera\") != 0;\n}\n\n//Provides: caml_js_html_escape const (const)\nvar caml_js_regexps = { amp:/&/g, lt:/</g, quot:/\\\"/g, all:/[&<\\\"]/ };\nfunction caml_js_html_escape (s) {\n  if (!caml_js_regexps.all.test(s)) return s;\n  return s.replace(caml_js_regexps.amp, \"&amp;\")\n          .replace(caml_js_regexps.lt, \"&lt;\")\n          .replace(caml_js_regexps.quot, \"&quot;\");\n}\n\n//Provides: caml_js_html_entities const (const)\nfunction caml_js_html_entities(s) {\n    var str, temp = document.createElement('p');\n    temp.innerHTML= s;\n    str= temp.textContent || temp.innerText;\n    temp=null;\n    return str;\n}\n\n/////////// Debugging console\n//Provides: caml_js_get_console const\nfunction caml_js_get_console () {\n  var c = joo_global_object.console?joo_global_object.console:{};\n  var m = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"assert\", \"dir\", \"dirxml\",\n           \"trace\", \"group\", \"groupCollapsed\", \"groupEnd\", \"time\", \"timeEnd\"];\n  function f () {}\n  for (var i = 0; i < m.length; i++) if (!c[m[i]]) c[m[i]]=f;\n  return c;\n}\n\n//Provides:caml_trampoline\nfunction caml_trampoline(res) {\n  var c = 1;\n  while(res && res.joo_tramp){\n    res = res.joo_tramp.apply(null, res.joo_args);\n    c++;\n  }\n  //if(c>10) joo_global_object.console.log(\"trampoline \", c, \"times\")\n  return res;\n}\n\n//Provides:caml_trampoline_return\nfunction caml_trampoline_return(f,args) {\n  return {joo_tramp:f,joo_args:args};\n}\n\n//Provides: js_print_stdout (const)\nfunction js_print_stdout(s) {\n  var g = joo_global_object;\n  if (g.process && g.process.stdout && g.process.stdout.write) {\n    g.process.stdout.write(s)\n  } else {\n  // Do not output the last \\n if present\n  // as console logging display a newline at the end\n  if(s.charCodeAt(s.length - 1) == 10)\n    s = s.substr(0,s.length - 1 );\n  var v = g.console;\n  v  && v.log && v.log(s);\n  }\n}\n//Provides: js_print_stderr (const)\nfunction js_print_stderr(s) {\n  var g = joo_global_object;\n  if (g.process && g.process.stdout && g.process.stdout.write) {\n    g.process.stderr.write(s)\n  } else {\n  // Do not output the last \\n if present\n  // as console logging display a newline at the end\n  if(s.charCodeAt(s.length - 1) == 10)\n    s = s.substr(0,s.length - 1 );\n  var v = g.console;\n  v && v.error && v.error(s);\n  }\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Io\n\n//Provides: caml_sys_close\n//Requires: caml_global_data\nfunction caml_sys_close(fd) {\n  delete caml_global_data.fds[fd];\n  return 0;\n}\n\n//Provides: caml_sys_open\n//Requires: MlString, caml_raise_sys_error, caml_global_data,caml_sys_file_exists\n//Requires: caml_fs_register,caml_make_path,caml_fs_content\n//Requires: caml_raise_no_such_file,caml_sys_is_directory\n//Requires: caml_create_string,MlFile,caml_ml_string_length\nfunction caml_sys_open_internal(idx,file,flags) {\n  if(caml_global_data.fds === undefined) caml_global_data.fds = new Array();\n  flags=flags?flags:{};\n  var info = {};\n  info.file = file;\n  info.offset = flags.append?caml_ml_string_length(file.data):0;\n  info.flags = flags;\n  caml_global_data.fds[idx] = info;\n  caml_global_data.fd_last_idx = idx;\n  return idx;\n}\nfunction caml_sys_open (name, flags, _perms) {\n  var f = {};\n  while(flags){\n    switch(flags[1]){\n    case 0: f.rdonly = 1;break;\n    case 1: f.wronly = 1;break;\n    case 2: f.append = 1;break;\n    case 3: f.create = 1;break;\n    case 4: f.truncate = 1;break;\n    case 5: f.excl = 1; break;\n    case 6: f.binary = 1;break;\n    case 7: f.text = 1;break;\n    case 8: f.nonblock = 1;break;\n    }\n    flags=flags[2];\n  }\n  var name2 = name.toString();\n  var path = caml_make_path(name);\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(name2 + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(name2 + \" : flags Open_text and Open_binary are not compatible\");\n  if (caml_sys_file_exists(name)) {\n    if (caml_sys_is_directory(name)) caml_raise_sys_error(name2 + \" : is a directory\");\n    if (f.create && f.excl) caml_raise_sys_error(name2 + \" : file already exists\");\n    var idx = caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;\n    var file = caml_fs_content(path);\n    if(f.truncate) file.truncate();\n    return caml_sys_open_internal (idx+1,file,f);\n  } else if (f.create) {\n    var idx = caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;\n    caml_fs_register(name,caml_create_string(0));\n    var file = caml_fs_content(path);\n    return caml_sys_open_internal (idx+1,file,f);\n  }\n  else caml_raise_no_such_file (name);\n}\ncaml_sys_open_internal(0,new MlFile(caml_create_string(0))); //stdin\ncaml_sys_open_internal(1,new MlFile(caml_create_string(0))); //stdout\ncaml_sys_open_internal(2,new MlFile(caml_create_string(0))); //stderr\n\n\n// ocaml Channels\n\n//Provides: caml_ml_set_channel_name\nfunction caml_ml_set_channel_name() {\n  return 0\n}\n\n//Provides: caml_ml_out_channels\nvar caml_ml_out_channels = new Array();\n\n//Provides: caml_ml_out_channels_list\n//Requires: caml_ml_out_channels\nfunction caml_ml_out_channels_list () {\n  var l = 0;\n  for(var c = 0; c < caml_ml_out_channels.length; c++){\n    if(caml_ml_out_channels[c] && caml_ml_out_channels[c].opened)\n      l=[0,caml_ml_out_channels[c],l];\n  }\n  return l;\n}\n\n\n//Provides: caml_ml_open_descriptor_out\n//Requires: js_print_stderr, js_print_stdout, caml_ml_out_channels, caml_global_data,caml_sys_open\n//Requires: caml_raise_sys_error,caml_new_string\n//Requires: caml_create_string, caml_blit_string,caml_ml_string_length\nfunction caml_std_output(chan,s){\n  var str = caml_new_string(s);\n  var slen = caml_ml_string_length(str);\n  var clen = caml_ml_string_length(chan.file.data);\n  var offset = chan.offset;\n  if(offset + slen >= clen) {\n    var new_str = caml_create_string (offset + slen);\n    caml_blit_string(chan.file.data, 0, new_str, 0, clen);\n    caml_blit_string(str, 0, new_str, offset, slen);\n    chan.file.data = new_str;\n  }\n  chan.offset += slen;\n  chan.file.modified();\n  return 0;\n}\n\nfunction caml_ml_open_descriptor_out (fd) {\n  var output;\n  switch(fd){\n    case 1: output=js_print_stdout;break;\n    case 2: output=js_print_stderr;break;\n    default: output=caml_std_output;\n  }\n  var data = caml_global_data.fds[fd];\n  if(data.flags.rdonly) caml_raise_sys_error(\"fd \"+ fd + \" is readonly\");\n  var channel = {\n    file:data.file,\n    offset:data.offset,\n    fd:fd,\n    opened:true,\n\n    buffer:\"\",\n    output : output\n  };\n  caml_ml_out_channels[channel.fd]=channel;\n  return channel;\n}\n\n//Provides: caml_ml_open_descriptor_in\n//Requires: caml_global_data,caml_sys_open,caml_raise_sys_error\nfunction caml_ml_open_descriptor_in (fd)  {\n  var data = caml_global_data.fds[fd];\n  if(data.flags.wronly) caml_raise_sys_error(\"fd \"+ fd + \" is writeonly\");\n\n  return {\n    file:data.file,\n    offset:data.offset,\n    fd:fd,\n    opened:true,\n    refill:null\n  };\n}\n\n\n//Provides: caml_ml_set_binary_mode\n//Requires: caml_global_data\nfunction caml_ml_set_binary_mode(chan,mode){\n  var data = caml_global_data.fds[chan.fd];\n  data.flags.text = !mode\n  data.flags.binary = mode\n  return 0;\n}\n\n//Input from in_channel\n\n//Provides: caml_ml_close_channel\n//Requires: caml_ml_flush, caml_ml_out_channels\n//Requires: caml_sys_close\nfunction caml_ml_close_channel (channel) {\n    caml_ml_flush(channel);\n    channel.opened = false;\n    delete caml_ml_out_channels[channel.fd];\n    caml_sys_close(channel.fd)\n    return 0;\n}\n\n//Provides: caml_ml_channel_size\n//Requires: caml_ml_string_length\nfunction caml_ml_channel_size(chan) {\n  return caml_ml_string_length(chan.file.data);\n}\n\n//Provides: caml_ml_channel_size_64\n//Requires: caml_ml_channel_size,caml_int64_of_float,caml_ml_string_length\nfunction caml_ml_channel_size_64(chan) {\n  return caml_int64_of_float(caml_ml_string_length(chan.file.data));\n}\n\n//Provides: caml_ml_set_channel_output\nfunction caml_ml_set_channel_output(chan,f) {\n  chan.output = f;\n  return 0;\n}\n\n//Provides: caml_ml_set_channel_refill\nfunction caml_ml_set_channel_refill(chan,f) {\n  chan.refill = f;\n  return 0;\n}\n\n//Provides: caml_ml_refill_input\n//Requires: caml_ml_string_length, caml_create_string, caml_blit_string\nfunction caml_ml_refill_input (chan) {\n  var str = chan.refill();\n  var str_len = caml_ml_string_length(str);\n  if (str_len == 0) chan.refill = null;\n  var old_len = caml_ml_string_length(chan.file.data) - chan.offset;\n  if (old_len == 0) {\n    chan.file.data = str;\n  } else {\n    var new_data = caml_create_string(old_len + str_len);\n    caml_blit_string(chan.file.data, chan.offset, new_data, 0, old_len);\n    caml_blit_string(str, 0, new_data, old_len, str_len);\n    chan.file.data = new_data;\n  }\n  chan.offset = 0;\n  return str_len;\n}\n\n//Provides: caml_ml_may_refill_input\n//Requires: caml_ml_string_length, caml_ml_refill_input\nfunction caml_ml_may_refill_input (chan) {\n  if (chan.refill == null) return;\n  if (caml_ml_string_length(chan.file.data) != chan.offset) return;\n  caml_ml_refill_input (chan);\n}\n\n//Provides: caml_ml_input\n//Requires: caml_blit_string, caml_string_of_array, caml_ml_string_length\n//Requires: caml_ml_refill_input\nfunction caml_ml_input (chan, s, i, l) {\n  var l2 = caml_ml_string_length(chan.file.data) - chan.offset;\n  if (l2 == 0 && chan.refill != null) l2 = caml_ml_refill_input(chan);\n  if (l2 < l) l = l2;\n  caml_blit_string(chan.file.data, chan.offset, s, i, l);\n  chan.offset += l;\n  return l;\n}\n\n//Provides: caml_fs_file_content\n//Requires: caml_string_of_array, caml_fs_content, caml_make_path, MlFile\n//Requires: caml_raise_not_found, unix_time\nfunction caml_fs_file_content(name) {\n  var path = caml_make_path(name);\n  var f = caml_fs_content(path);\n  if(f instanceof MlFile){\n    var now = unix_time();\n    f.atime = now;\n    return f.data;\n  }\n  caml_raise_not_found();\n}\n\n//Provides: caml_input_value\n//Requires: caml_marshal_data_size, caml_input_value_from_string, caml_string_of_array\nfunction caml_input_value (chan) {\n  var str = chan.file.data;\n  var offset = [chan.offset];\n  var _len = caml_marshal_data_size (str, offset[0]);\n  var res = caml_input_value_from_string(str, offset);\n  chan.offset = offset[0];\n  return res;\n}\n\n//Provides: caml_ml_input_char\n//Requires: caml_raise_end_of_file, caml_array_bound_error\n//Requires: caml_ml_string_length, caml_string_get, caml_ml_may_refill_input\nfunction caml_ml_input_char (chan) {\n  caml_ml_may_refill_input(chan);\n  if (chan.offset >= caml_ml_string_length(chan.file.data))\n    caml_raise_end_of_file();\n  var c = caml_string_get(chan.file.data, chan.offset);\n  chan.offset++;\n  return c;\n}\n\n//Provides: caml_ml_input_int\n//Requires: caml_raise_end_of_file\n//Requires: caml_ml_string_length, caml_string_unsafe_get, caml_ml_refill_input\nfunction caml_ml_input_int (chan) {\n  var s = chan.file.data, o = chan.offset;\n  while ((o + 3) >= caml_ml_string_length(s)) {\n    var l = caml_ml_refill_input(chan);\n    if (l == 0) caml_raise_end_of_file();\n    s = chan.file.data;\n    o = chan.offset;\n  }\n  var r = (caml_string_unsafe_get(s,o) << 24) | (caml_string_unsafe_get(s,o+1) << 16) | (caml_string_unsafe_get(s,o+2) << 8) | (caml_string_unsafe_get(s,o+3));\n  chan.offset+=4;\n  return r;\n}\n\n//Provides: caml_ml_seek_in\n//Requires: caml_raise_sys_error\nfunction caml_ml_seek_in(chan,pos){\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  chan.offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_in_64\n//Requires: caml_int64_to_float, caml_raise_sys_error\nfunction caml_ml_seek_in_64(chan,pos){\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  chan.offset = caml_int64_to_float(pos);\n  return 0;\n}\n\n//Provides: caml_ml_pos_in\nfunction caml_ml_pos_in(chan) {return chan.offset}\n\n//Provides: caml_ml_pos_in_64\n//Requires: caml_int64_of_float\nfunction caml_ml_pos_in_64(chan) {return caml_int64_of_float(chan.offset)}\n\n//Provides: caml_ml_input_scan_line\n//Requires: caml_array_bound_error, caml_ml_string_length, caml_string_get\n//Requires: caml_ml_may_refill_input\nfunction caml_ml_input_scan_line(chan){\n  caml_ml_may_refill_input(chan);\n  var p = chan.offset;\n  var s = chan.file.data;\n  var len = caml_ml_string_length(s);\n  if(p >= len) { return 0;}\n  while(true) {\n    if(p >= len) return - (p - chan.offset);\n    if(caml_string_get(s, p) == 10) return p - chan.offset + 1;\n    p++;\n  }\n}\n\n//Provides: caml_ml_flush\n//Requires: caml_raise_sys_error\nfunction caml_ml_flush (oc) {\n    if(! oc.opened) caml_raise_sys_error(\"Cannot flush a closed channel\");\n    if(oc.buffer == \"\") return 0;\n    if(oc.output) {\n      switch(oc.output.length){\n      case 2: oc.output(oc,oc.buffer);break;\n      default: oc.output(oc.buffer)\n      };\n    }\n    oc.buffer = \"\";\n    return 0;\n}\n\n//output to out_channel\n\n//Provides: caml_ml_output\n//Requires: caml_ml_flush,caml_ml_string_length\n//Requires: caml_create_string, caml_blit_string, caml_raise_sys_error\nfunction caml_ml_output (oc,buffer,offset,len) {\n    if(! oc.opened) caml_raise_sys_error(\"Cannot output to a closed channel\");\n    var string;\n    if(offset == 0 && caml_ml_string_length(buffer) == len)\n        string = buffer;\n    else {\n        string = caml_create_string(len);\n        caml_blit_string(buffer,offset,string,0,len);\n    }\n    var jsstring = string.toString();\n    var id = jsstring.lastIndexOf(\"\\n\");\n    if(id < 0)\n        oc.buffer+=jsstring;\n    else {\n        oc.buffer+=jsstring.substr(0,id+1);\n        caml_ml_flush (oc);\n        oc.buffer += jsstring.substr(id+1);\n    }\n    return 0;\n}\n\n//Provides: caml_ml_output_bytes\n//Requires: caml_ml_output\nvar caml_ml_output_bytes = caml_ml_output\n\n//Provides: caml_ml_output_char\n//Requires: caml_ml_output\n//Requires: caml_new_string\nfunction caml_ml_output_char (oc,c) {\n    var s = caml_new_string(String.fromCharCode(c));\n    caml_ml_output(oc,s,0,1);\n    return 0;\n}\n\n//Provides: caml_output_value\n//Requires: caml_output_value_to_string, caml_ml_output,caml_ml_string_length\nfunction caml_output_value (chan,v,_flags) {\n  var s = caml_output_value_to_string(v);\n  caml_ml_output(chan,s,0,caml_ml_string_length(s));\n  return 0;\n}\n\n\n//Provides: caml_ml_seek_out\nfunction caml_ml_seek_out(chan,pos){\n  chan.offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_out_64\n//Requires: caml_int64_to_float\nfunction caml_ml_seek_out_64(chan,pos){\n  chan.offset = caml_int64_to_float(pos);\n  return 0;\n}\n\n//Provides: caml_ml_pos_out\nfunction caml_ml_pos_out(chan) {return chan.offset}\n\n//Provides: caml_ml_pos_out_64\n//Requires: caml_int64_of_float\nfunction caml_ml_pos_out_64(chan) {\n  return caml_int64_of_float (chan.offset);\n}\n\n//Provides: caml_ml_output_int\n//Requires: caml_ml_output\n//Requires: caml_string_of_array\nfunction caml_ml_output_int (oc,i) {\n  var arr = [(i>>24) & 0xFF,(i>>16) & 0xFF,(i>>8) & 0xFF,i & 0xFF ];\n  var s = caml_string_of_array(arr);\n  caml_ml_output(oc,s,0,4);\n  return 0\n}\n","// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Dummy filesystem\n\n//Provides: caml_current_dir\nvar caml_current_dir = \"/\";\n//Provides: file_inode\nvar file_inode = 0\n\n//Provides: MlDir\n//Requires: file_inode, unix_time\nfunction MlDir(){ this.content={};\n                  this.inode = file_inode++;\n                  var now = unix_time();\n                  this.atime = now;\n                  this.mtime = now;\n                  this.ctime = now;\n                  }\nMlDir.prototype = {\n  exists:function(name){return this.content[name]?1:0;},\n  mk:function(name,c){this.content[name]=c},\n  get:function(name){return this.content[name]},\n  list:function(){\n    var a = [];\n    for(var n in this.content)\n      a.push(n);\n    return a;\n  },\n  remove:function(name){delete this.content[name];}\n}\n\n//Provides: MlFile\n//Requires: caml_create_string, file_inode, unix_time\nfunction MlFile(content){ this.data = content;\n                          this.inode = file_inode++;\n                          var now = unix_time();\n                          this.atime = now;\n                          this.mtime = now;\n                          this.ctime = now;\n}\nMlFile.prototype = {\n  truncate:function(){\n    this.data = caml_create_string(0);\n    this.modified();\n  },\n  modified:function() {\n    var now = unix_time();\n    this.atime = now;\n    this.mtime = now;\n  }\n}\n\n//Provides: caml_root_dir\n//Requires: MlDir\nvar caml_root_dir = new MlDir();\ncaml_root_dir.mk(\"\",new MlDir());\n\n//Provides: caml_sys_getcwd\n//Requires: caml_current_dir, caml_new_string\nfunction caml_sys_getcwd() { return caml_new_string(caml_current_dir); }\n//Provides: caml_sys_chdir\n//Requires: caml_current_dir, caml_make_path\n//Requires: caml_sys_file_exists, caml_sys_is_directory,caml_raise_no_such_file\nfunction caml_sys_chdir(dir) {\n  if(caml_sys_file_exists(dir) && caml_sys_is_directory(dir)){\n    var name = caml_make_path(dir);\n    name.push(\"\"); // we want the slash a the end\n    caml_current_dir = name.join(\"/\");\n    return 0;\n  }\n  else\n    caml_raise_no_such_file(dir);\n}\n//Provides: caml_raise_no_such_file\n//Requires: MlString, caml_raise_sys_error\nfunction caml_raise_no_such_file(name){\n  name = (name instanceof MlString)?name.toString():name;\n  caml_raise_sys_error (name + \": No such file or directory\");\n}\n\n//Provides: caml_raise_not_a_dir\n//Requires: MlString, caml_raise_sys_error\nfunction caml_raise_not_a_dir(name){\n  name = (name instanceof MlString)?name.toString():name;\n  caml_raise_sys_error (name + \": Not a directory\");\n}\n\n//Provides: caml_make_path\n//Requires: caml_current_dir,MlString\nfunction caml_make_path (name) {\n  name=(name instanceof MlString)?name.toString():name;\n  if(name.charCodeAt(0) != 47)\n    name = caml_current_dir + name;\n  var comp = name.split(\"/\");\n  var ncomp = []\n  for(var i = 0; i<comp.length; i++){\n    switch(comp[i]){\n    case \"..\": if(ncomp.length>1) ncomp.pop(); break;\n    case \".\": break;\n    case \"\": if(ncomp.length == 0) ncomp.push(\"\"); break;\n    default: ncomp.push(comp[i]);break\n    }\n  }\n  ncomp.orig = name;\n  return ncomp;\n\n}\n\n\n//Provides: caml_fs_register\n//Requires: MlDir, MlFile, caml_root_dir, caml_make_path, caml_raise_sys_error\n//Requires: MlString, caml_array_of_string\n//Requires: caml_invalid_argument, caml_new_string\n//Requires: caml_string_of_array\n// content can be : MlDIr,MlFile,MlString,Array, string\nfunction caml_fs_register(name,content) {\n  var path = caml_make_path(name);\n  var dir = caml_root_dir;\n  for(var i=0;i<path.length-1;i++){\n    var d = path[i];\n    if(!(dir.exists(d)))\n      dir.mk(d,new MlDir());\n    dir = dir.get(d);\n    if(!(dir instanceof MlDir))\n      caml_raise_sys_error (path.orig + \" : file already exists\");\n  }\n  var d = path[path.length-1];\n  if(dir.exists(d)) caml_raise_sys_error (path.orig + \" : file already exists\");\n  if(content instanceof MlDir) dir.mk(d,content);\n  else if(content instanceof MlFile) dir.mk(d,content);\n  else if(content instanceof MlString) dir.mk(d,new MlFile(content));\n  else if(content instanceof Array) dir.mk(d,new MlFile(caml_string_of_array(content)));\n  else if(content.toString) {\n    var mlstring = caml_new_string(content.toString());\n    //caml_array_of_string(mlstring);\n    dir.mk(d,new MlFile(mlstring));\n  }\n  else caml_invalid_argument(\"caml_fs_register\");\n  return 0;\n}\n\n//Provides: caml_fs_update_inode\n//Requires: MlDir, caml_root_dir, caml_make_path, caml_raise_sys_error\n//Requires: MlString\n//Requires: caml_invalid_argument\nfunction caml_fs_update_inode(name,content) {\n  var path = caml_make_path(name);\n  var dir = caml_root_dir;\n  for(var i=0;i<path.length-1;i++){\n    var d = path[i];\n    if(!(dir.exists(d)))\n      dir.mk(d,new MlDir());\n    dir = dir.get(d);\n    if(!(dir instanceof MlDir))\n      caml_raise_sys_error (path.orig + \" : file does not exists\");\n  }\n  var d = path[path.length-1];\n  if(!dir.exists(d)) caml_raise_sys_error (path.orig + \" : file does not exists\");\n  if(content instanceof MlString) {\n    var inode = dir.get(d);\n    inode.data = content;\n  }\n  else caml_invalid_argument(\"caml_fs_update_inode\");\n  return 0;\n}\n\n//Provides: caml_fs_init\n//Requires: caml_fs_register\nfunction caml_fs_init (){\n  var tmp=joo_global_object.caml_fs_tmp\n  if(tmp){\n    for(var i = 0; i < tmp.length; i++){\n      caml_fs_register(tmp[i].name,tmp[i].content);\n    }\n  }\n  joo_global_object.caml_fs_register = caml_fs_register;\n  return 0;\n}\n\n//Provides: caml_fs_register_extern\nfunction caml_fs_register_extern(name,content){\n  if(joo_global_object.caml_fs_register)\n    joo_global_object.caml_fs_register(name,content);\n  else {\n    if(!joo_global_object.caml_fs_tmp) joo_global_object.caml_fs_tmp = [];\n    joo_global_object.caml_fs_tmp.push({name:name,content:content});\n  }\n  return 0;\n}\n\n//Provides: caml_fs_content\n//Requires: caml_root_dir, caml_raise_no_such_file\nfunction caml_fs_content(path){\n  var dir = caml_root_dir;\n  for(var i=0;i<path.length;i++){\n    if(!(dir.exists && dir.exists(path[i]))) caml_raise_no_such_file(path.orig);\n    dir=dir.get(path[i]);\n  }\n  return dir\n}\n\n//Provides: caml_sys_file_exists\n//Requires: caml_root_dir, caml_make_path\nfunction caml_sys_file_exists (name) {\n  var dir = caml_root_dir;\n  var path = caml_make_path(name);\n  var auto_load;\n  var pos;\n  for(var i=0;i<path.length;i++){\n    if(dir.auto) { auto_load = dir.auto; pos = i}\n    if(!(dir.exists && dir.exists(path[i]))) {\n      if(auto_load) {\n        return auto_load(path,pos);\n      }\n      else return 0;\n    }\n    dir=dir.get(path[i]);\n  }\n  return 1;\n}\n\n//Provides: caml_fs_register_autoload\n//Requires: MlDir, caml_make_path, caml_raise_sys_error, caml_root_dir\nfunction caml_fs_register_autoload(path,f){\n  var path = caml_make_path(path);\n  var dir = caml_root_dir;\n  for(var i=0;i<path.length;i++){\n    var d = path[i];\n    if(!(dir.exists(d)))\n      dir.mk(d,new MlDir());\n    dir = dir.get(d);\n    if(!(dir instanceof MlDir))\n      caml_raise_sys_error (path.orig + \" : not a directory\");\n  }\n  dir.auto = f;\n  return 0;\n}\n\n//Provides: caml_sys_read_directory\n//Requires: caml_new_string, MlDir\n//Requires: caml_fs_content, caml_make_path, caml_raise_not_a_dir\nfunction caml_sys_read_directory(name){\n  var dir = caml_fs_content(caml_make_path(name));\n  if(!(dir instanceof MlDir)){\n    caml_raise_not_a_dir(name);\n  }\n  var list = dir.list();\n  var l = new Array(list.length + 1);\n  l[0] = 0;\n  for(var i=0;i<list.length;i++)\n    l[i+1] = caml_new_string(list[i]);\n  return l;\n}\n\n//Provides: caml_sys_remove\n//Requires: caml_make_path, caml_fs_content, caml_raise_no_such_file\nfunction caml_sys_remove(name){\n  var path = caml_make_path(name);\n  var dir = caml_fs_content(path.slice(0,-1))\n  if(dir.exists(path[path.length-1]))\n    dir.remove(path[path.length-1]);\n  else caml_raise_no_such_file(name);\n  return 0;\n}\n\n//Provides: caml_sys_is_directory\n//Requires: caml_make_path, caml_fs_content, MlDir\nfunction caml_sys_is_directory(name){\n  var path = caml_make_path(name);\n  var dir = caml_fs_content(path);\n  return (dir instanceof MlDir)?1:0;\n}\n\n//Provides: caml_sys_rename\n//Requires: caml_fs_register,caml_sys_remove\n//Requires: caml_make_path,caml_fs_content\n//Requires: caml_sys_file_exists, caml_sys_is_directory, caml_raise_sys_error\nfunction caml_sys_rename(o,n){\n  var path = caml_make_path(o);\n  var content = caml_fs_content(path);\n  if(caml_sys_file_exists(n)){\n    if(caml_sys_is_directory(n)) caml_raise_sys_error(n.toString() + \" : is a directory\");\n    caml_sys_remove(n);\n  }\n  caml_fs_register(n, content);\n  caml_sys_remove(o);\n  return 0;\n}\n\n\n//Provides: caml_ba_map_file\n//Requires: caml_failwith\nfunction caml_ba_map_file(vfd, kind, layout, shared, dims, pos) {\n    // var data = caml_global_data.fds[vfd];\n    caml_failwith(\"caml_ba_map_file not Implemented\");\n}\n\n//Provides: caml_ba_map_file_bytecode\n//Requires: caml_ba_map_file\nfunction caml_ba_map_file_bytecode(argv,argn){\n  return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);\n}\n\n\n//Provides: unix_stat_file\n//Requires: caml_make_path, caml_fs_content, MlFile, MlDir,caml_ml_string_length\nfunction unix_stat_file(f){\n  if (f instanceof MlDir) {\n    var kind = 1; //S_DIR\n    var size = 0;\n  }\n  if (f instanceof MlFile) {\n    var kind = 0; //S_REG\n    var size = caml_ml_string_length(f.data);\n  }\n\n  return [0,\n   0, //st_dev\n   f.inode, // st_ino\n   kind, // st_kind\n   436, //st_perm 0o664\n   1, //st_nlink\n   1, //st_uid\n   1, //st_gid\n   0, //st_rdev\n   size,//st_size\n   +f.atime,\n   +f.mtime,\n   +f.ctime\n  ]\n}\n\n//Provides: unix_stat\n//Requires: caml_fs_content, caml_make_path, unix_stat_file\nfunction unix_stat(name){\n  var f = caml_fs_content(caml_make_path(name));\n  return unix_stat_file(f)\n}\n\n//Provides: unix_lstat\n//Requires: unix_stat\nvar unix_lstat = unix_stat\n\n//Provides: unix_fstat\n//Requires: unix_stat_file, caml_global_data\nfunction unix_fstat(idx){\n  return unix_stat_file(caml_global_data.fds[idx].file)\n}\n","//Provides: unix_gettimeofday\nfunction unix_gettimeofday () {\n  return (new Date()).getTime() / 1000;\n}\n\n//Provides: unix_time\n//Requires: unix_gettimeofday\nfunction unix_time () {\n  return Math.floor(unix_gettimeofday ());\n}\n\n//Provides: unix_gmtime\nfunction unix_gmtime (t) {\n  var d = new Date (t * 1000);\n  var januaryfirst = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n  var doy = Math.floor((d - januaryfirst) / 86400000);\n  return [0, d.getUTCSeconds(), d.getUTCMinutes(), d.getUTCHours(),\n          d.getUTCDate(), d.getUTCMonth(), d.getUTCFullYear() - 1900,\n          d.getUTCDay(), doy,\n          false | 0 /* for UTC daylight savings time is false */]\n}\n\n//Provides: unix_localtime\nfunction unix_localtime (t) {\n  var d = new Date (t * 1000);\n  var januaryfirst = new Date(d.getFullYear(), 0, 1);\n  var doy = Math.floor((d - januaryfirst) / 86400000);\n  var jan = new Date(d.getFullYear(), 0, 1);\n  var jul = new Date(d.getFullYear(), 6, 1);\n  var stdTimezoneOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n  return [0, d.getSeconds(), d.getMinutes(), d.getHours(),\n  d.getDate(), d.getMonth(), d.getFullYear() - 1900,\n  d.getDay(), doy,\n  (d.getTimezoneOffset() < stdTimezoneOffset) | 0 /* daylight savings time  field. */]\n}\n\n//Provides: unix_mktime\n//Requires: unix_localtime\nfunction unix_mktime(tm){\n    var d = new Date(tm[6]+1900,tm[5],tm[4],tm[3],tm[2],tm[1]);\n    var t = Math.floor(d.getTime() / 1000);\n    var tm2 = unix_localtime(t);\n    return [0,t,tm2];\n}\n\n//Provides: win_startup const\nfunction win_startup() {}\n\n//Provides: win_cleanup const\nfunction win_cleanup() {}\n\n//Provides: win_handle_fd const\nfunction win_handle_fd(x) {return x;}\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* type 'a option = None | Some of 'a *)\n\n(* Exceptions *)\n\nexternal register_named_value : string -> 'a -> unit\n                              = \"caml_register_named_value\"\n\nlet () =\n  (* for asmrun/fail.c *)\n  register_named_value \"Pervasives.array_bound_error\"\n    (Invalid_argument \"index out of bounds\")\n\n\nexternal raise : exn -> 'a = \"%raise\"\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n\nlet failwith s = raise(Failure s)\nlet invalid_arg s = raise(Invalid_argument s)\n\nexception Exit\n\n(* Composition operators *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n\n(* Debugging *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\nexternal __FILE__ : string = \"%loc_FILE\"\nexternal __LINE__ : int = \"%loc_LINE\"\nexternal __MODULE__ : string = \"%loc_MODULE\"\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n\n(* Comparisons *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\nexternal compare : 'a -> 'a -> int = \"%compare\"\n\nlet min x y = if x <= y then x else y\nlet max x y = if x >= y then x else y\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n\n(* Boolean operations *)\n\nexternal not : bool -> bool = \"%boolnot\"\nexternal ( & ) : bool -> bool -> bool = \"%sequand\"\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\nexternal ( or ) : bool -> bool -> bool = \"%sequor\"\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n\n(* Integer operations *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\nexternal ( ~+ ) : int -> int = \"%identity\"\nexternal succ : int -> int = \"%succint\"\nexternal pred : int -> int = \"%predint\"\nexternal ( + ) : int -> int -> int = \"%addint\"\nexternal ( - ) : int -> int -> int = \"%subint\"\nexternal ( * ) : int -> int -> int = \"%mulint\"\nexternal ( / ) : int -> int -> int = \"%divint\"\nexternal ( mod ) : int -> int -> int = \"%modint\"\n\nlet abs x = if x >= 0 then x else -x\n\nexternal ( land ) : int -> int -> int = \"%andint\"\nexternal ( lor ) : int -> int -> int = \"%orint\"\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n\nlet lnot x = x lxor (-1)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n\nlet max_int = (-1) lsr 1\nlet min_int = max_int + 1\n\n(* Floating-point operations *)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\nexternal ( ~+. ) : float -> float = \"%identity\"\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\nexternal ( ** ) : float -> float -> float = \"caml_power_float\" \"pow\"\n  [@@unboxed] [@@noalloc]\nexternal exp : float -> float = \"caml_exp_float\" \"exp\" [@@unboxed] [@@noalloc]\nexternal expm1 : float -> float = \"caml_expm1_float\" \"caml_expm1\"\n  [@@unboxed] [@@noalloc]\nexternal acos : float -> float = \"caml_acos_float\" \"acos\"\n  [@@unboxed] [@@noalloc]\nexternal asin : float -> float = \"caml_asin_float\" \"asin\"\n  [@@unboxed] [@@noalloc]\nexternal atan : float -> float = \"caml_atan_float\" \"atan\"\n  [@@unboxed] [@@noalloc]\nexternal atan2 : float -> float -> float = \"caml_atan2_float\" \"atan2\"\n  [@@unboxed] [@@noalloc]\nexternal hypot : float -> float -> float\n               = \"caml_hypot_float\" \"caml_hypot\" [@@unboxed] [@@noalloc]\nexternal cos : float -> float = \"caml_cos_float\" \"cos\" [@@unboxed] [@@noalloc]\nexternal cosh : float -> float = \"caml_cosh_float\" \"cosh\"\n  [@@unboxed] [@@noalloc]\nexternal log : float -> float = \"caml_log_float\" \"log\" [@@unboxed] [@@noalloc]\nexternal log10 : float -> float = \"caml_log10_float\" \"log10\"\n  [@@unboxed] [@@noalloc]\nexternal log1p : float -> float = \"caml_log1p_float\" \"caml_log1p\"\n  [@@unboxed] [@@noalloc]\nexternal sin : float -> float = \"caml_sin_float\" \"sin\" [@@unboxed] [@@noalloc]\nexternal sinh : float -> float = \"caml_sinh_float\" \"sinh\"\n  [@@unboxed] [@@noalloc]\nexternal sqrt : float -> float = \"caml_sqrt_float\" \"sqrt\"\n  [@@unboxed] [@@noalloc]\nexternal tan : float -> float = \"caml_tan_float\" \"tan\" [@@unboxed] [@@noalloc]\nexternal tanh : float -> float = \"caml_tanh_float\" \"tanh\"\n  [@@unboxed] [@@noalloc]\nexternal ceil : float -> float = \"caml_ceil_float\" \"ceil\"\n  [@@unboxed] [@@noalloc]\nexternal floor : float -> float = \"caml_floor_float\" \"floor\"\n  [@@unboxed] [@@noalloc]\nexternal abs_float : float -> float = \"%absfloat\"\nexternal copysign : float -> float -> float\n                  = \"caml_copysign_float\" \"caml_copysign\"\n                  [@@unboxed] [@@noalloc]\nexternal mod_float : float -> float -> float = \"caml_fmod_float\" \"fmod\"\n  [@@unboxed] [@@noalloc]\nexternal frexp : float -> float * int = \"caml_frexp_float\"\nexternal ldexp : (float [@unboxed]) -> (int [@untagged]) -> (float [@unboxed]) =\n  \"caml_ldexp_float\" \"caml_ldexp_float_unboxed\" [@@noalloc]\nexternal modf : float -> float * float = \"caml_modf_float\"\nexternal float : int -> float = \"%floatofint\"\nexternal float_of_int : int -> float = \"%floatofint\"\nexternal truncate : float -> int = \"%intoffloat\"\nexternal int_of_float : float -> int = \"%intoffloat\"\nexternal float_of_bits : int64 -> float = \"caml_int64_float_of_bits\"\nlet infinity =\n  float_of_bits 0x7F_F0_00_00_00_00_00_00L\nlet neg_infinity =\n  float_of_bits 0xFF_F0_00_00_00_00_00_00L\nlet nan =\n  float_of_bits 0x7F_F0_00_00_00_00_00_01L\nlet max_float =\n  float_of_bits 0x7F_EF_FF_FF_FF_FF_FF_FFL\nlet min_float =\n  float_of_bits 0x00_10_00_00_00_00_00_00L\nlet epsilon_float =\n  float_of_bits 0x3C_B0_00_00_00_00_00_00L\n\ntype fpclass =\n    FP_normal\n  | FP_subnormal\n  | FP_zero\n  | FP_infinite\n  | FP_nan\nexternal classify_float : (float [@unboxed]) -> fpclass =\n  \"caml_classify_float\" \"caml_classify_float_unboxed\" [@@noalloc]\n\n(* String and byte sequence operations -- more in modules String and Bytes *)\n\nexternal string_length : string -> int = \"%string_length\"\nexternal bytes_length : bytes -> int = \"%string_length\"\nexternal bytes_create : int -> bytes = \"caml_create_bytes\"\nexternal string_blit : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\nexternal bytes_blit : bytes -> int -> bytes -> int -> int -> unit\n                        = \"caml_blit_bytes\" [@@noalloc]\nexternal bytes_unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet ( ^ ) s1 s2 =\n  let l1 = string_length s1 and l2 = string_length s2 in\n  let s = bytes_create (l1 + l2) in\n  string_blit s1 0 s 0 l1;\n  string_blit s2 0 s l1 l2;\n  bytes_unsafe_to_string s\n\n(* Character operations -- more in module Char *)\n\nexternal int_of_char : char -> int = \"%identity\"\nexternal unsafe_char_of_int : int -> char = \"%identity\"\nlet char_of_int n =\n  if n < 0 || n > 255 then invalid_arg \"char_of_int\" else unsafe_char_of_int n\n\n(* Unit operations *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n\n(* Pair operations *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n\n(* References *)\n\ntype 'a ref = { mutable contents : 'a }\nexternal ref : 'a -> 'a ref = \"%makemutable\"\nexternal ( ! ) : 'a ref -> 'a = \"%field0\"\nexternal ( := ) : 'a ref -> 'a -> unit = \"%setfield0\"\nexternal incr : int ref -> unit = \"%incr\"\nexternal decr : int ref -> unit = \"%decr\"\n\n(* Result type *)\n\ntype ('a,'b) result = Ok of 'a | Error of 'b\n\n(* String conversion functions *)\n\nexternal format_int : string -> int -> string = \"caml_format_int\"\nexternal format_float : string -> float -> string = \"caml_format_float\"\n\nlet string_of_bool b =\n  if b then \"true\" else \"false\"\nlet bool_of_string = function\n  | \"true\" -> true\n  | \"false\" -> false\n  | _ -> invalid_arg \"bool_of_string\"\n\nlet string_of_int n =\n  format_int \"%d\" n\n\nexternal int_of_string : string -> int = \"caml_int_of_string\"\nexternal string_get : string -> int -> char = \"%string_safe_get\"\n\nlet valid_float_lexem s =\n  let l = string_length s in\n  let rec loop i =\n    if i >= l then s ^ \".\" else\n    match string_get s i with\n    | '0' .. '9' | '-' -> loop (i + 1)\n    | _ -> s\n  in\n  loop 0\n\n\nlet string_of_float f = valid_float_lexem (format_float \"%.12g\" f)\n\nexternal float_of_string : string -> float = \"caml_float_of_string\"\n\n(* List operations -- more in module List *)\n\nlet rec ( @ ) l1 l2 =\n  match l1 with\n    [] -> l2\n  | hd :: tl -> hd :: (tl @ l2)\n\n(* I/O operations *)\n\ntype in_channel\ntype out_channel\n\nexternal open_descriptor_out : int -> out_channel\n                             = \"caml_ml_open_descriptor_out\"\nexternal open_descriptor_in : int -> in_channel = \"caml_ml_open_descriptor_in\"\n\nlet stdin = open_descriptor_in 0\nlet stdout = open_descriptor_out 1\nlet stderr = open_descriptor_out 2\n\n(* General output functions *)\n\ntype open_flag =\n    Open_rdonly | Open_wronly | Open_append\n  | Open_creat | Open_trunc | Open_excl\n  | Open_binary | Open_text | Open_nonblock\n\nexternal open_desc : string -> open_flag list -> int -> int = \"caml_sys_open\"\n\nexternal set_out_channel_name: out_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_out_gen mode perm name =\n  let c = open_descriptor_out(open_desc name mode perm) in\n  set_out_channel_name c name;\n  c\n\nlet open_out name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_text] 0o666 name\n\nlet open_out_bin name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_binary] 0o666 name\n\nexternal flush : out_channel -> unit = \"caml_ml_flush\"\n\nexternal out_channels_list : unit -> out_channel list\n                           = \"caml_ml_out_channels_list\"\n\nlet flush_all () =\n  let rec iter = function\n      [] -> ()\n    | a :: l -> (try flush a with _ -> ()); iter l\n  in iter (out_channels_list ())\n\nexternal unsafe_output : out_channel -> bytes -> int -> int -> unit\n                       = \"caml_ml_output_bytes\"\nexternal unsafe_output_string : out_channel -> string -> int -> int -> unit\n                              = \"caml_ml_output\"\n\nexternal output_char : out_channel -> char -> unit = \"caml_ml_output_char\"\n\nlet output_bytes oc s =\n  unsafe_output oc s 0 (bytes_length s)\n\nlet output_string oc s =\n  unsafe_output_string oc s 0 (string_length s)\n\nlet output oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"output\"\n  else unsafe_output oc s ofs len\n\nlet output_substring oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > string_length s - len\n  then invalid_arg \"output_substring\"\n  else unsafe_output_string oc s ofs len\n\nexternal output_byte : out_channel -> int -> unit = \"caml_ml_output_char\"\nexternal output_binary_int : out_channel -> int -> unit = \"caml_ml_output_int\"\n\nexternal marshal_to_channel : out_channel -> 'a -> unit list -> unit\n     = \"caml_output_value\"\nlet output_value chan v = marshal_to_channel chan v []\n\nexternal seek_out : out_channel -> int -> unit = \"caml_ml_seek_out\"\nexternal pos_out : out_channel -> int = \"caml_ml_pos_out\"\nexternal out_channel_length : out_channel -> int = \"caml_ml_channel_size\"\nexternal close_out_channel : out_channel -> unit = \"caml_ml_close_channel\"\nlet close_out oc = flush oc; close_out_channel oc\nlet close_out_noerr oc =\n  (try flush oc with _ -> ());\n  (try close_out_channel oc with _ -> ())\nexternal set_binary_mode_out : out_channel -> bool -> unit\n                             = \"caml_ml_set_binary_mode\"\n\n(* General input functions *)\n\nexternal set_in_channel_name: in_channel -> string -> unit =\n  \"caml_ml_set_channel_name\"\n\nlet open_in_gen mode perm name =\n  let c = open_descriptor_in(open_desc name mode perm) in\n  set_in_channel_name c name;\n  c\n\nlet open_in name =\n  open_in_gen [Open_rdonly; Open_text] 0 name\n\nlet open_in_bin name =\n  open_in_gen [Open_rdonly; Open_binary] 0 name\n\nexternal input_char : in_channel -> char = \"caml_ml_input_char\"\n\nexternal unsafe_input : in_channel -> bytes -> int -> int -> int\n                      = \"caml_ml_input\"\n\nlet input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"input\"\n  else unsafe_input ic s ofs len\n\nlet rec unsafe_really_input ic s ofs len =\n  if len <= 0 then () else begin\n    let r = unsafe_input ic s ofs len in\n    if r = 0\n    then raise End_of_file\n    else unsafe_really_input ic s (ofs + r) (len - r)\n  end\n\nlet really_input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"really_input\"\n  else unsafe_really_input ic s ofs len\n\nlet really_input_string ic len =\n  let s = bytes_create len in\n  really_input ic s 0 len;\n  bytes_unsafe_to_string s\n\nexternal input_scan_line : in_channel -> int = \"caml_ml_input_scan_line\"\n\nlet input_line chan =\n  let rec build_result buf pos = function\n    [] -> buf\n  | hd :: tl ->\n      let len = bytes_length hd in\n      bytes_blit hd 0 buf (pos - len) len;\n      build_result buf (pos - len) tl in\n  let rec scan accu len =\n    let n = input_scan_line chan in\n    if n = 0 then begin                   (* n = 0: we are at EOF *)\n      match accu with\n        [] -> raise End_of_file\n      | _  -> build_result (bytes_create len) len accu\n    end else if n > 0 then begin          (* n > 0: newline found in buffer *)\n      let res = bytes_create (n - 1) in\n      ignore (unsafe_input chan res 0 (n - 1));\n      ignore (input_char chan);           (* skip the newline *)\n      match accu with\n        [] -> res\n      |  _ -> let len = len + n - 1 in\n              build_result (bytes_create len) len (res :: accu)\n    end else begin                        (* n < 0: newline not found *)\n      let beg = bytes_create (-n) in\n      ignore(unsafe_input chan beg 0 (-n));\n      scan (beg :: accu) (len - n)\n    end\n  in bytes_unsafe_to_string (scan [] 0)\n\nexternal input_byte : in_channel -> int = \"caml_ml_input_char\"\nexternal input_binary_int : in_channel -> int = \"caml_ml_input_int\"\nexternal input_value : in_channel -> 'a = \"caml_input_value\"\nexternal seek_in : in_channel -> int -> unit = \"caml_ml_seek_in\"\nexternal pos_in : in_channel -> int = \"caml_ml_pos_in\"\nexternal in_channel_length : in_channel -> int = \"caml_ml_channel_size\"\nexternal close_in : in_channel -> unit = \"caml_ml_close_channel\"\nlet close_in_noerr ic = (try close_in ic with _ -> ())\nexternal set_binary_mode_in : in_channel -> bool -> unit\n                            = \"caml_ml_set_binary_mode\"\n\n(* Output functions on standard output *)\n\nlet print_char c = output_char stdout c\nlet print_string s = output_string stdout s\nlet print_bytes s = output_bytes stdout s\nlet print_int i = output_string stdout (string_of_int i)\nlet print_float f = output_string stdout (string_of_float f)\nlet print_endline s =\n  output_string stdout s; output_char stdout '\\n'; flush stdout\nlet print_newline () = output_char stdout '\\n'; flush stdout\n\n(* Output functions on standard error *)\n\nlet prerr_char c = output_char stderr c\nlet prerr_string s = output_string stderr s\nlet prerr_bytes s = output_bytes stderr s\nlet prerr_int i = output_string stderr (string_of_int i)\nlet prerr_float f = output_string stderr (string_of_float f)\nlet prerr_endline s =\n  output_string stderr s; output_char stderr '\\n'; flush stderr\nlet prerr_newline () = output_char stderr '\\n'; flush stderr\n\n(* Input functions on standard input *)\n\nlet read_line () = flush stdout; input_line stdin\nlet read_int () = int_of_string(read_line())\nlet read_float () = float_of_string(read_line())\n\n(* Operations on large files *)\n\nmodule LargeFile =\n  struct\n    external seek_out : out_channel -> int64 -> unit = \"caml_ml_seek_out_64\"\n    external pos_out : out_channel -> int64 = \"caml_ml_pos_out_64\"\n    external out_channel_length : out_channel -> int64\n                                = \"caml_ml_channel_size_64\"\n    external seek_in : in_channel -> int64 -> unit = \"caml_ml_seek_in_64\"\n    external pos_in : in_channel -> int64 = \"caml_ml_pos_in_64\"\n    external in_channel_length : in_channel -> int64 = \"caml_ml_channel_size_64\"\n  end\n\n(* Formats *)\n\ntype ('a, 'b, 'c, 'd, 'e, 'f) format6\n   = ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6\n   = Format of ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt\n               * string\n\ntype ('a, 'b, 'c, 'd) format4 = ('a, 'b, 'c, 'c, 'c, 'd) format6\n\ntype ('a, 'b, 'c) format = ('a, 'b, 'c, 'c) format4\n\nlet string_of_format (Format (_fmt, str)) = str\n\nexternal format_of_string :\n ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n ('a, 'b, 'c, 'd, 'e, 'f) format6 = \"%identity\"\n\nlet ( ^^ ) (Format (fmt1, str1)) (Format (fmt2, str2)) =\n  Format (CamlinternalFormatBasics.concat_fmt fmt1 fmt2,\n          str1 ^ \"%,\" ^ str2)\n\n(* Miscellaneous *)\n\nexternal sys_exit : int -> 'a = \"caml_sys_exit\"\n\nlet exit_function = ref flush_all\n\nlet at_exit f =\n  let g = !exit_function in\n  exit_function := (fun () -> f(); g())\n\nlet do_at_exit () = (!exit_function) ()\n\nlet exit retcode =\n  do_at_exit ();\n  sys_exit retcode\n\nlet _ = register_named_value \"Pervasives.do_at_exit\" do_at_exit\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen Printf\n\nlet printers = ref []\n\nlet locfmt = format_of_string \"File \\\"%s\\\", line %d, characters %d-%d: %s\"\n\nlet field x i =\n  let f = Obj.field x i in\n  if not (Obj.is_block f) then\n    sprintf \"%d\" (Obj.magic f : int)           (* can also be a char *)\n  else if Obj.tag f = Obj.string_tag then\n    sprintf \"%S\" (Obj.magic f : string)\n  else if Obj.tag f = Obj.double_tag then\n    string_of_float (Obj.magic f : float)\n  else\n    \"_\"\n\nlet rec other_fields x i =\n  if i >= Obj.size x then \"\"\n  else sprintf \", %s%s\" (field x i) (other_fields x (i+1))\n\nlet fields x =\n  match Obj.size x with\n  | 0 -> \"\"\n  | 1 -> \"\"\n  | 2 -> sprintf \"(%s)\" (field x 1)\n  | _ -> sprintf \"(%s%s)\" (field x 1) (other_fields x 2)\n\nlet to_string x =\n  let rec conv = function\n    | hd :: tl ->\n        (match try hd x with _ -> None with\n        | Some s -> s\n        | None -> conv tl)\n    | [] ->\n        match x with\n        | Out_of_memory -> \"Out of memory\"\n        | Stack_overflow -> \"Stack overflow\"\n        | Match_failure(file, line, char) ->\n            sprintf locfmt file line char (char+5) \"Pattern matching failed\"\n        | Assert_failure(file, line, char) ->\n            sprintf locfmt file line char (char+6) \"Assertion failed\"\n        | Undefined_recursive_module(file, line, char) ->\n            sprintf locfmt file line char (char+6) \"Undefined recursive module\"\n        | _ ->\n            let x = Obj.repr x in\n            if Obj.tag x <> 0 then\n              (Obj.magic (Obj.field x 0) : string)\n            else\n              let constructor =\n                (Obj.magic (Obj.field (Obj.field x 0) 0) : string) in\n              constructor ^ (fields x) in\n  conv !printers\n\nlet print fct arg =\n  try\n    fct arg\n  with x ->\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    flush stderr;\n    raise x\n\nlet catch fct arg =\n  try\n    fct arg\n  with x ->\n    flush stdout;\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    exit 2\n\ntype raw_backtrace_slot\ntype raw_backtrace\n\nexternal get_raw_backtrace:\n  unit -> raw_backtrace = \"caml_get_exception_raw_backtrace\"\n\ntype backtrace_slot =\n  | Known_location of {\n      is_raise    : bool;\n      filename    : string;\n      line_number : int;\n      start_char  : int;\n      end_char    : int;\n      is_inline   : bool;\n    }\n  | Unknown_location of {\n      is_raise : bool\n    }\n\n(* to avoid warning *)\nlet _ = [Known_location { is_raise = false; filename = \"\";\n                          line_number = 0; start_char = 0; end_char = 0;\n                          is_inline = false };\n         Unknown_location { is_raise = false }]\n\nexternal convert_raw_backtrace_slot:\n  raw_backtrace_slot -> backtrace_slot = \"caml_convert_raw_backtrace_slot\"\n\nexternal convert_raw_backtrace:\n  raw_backtrace -> backtrace_slot array = \"caml_convert_raw_backtrace\"\n\nlet convert_raw_backtrace bt =\n  try Some (convert_raw_backtrace bt)\n  with Failure _ -> None\n\nlet format_backtrace_slot pos slot =\n  let info is_raise =\n    if is_raise then\n      if pos = 0 then \"Raised at\" else \"Re-raised at\"\n    else\n      if pos = 0 then \"Raised by primitive operation at\" else \"Called from\"\n  in\n  match slot with\n  | Unknown_location l ->\n      if l.is_raise then\n        (* compiler-inserted re-raise, skipped *) None\n      else\n        Some (sprintf \"%s unknown location\" (info false))\n  | Known_location l ->\n      Some (sprintf \"%s file \\\"%s\\\"%s, line %d, characters %d-%d\"\n              (info l.is_raise) l.filename\n              (if l.is_inline then \" (inlined)\" else \"\")\n              l.line_number l.start_char l.end_char)\n\nlet print_exception_backtrace outchan backtrace =\n  match backtrace with\n  | None ->\n      fprintf outchan\n        \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> fprintf outchan \"%s\\n\" str\n      done\n\nlet print_raw_backtrace outchan raw_backtrace =\n  print_exception_backtrace outchan (convert_raw_backtrace raw_backtrace)\n\n(* confusingly named: prints the global current backtrace *)\nlet print_backtrace outchan =\n  print_raw_backtrace outchan (get_raw_backtrace ())\n\nlet backtrace_to_string backtrace =\n  match backtrace with\n  | None ->\n     \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      let b = Buffer.create 1024 in\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> bprintf b \"%s\\n\" str\n      done;\n      Buffer.contents b\n\nlet raw_backtrace_to_string raw_backtrace =\n  backtrace_to_string (convert_raw_backtrace raw_backtrace)\n\nlet backtrace_slot_is_raise = function\n  | Known_location l -> l.is_raise\n  | Unknown_location l -> l.is_raise\n\nlet backtrace_slot_is_inline = function\n  | Known_location l -> l.is_inline\n  | Unknown_location _ -> false\n\ntype location = {\n  filename : string;\n  line_number : int;\n  start_char : int;\n  end_char : int;\n}\n\nlet backtrace_slot_location = function\n  | Unknown_location _ -> None\n  | Known_location l ->\n    Some {\n      filename    = l.filename;\n      line_number = l.line_number;\n      start_char  = l.start_char;\n      end_char    = l.end_char;\n    }\n\nlet backtrace_slots raw_backtrace =\n  (* The documentation of this function guarantees that Some is\n     returned only if a part of the trace is usable. This gives us\n     a bit more work than just convert_raw_backtrace, but it makes the\n     API more user-friendly -- otherwise most users would have to\n     reimplement the \"Program not linked with -g, sorry\" logic\n     themselves. *)\n  match convert_raw_backtrace raw_backtrace with\n    | None -> None\n    | Some backtrace ->\n      let usable_slot = function\n        | Unknown_location _ -> false\n        | Known_location _ -> true in\n      let rec exists_usable = function\n        | (-1) -> false\n        | i -> usable_slot backtrace.(i) || exists_usable (i - 1) in\n      if exists_usable (Array.length backtrace - 1)\n      then Some backtrace\n      else None\n\nmodule Slot = struct\n  type t = backtrace_slot\n  let format = format_backtrace_slot\n  let is_raise = backtrace_slot_is_raise\n  let is_inline = backtrace_slot_is_inline\n  let location = backtrace_slot_location\nend\n\nexternal raw_backtrace_length :\n  raw_backtrace -> int = \"caml_raw_backtrace_length\" [@@noalloc]\n\nexternal get_raw_backtrace_slot :\n  raw_backtrace -> int -> raw_backtrace_slot = \"caml_raw_backtrace_slot\"\n\nexternal get_raw_backtrace_next_slot :\n  raw_backtrace_slot -> raw_backtrace_slot option\n  = \"caml_raw_backtrace_next_slot\"\n\n(* confusingly named:\n   returns the *string* corresponding to the global current backtrace *)\nlet get_backtrace () =\n  backtrace_to_string (convert_raw_backtrace (get_raw_backtrace ()))\n\nexternal record_backtrace: bool -> unit = \"caml_record_backtrace\"\nexternal backtrace_status: unit -> bool = \"caml_backtrace_status\"\n\nlet register_printer fn =\n  printers := fn :: !printers\n\nexternal get_callstack: int -> raw_backtrace = \"caml_get_current_callstack\"\n\nlet exn_slot x =\n  let x = Obj.repr x in\n  if Obj.tag x = 0 then Obj.field x 0 else x\n\nlet exn_slot_id x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 1) : int)\n\nlet exn_slot_name x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 0) : string)\n\n\nlet uncaught_exception_handler = ref None\n\nlet set_uncaught_exception_handler fn = uncaught_exception_handler := Some fn\n\nlet empty_backtrace : raw_backtrace = Obj.obj (Obj.new_block Obj.abstract_tag 0)\n\nlet try_get_raw_backtrace () =\n  try\n    get_raw_backtrace ()\n  with _ (* Out_of_memory? *) ->\n    empty_backtrace\n\nlet handle_uncaught_exception' exn debugger_in_use =\n  try\n    (* Get the backtrace now, in case one of the [at_exit] function\n       destroys it. *)\n    let raw_backtrace =\n      if debugger_in_use (* Same test as in [byterun/printexc.c] *) then\n        empty_backtrace\n      else\n        try_get_raw_backtrace ()\n    in\n    (try Pervasives.do_at_exit () with _ -> ());\n    match !uncaught_exception_handler with\n    | None ->\n        eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n        print_raw_backtrace stderr raw_backtrace;\n        flush stderr\n    | Some handler ->\n        try\n          handler exn raw_backtrace\n        with exn' ->\n          let raw_backtrace' = try_get_raw_backtrace () in\n          eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n          print_raw_backtrace stderr raw_backtrace;\n          eprintf \"Fatal error in uncaught exception handler: exception %s\\n\"\n            (to_string exn');\n          print_raw_backtrace stderr raw_backtrace';\n          flush stderr\n  with\n    | Out_of_memory ->\n        prerr_endline\n          \"Fatal error: out of memory in uncaught exception handler\"\n\n(* This function is called by [caml_fatal_uncaught_exception] in\n   [byterun/printexc.c] which expects no exception is raised. *)\nlet handle_uncaught_exception exn debugger_in_use =\n  try\n    handle_uncaught_exception' exn debugger_in_use\n  with _ ->\n    (* There is not much we can do at this point *)\n    ()\n\nexternal register_named_value : string -> 'a -> unit\n  = \"caml_register_named_value\"\n\nlet () =\n  register_named_value \"Printexc.handle_uncaught_exception\"\n    handle_uncaught_exception\n","let io x = Firebug.console##log x\n\nlet a = BroadcastChannel.create \"testLDKZLMKD\"\n\nlet () = Firebug.console##log(a)\nlet () = Firebug.console##log(BroadcastChannel.name a)\n\nlet _ = \n  let open Lwt_js_events in \n  async_loop \n    keydown \n    Dom_html.window \n    (fun _ _ ->\n      let _ = io \"test\" in\n      Lwt.return_unit \n    )\n\n\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Padding position. *)\ntype padty =\n  | Left   (* Text is left justified ('-' option).               *)\n  | Right  (* Text is right justified (no '-' option).           *)\n  | Zeros  (* Text is right justified by zeros (see '0' option). *)\n\n(***)\n\n(* Integer conversion. *)\ntype int_conv =\n  | Int_d | Int_pd | Int_sd        (*  %d | %+d | % d  *)\n  | Int_i | Int_pi | Int_si        (*  %i | %+i | % i  *)\n  | Int_x | Int_Cx                 (*  %x | %#x        *)\n  | Int_X | Int_CX                 (*  %X | %#X        *)\n  | Int_o | Int_Co                 (*  %o | %#o        *)\n  | Int_u                          (*  %u              *)\n\n(* Float conversion. *)\ntype float_conv =\n  | Float_f | Float_pf | Float_sf  (*  %f | %+f | % f  *)\n  | Float_e | Float_pe | Float_se  (*  %e | %+e | % e  *)\n  | Float_E | Float_pE | Float_sE  (*  %E | %+E | % E  *)\n  | Float_g | Float_pg | Float_sg  (*  %g | %+g | % g  *)\n  | Float_G | Float_pG | Float_sG  (*  %G | %+G | % G  *)\n  | Float_F                        (*  %F              *)\n  | Float_h | Float_ph | Float_sh  (*  %h | %+h | % h  *)\n  | Float_H | Float_pH | Float_sH  (*  %H | %+H | % H  *)\n\n(***)\n\n(* Char sets (see %[...]) are bitmaps implemented as 32-char strings. *)\ntype char_set = string\n\n(***)\n\n(* Counter used in Scanf. *)\ntype counter =\n  | Line_counter     (*  %l      *)\n  | Char_counter     (*  %n      *)\n  | Token_counter    (*  %N, %L  *)\n\n(***)\n\n(* Padding of strings and numbers. *)\ntype ('a, 'b) padding =\n  (* No padding (ex: \"%d\") *)\n  | No_padding  : ('a, 'a) padding\n  (* Literal padding (ex: \"%8d\") *)\n  | Lit_padding : padty * int -> ('a, 'a) padding\n  (* Padding as extra argument (ex: \"%*d\") *)\n  | Arg_padding : padty -> (int -> 'a, 'a) padding\n\n(* Some formats, such as %_d,\n   only accept an optional number as padding option (no extra argument) *)\ntype pad_option = int option\n\n(* Precision of floats and '0'-padding of integers. *)\ntype ('a, 'b) precision =\n  (* No precision (ex: \"%f\") *)\n  | No_precision : ('a, 'a) precision\n  (* Literal precision (ex: \"%.3f\") *)\n  | Lit_precision : int -> ('a, 'a) precision\n  (* Precision as extra argument (ex: \"%.*f\") *)\n  | Arg_precision : (int -> 'a, 'a) precision\n\n(* Some formats, such as %_f,\n   only accept an optional number as precision option (no extra argument) *)\ntype prec_option = int option\n\n(* see the Custom format combinator *)\ntype ('a, 'b, 'c) custom_arity =\n  | Custom_zero : ('a, string, 'a) custom_arity\n  | Custom_succ : ('a, 'b, 'c) custom_arity ->\n    ('a, 'x -> 'b, 'x -> 'c) custom_arity\n\n(***)\n\n(*        Relational format types\n\nIn the first format+gadts implementation, the type for %(..%) in the\nfmt GADT was as follows:\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option * ('d1, 'q1, 'd2, 'q2) reader_nb_unifier *\n    ('x, 'b, 'c, 'd1, 'q1, 'u) fmtty *\n    ('u, 'b, 'c, 'q1, 'e1, 'f) fmt ->\n      (('x, 'b, 'c, 'd2, 'q2, 'u) format6 -> 'x, 'b, 'c, 'd1, 'e1, 'f) fmt\n\nNotice that the 'u parameter in 'f position in the format argument\n(('x, .., 'u) format6 -> ..) is equal to the 'u parameter in 'a\nposition in the format tail (('u, .., 'f) fmt). This means that the\ntype of the expected format parameter depends of where the %(...%)\nare in the format string:\n\n  # Printf.printf \"%(%)\"\n  - : (unit, out_channel, unit, '_a, '_a, unit)\n      CamlinternalFormatBasics.format6 -> unit\n  = <fun>\n  # Printf.printf \"%(%)%d\"\n  - : (int -> unit, out_channel, unit, '_a, '_a, int -> unit)\n      CamlinternalFormatBasics.format6 -> int -> unit\n  = <fun>\n\nOn the contrary, the legacy typer gives a clever type that does not\ndepend on the position of %(..%) in the format string. For example,\n%(%) will have the polymorphic type ('a, 'b, 'c, 'd, 'd, 'a): it can\nbe concatenated to any format type, and only enforces the constraint\nthat its 'a and 'f parameters are equal (no format arguments) and 'd\nand 'e are equal (no reader argument).\n\nThe weakening of this parameter type in the GADT version broke user\ncode (in fact it essentially made %(...%) unusable except at the last\nposition of a format). In particular, the following would not work\nanymore:\n\n  fun sep ->\n    Format.printf \"foo%(%)bar%(%)baz\" sep sep\n\nAs the type-checker would require two *incompatible* types for the %(%)\nin different positions.\n\nThe solution to regain a general type for %(..%) is to generalize this\ntechnique, not only on the 'd, 'e parameters, but on all six\nparameters of a format: we introduce a \"relational\" type\n  ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n   'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\nwhose values are proofs that ('a1, .., 'f1) and ('a2, .., 'f2) morally\ncorrespond to the same format type: 'a1 is obtained from 'f1,'b1,'c1\nin the exact same way that 'a2 is obtained from 'f2,'b2,'c2, etc.\n\nFor example, the relation between two format types beginning with a Char\nparameter is as follows:\n\n| Char_ty :                                                 (* %c  *)\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\nIn the general case, the term structure of fmtty_rel is (almost[1])\nisomorphic to the fmtty of the previous implementation: every\nconstructor is re-read with a binary, relational type, instead of the\nprevious unary typing. fmtty can then be re-defined as the diagonal of\nfmtty_rel:\n\n  type ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n       ('a, 'b, 'c, 'd, 'e, 'f,\n        'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\n\nOnce we have this fmtty_rel type in place, we can give the more\ngeneral type to %(...%):\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n    ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\nWe accept any format (('g, 'h, 'i, 'j, 'k, 'l) format6) (this is\ncompletely unrelated to the type of the current format), but also\nrequire a proof that this format is in relation to another format that\nis concatenable to the format tail. When executing a %(...%) format\n(in camlinternalFormat.ml:make_printf or scanf.ml:make_scanf), we\ntranstype the format along this relation using the 'recast' function\nto transpose between related format types.\n\n  val recast :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1) fmt\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmt\n\nNOTE [1]: the typing of Format_subst_ty requires not one format type, but\ntwo, one to establish the link between the format argument and the\nfirst six parameters, and the other for the link between the format\nargumant and the last six parameters.\n\n| Format_subst_ty :                                         (* %(...%) *)\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n     ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2) fmtty_rel\n\nWhen we generate a format AST, we generate exactly the same witness\nfor both relations, and the witness-conversion functions in\ncamlinternalFormat do rely on this invariant. For example, the\nfunction that proves that the relation is transitive\n\n  val trans :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n\ndoes assume that the two input have exactly the same term structure\n(and is only every used for argument witnesses of the\nFormat_subst_ty constructor).\n*)\n\n(* Type of a block used by the Format pretty-printer. *)\ntype block_type =\n  | Pp_hbox   (* Horizontal block no line breaking *)\n  | Pp_vbox   (* Vertical block each break leads to a new line *)\n  | Pp_hvbox  (* Horizontal-vertical block: same as vbox, except if this block\n                 is small enough to fit on a single line *)\n  | Pp_hovbox (* Horizontal or Vertical block: breaks lead to new line\n                 only when necessary to print the content of the block *)\n  | Pp_box    (* Horizontal or Indent block: breaks lead to new line\n                 only when necessary to print the content of the block, or\n                 when it leads to a new indentation of the current line *)\n  | Pp_fits   (* Internal usage: when a block fits on a single line *)\n\n(* Formatting element used by the Format pretty-printter. *)\ntype formatting_lit =\n  | Close_box                                           (* @]   *)\n  | Close_tag                                           (* @}   *)\n  | Break of string * int * int          (* @, | @  | @; | @;<> *)\n  | FFlush                                              (* @?   *)\n  | Force_newline                                       (* @\\n  *)\n  | Flush_newline                                       (* @.   *)\n  | Magic_size of string * int                          (* @<n> *)\n  | Escaped_at                                          (* @@   *)\n  | Escaped_percent                                     (* @%%  *)\n  | Scan_indic of char                                  (* @X   *)\n\n(* Formatting element used by the Format pretty-printter. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen =\n  | Open_tag : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @{   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n  | Open_box : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @[   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n\n(***)\n\n(* List of format type elements. *)\n(* In particular used to represent %(...%) and %{...%} contents. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n     ('a, 'b, 'c, 'd, 'e, 'f,\n      'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\nand ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel =\n  | Char_ty :                                                 (* %c  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | String_ty :                                               (* %s  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (string -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       string -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int_ty :                                                  (* %d  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int32_ty :                                                (* %ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int32 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int32 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Nativeint_ty :                                            (* %nd *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (nativeint -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       nativeint -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int64_ty :                                                (* %Ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int64 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int64 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Float_ty :                                                (* %f  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (float -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       float -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Bool_ty :                                                 (* %B  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (bool -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       bool -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  | Format_arg_ty :                                           (* %{...%} *)\n      ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2)\n           fmtty_rel\n  | Format_subst_ty :                                         (* %(...%) *)\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2)\n           fmtty_rel\n\n  (* Printf and Format specific constructors. *)\n  | Alpha_ty :                                                (* %a  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'x -> 'c1) -> 'x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'x -> 'c2) -> 'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Theta_ty :                                                (* %t  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'c1) -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'c2) -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Any_ty :                                    (* Used for custom formats *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  (* Scanf specific constructor. *)\n  | Reader_ty :                                               (* %r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n  | Ignored_reader_ty :                                       (* %_r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n\n  | End_of_fmtty :\n      ('f1, 'b1, 'c1, 'd1, 'd1, 'f1,\n       'f2, 'b2, 'c2, 'd2, 'd2, 'f2) fmtty_rel\n\n(***)\n\n(* List of format elements. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmt =\n  | Char :                                                   (* %c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_char :                                              (* %C *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | String :                                                 (* %s *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_string :                                            (* %S *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int :                                                    (* %[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int32 :                                                  (* %l[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int32 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Nativeint :                                              (* %n[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, nativeint -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int64 :                                                  (* %L[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int64 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Float :                                                  (* %[feEgGF] *)\n      float_conv * ('x, 'y) padding * ('y, float -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Bool :                                                   (* %[bB] *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (bool -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Flush :                                                  (* %! *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | String_literal :                                         (* abc *)\n      string * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Char_literal :                                           (* x *)\n      char * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | Format_arg :                                             (* %{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Format_subst :                                           (* %(...%) *)\n      pad_option *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\n  (* Printf and Format specific constructor. *)\n  | Alpha :                                                  (* %a *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'x -> 'c) -> 'x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Theta :                                                  (* %t *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'c) -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Format specific constructor: *)\n  | Formatting_lit :                                         (* @_ *)\n      formatting_lit * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Formatting_gen :                                             (* @_ *)\n      ('a1, 'b, 'c, 'd1, 'e1, 'f1) formatting_gen *\n      ('f1, 'b, 'c, 'e1, 'e2, 'f2) fmt -> ('a1, 'b, 'c, 'd1, 'e2, 'f2) fmt\n\n  (* Scanf specific constructors: *)\n  | Reader :                                                 (* %r *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x -> 'a, 'b, 'c, ('b -> 'x) -> 'd, 'e, 'f) fmt\n  | Scan_char_set :                                          (* %[...] *)\n      pad_option * char_set * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (string -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_get_counter :                                       (* %[nlNL] *)\n      counter * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (int -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_next_char :                                         (* %0c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Ignored_param :                                          (* %_ *)\n      ('a, 'b, 'c, 'd, 'y, 'x) ignored * ('x, 'b, 'c, 'y, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Custom printing format (PR#6452, GPR#140)\n\n     We include a type Custom of \"custom converters\", where an\n     arbitrary function can be used to convert one or more\n     arguments. There is no syntax for custom converters, it is only\n     inteded for custom processors that wish to rely on the\n     stdlib-defined format GADTs.\n\n     For instance a pre-processor could choose to interpret strings\n     prefixed with [\"!\"] as format strings where [%{{ ... }}] is\n     a special form to pass a to_string function, so that one could\n     write:\n\n     {[\n       type t = { x : int; y : int }\n\n       let string_of_t t = Printf.sprintf \"{ x = %d; y = %d }\" t.x t.y\n\n       Printf.printf !\"t = %{{string_of_t}}\" { x = 42; y = 42 }\n     ]}\n  *)\n  | Custom :\n      ('a, 'x, 'y) custom_arity * (unit -> 'x) * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      ('y, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* end of a format specification *)\n  | End_of_format :\n        ('f, 'b, 'c, 'e, 'e, 'f) fmt\n\n(***)\n\n(* Type for ignored parameters (see \"%_\"). *)\nand ('a, 'b, 'c, 'd, 'e, 'f) ignored =\n  | Ignored_char :                                           (* %_c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_char :                                      (* %_C *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_string :                                         (* %_s *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_string :                                    (* %_S *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int :                                            (* %_d *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int32 :                                          (* %_ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_nativeint :                                      (* %_nd *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int64 :                                          (* %_Ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_float :                                          (* %_f *)\n      pad_option * prec_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_bool :                                           (* %_B *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_arg :                                     (* %_{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty ->\n        ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_subst :                                   (* %_(...%) *)\n      pad_option * ('a, 'b, 'c, 'd, 'e, 'f) fmtty ->\n        ('a, 'b, 'c, 'd, 'e, 'f) ignored\n  | Ignored_reader :                                         (* %_r *)\n      ('a, 'b, 'c, ('b -> 'x) -> 'd, 'd, 'a) ignored\n  | Ignored_scan_char_set :                                  (* %_[...] *)\n      pad_option * char_set -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_get_counter :                               (* %_[nlNL] *)\n      counter -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_next_char :                                 (* %_0c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n\nand ('a, 'b, 'c, 'd, 'e, 'f) format6 =\n  Format of ('a, 'b, 'c, 'd, 'e, 'f) fmt * string\n\nlet rec erase_rel : type a b c d e f g h i j k l .\n  (a, b, c, d, e, f,\n   g, h, i, j, k, l) fmtty_rel -> (a, b, c, d, e, f) fmtty\n= function\n  | Char_ty rest ->\n    Char_ty (erase_rel rest)\n  | String_ty rest ->\n    String_ty (erase_rel rest)\n  | Int_ty rest ->\n    Int_ty (erase_rel rest)\n  | Int32_ty rest ->\n    Int32_ty (erase_rel rest)\n  | Int64_ty rest ->\n    Int64_ty (erase_rel rest)\n  | Nativeint_ty rest ->\n    Nativeint_ty (erase_rel rest)\n  | Float_ty rest ->\n    Float_ty (erase_rel rest)\n  | Bool_ty rest ->\n    Bool_ty (erase_rel rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, erase_rel rest)\n  | Format_subst_ty (ty1, _ty2, rest) ->\n    Format_subst_ty (ty1, ty1, erase_rel rest)\n  | Alpha_ty rest ->\n    Alpha_ty (erase_rel rest)\n  | Theta_ty rest ->\n    Theta_ty (erase_rel rest)\n  | Any_ty rest ->\n    Any_ty (erase_rel rest)\n  | Reader_ty rest ->\n    Reader_ty (erase_rel rest)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (erase_rel rest)\n  | End_of_fmtty -> End_of_fmtty\n\n(******************************************************************************)\n                         (* Format type concatenation *)\n\n(* Concatenate two format types. *)\n(* Used by:\n   * reader_nb_unifier_of_fmtty to count readers in an fmtty,\n   * Scanf.take_fmtty_format_readers to extract readers inside %(...%),\n   * CamlinternalFormat.fmtty_of_ignored_format to extract format type. *)\n\n(*\nlet rec concat_fmtty : type a b c d e f g h .\n    (a, b, c, d, e, f) fmtty ->\n    (f, b, c, e, g, h) fmtty ->\n    (a, b, c, d, g, h) fmtty =\n*)\nlet rec concat_fmtty :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n       g1 j1 g2 j2\n  .\n    (g1, b1, c1, j1, d1, a1,\n     g2, b2, c2, j2, d2, a2) fmtty_rel ->\n    (a1, b1, c1, d1, e1, f1,\n     a2, b2, c2, d2, e2, f2) fmtty_rel ->\n    (g1, b1, c1, j1, e1, f1,\n     g2, b2, c2, j2, e2, f2) fmtty_rel =\nfun fmtty1 fmtty2 -> match fmtty1 with\n  | Char_ty rest ->\n    Char_ty (concat_fmtty rest fmtty2)\n  | String_ty rest ->\n    String_ty (concat_fmtty rest fmtty2)\n  | Int_ty rest ->\n    Int_ty (concat_fmtty rest fmtty2)\n  | Int32_ty rest ->\n    Int32_ty (concat_fmtty rest fmtty2)\n  | Nativeint_ty rest ->\n    Nativeint_ty (concat_fmtty rest fmtty2)\n  | Int64_ty rest ->\n    Int64_ty (concat_fmtty rest fmtty2)\n  | Float_ty rest ->\n    Float_ty (concat_fmtty rest fmtty2)\n  | Bool_ty rest ->\n    Bool_ty (concat_fmtty rest fmtty2)\n  | Alpha_ty rest ->\n    Alpha_ty (concat_fmtty rest fmtty2)\n  | Theta_ty rest ->\n    Theta_ty (concat_fmtty rest fmtty2)\n  | Any_ty rest ->\n    Any_ty (concat_fmtty rest fmtty2)\n  | Reader_ty rest ->\n    Reader_ty (concat_fmtty rest fmtty2)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (concat_fmtty rest fmtty2)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, concat_fmtty rest fmtty2)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty1, ty2, concat_fmtty rest fmtty2)\n  | End_of_fmtty -> fmtty2\n\n(******************************************************************************)\n                           (* Format concatenation *)\n\n(* Concatenate two formats. *)\nlet rec concat_fmt : type a b c d e f g h .\n    (a, b, c, d, e, f) fmt ->\n    (f, b, c, e, g, h) fmt ->\n    (a, b, c, d, g, h) fmt =\nfun fmt1 fmt2 -> match fmt1 with\n  | String (pad, rest) ->\n    String (pad, concat_fmt rest fmt2)\n  | Caml_string (pad, rest) ->\n    Caml_string (pad, concat_fmt rest fmt2)\n\n  | Int (iconv, pad, prec, rest) ->\n    Int (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int32 (iconv, pad, prec, rest) ->\n    Int32 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Nativeint (iconv, pad, prec, rest) ->\n    Nativeint (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int64 (iconv, pad, prec, rest) ->\n    Int64 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Float (fconv, pad, prec, rest) ->\n    Float (fconv, pad, prec, concat_fmt rest fmt2)\n\n  | Char (rest) ->\n    Char (concat_fmt rest fmt2)\n  | Caml_char rest ->\n    Caml_char (concat_fmt rest fmt2)\n  | Bool rest ->\n    Bool (concat_fmt rest fmt2)\n  | Alpha rest ->\n    Alpha (concat_fmt rest fmt2)\n  | Theta rest ->\n    Theta (concat_fmt rest fmt2)\n  | Custom (arity, f, rest) ->\n    Custom (arity, f, concat_fmt rest fmt2)\n  | Reader rest ->\n    Reader (concat_fmt rest fmt2)\n  | Flush rest ->\n    Flush (concat_fmt rest fmt2)\n\n  | String_literal (str, rest) ->\n    String_literal (str, concat_fmt rest fmt2)\n  | Char_literal (chr, rest) ->\n    Char_literal   (chr, concat_fmt rest fmt2)\n\n  | Format_arg (pad, fmtty, rest) ->\n    Format_arg   (pad, fmtty, concat_fmt rest fmt2)\n  | Format_subst (pad, fmtty, rest) ->\n    Format_subst (pad, fmtty, concat_fmt rest fmt2)\n\n  | Scan_char_set (width_opt, char_set, rest) ->\n    Scan_char_set (width_opt, char_set, concat_fmt rest fmt2)\n  | Scan_get_counter (counter, rest) ->\n    Scan_get_counter (counter, concat_fmt rest fmt2)\n  | Scan_next_char (rest) ->\n    Scan_next_char (concat_fmt rest fmt2)\n  | Ignored_param (ign, rest) ->\n    Ignored_param (ign, concat_fmt rest fmt2)\n\n  | Formatting_lit (fmting_lit, rest) ->\n    Formatting_lit (fmting_lit, concat_fmt rest fmt2)\n  | Formatting_gen (fmting_gen, rest) ->\n    Formatting_gen (fmting_gen, concat_fmt rest fmt2)\n\n  | End_of_format ->\n    fmt2\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in string.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in string.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : bytes -> int = \"%bytes_length\"\nexternal string_length : string -> int = \"%string_length\"\nexternal get : bytes -> int -> char = \"%bytes_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%bytes_safe_set\"\nexternal create : int -> bytes = \"caml_create_bytes\"\nexternal unsafe_get : bytes -> int -> char = \"%bytes_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%bytes_unsafe_set\"\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_bytes\" [@@noalloc]\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\nexternal unsafe_of_string : string -> bytes = \"%bytes_of_string\"\n\nexternal unsafe_blit : bytes -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_bytes\" [@@noalloc]\nexternal unsafe_blit_string : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\n\nlet make n c =\n  let s = create n in\n  unsafe_fill s 0 n c;\n  s\n\nlet init n f =\n  let s = create n in\n  for i = 0 to n - 1 do\n    unsafe_set s i (f i)\n  done;\n  s\n\nlet empty = create 0\n\nlet copy s =\n  let len = length s in\n  let r = create len in\n  unsafe_blit s 0 r 0 len;\n  r\n\nlet to_string b = unsafe_to_string (copy b)\nlet of_string s = copy (unsafe_of_string s)\n\nlet sub s ofs len =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.sub / Bytes.sub\"\n  else begin\n    let r = create len in\n    unsafe_blit s ofs r 0 len;\n    r\n  end\n\nlet sub_string b ofs len = unsafe_to_string (sub b ofs len)\n\nlet extend s left right =\n  let len = length s + left + right in\n  let r = create len in\n  let (srcoff, dstoff) = if left < 0 then -left, 0 else 0, left in\n  let cpylen = min (length s - srcoff) (len - dstoff) in\n  if cpylen > 0 then unsafe_blit s srcoff r dstoff cpylen;\n  r\n\nlet fill s ofs len c =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.fill / Bytes.fill\"\n  else unsafe_fill s ofs len c\n\nlet blit s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"Bytes.blit\"\n  else unsafe_blit s1 ofs1 s2 ofs2 len\n\nlet blit_string s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > string_length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"String.blit / Bytes.blit_string\"\n  else unsafe_blit_string s1 ofs1 s2 ofs2 len\n\n(* duplicated in string.ml *)\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\n(* duplicated in string.ml *)\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet ensure_ge x y = if x >= y then x else invalid_arg \"Bytes.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> empty\n  | l -> let seplen = length sep in\n          unsafe_blits \n            (create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\nlet cat s1 s2 =\n  let l1 = length s1 in\n  let l2 = length s2 in\n  let r = create (l1 + l2) in\n  unsafe_blit s1 0 r 0 l1;\n  unsafe_blit s2 0 r l1 l2;\n  r\n\n\nexternal char_code: char -> int = \"%identity\"\nexternal char_chr: int -> char = \"%identity\"\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  let len = length s in\n  let i = ref 0 in\n  while !i < len && is_space (unsafe_get s !i) do\n    incr i\n  done;\n  let j = ref (len - 1) in\n  while !j >= !i && is_space (unsafe_get s !j) do\n    decr j\n  done;\n  if !j >= !i then\n    sub s !i (!j - !i + 1)\n  else\n    empty\n\nlet escaped s =\n  let n = ref 0 in\n  for i = 0 to length s - 1 do\n    n := !n +\n      (match unsafe_get s i with\n       | '\\\"' | '\\\\' | '\\n' | '\\t' | '\\r' | '\\b' -> 2\n       | ' ' .. '~' -> 1\n       | _ -> 4)\n  done;\n  if !n = length s then copy s else begin\n    let s' = create !n in\n    n := 0;\n    for i = 0 to length s - 1 do\n      begin match unsafe_get s i with\n      | ('\\\"' | '\\\\') as c ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n c\n      | '\\n' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'n'\n      | '\\t' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 't'\n      | '\\r' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'r'\n      | '\\b' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'b'\n      | (' ' .. '~') as c -> unsafe_set s' !n c\n      | c ->\n          let a = char_code c in\n          unsafe_set s' !n '\\\\';\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a / 100));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + (a / 10) mod 10));\n          incr n;\n          unsafe_set s' !n (char_chr (48 + a mod 10));\n      end;\n      incr n\n    done;\n    s'\n  end\n\nlet map f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f (unsafe_get s i)) done;\n    r\n  end\n\nlet mapi f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f i (unsafe_get s i)) done;\n    r\n  end\n\nlet uppercase_ascii s = map Char.uppercase_ascii s\nlet lowercase_ascii s = map Char.lowercase_ascii s\n\nlet apply1 f s =\n  if length s = 0 then s else begin\n    let r = copy s in\n    unsafe_set r 0 (f(unsafe_get s 0));\n    r\n  end\n\nlet capitalize_ascii s = apply1 Char.uppercase_ascii s\nlet uncapitalize_ascii s = apply1 Char.lowercase_ascii s\n\n(* duplicated in string.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in string.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in string.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n  index_rec s l i c\n\n(* duplicated in string.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in string.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in string.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n\n(* duplicated in string.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n\n(* duplicated in string.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in string.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\n\ntype t = bytes\n\nlet compare (x: t) (y: t) = Pervasives.compare x y\nexternal equal : t -> t -> bool = \"caml_bytes_equal\"\n\n(* Deprecated functions implemented via other deprecated functions *)\n[@@@ocaml.warning \"-3\"]\nlet uppercase s = map Char.uppercase s\nlet lowercase s = map Char.lowercase s\n\nlet capitalize s = apply1 Char.uppercase s\nlet uncapitalize s = apply1 Char.lowercase s\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*           Damien Doligez, projet Gallium, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* String operations, based on byte sequence operations *)\n\n(* WARNING: Some functions in this file are duplicated in bytes.ml for\n   efficiency reasons. When you modify the one in this file you need to\n   modify its duplicate in bytes.ml.\n   These functions have a \"duplicated\" comment above their definition.\n*)\n\nexternal length : string -> int = \"%string_length\"\nexternal get : string -> int -> char = \"%string_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%string_safe_set\"\nexternal create : int -> bytes = \"caml_create_string\"\nexternal unsafe_get : string -> int -> char = \"%string_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%string_unsafe_set\"\nexternal unsafe_blit : string -> int ->  bytes -> int -> int -> unit\n                     = \"caml_blit_string\" [@@noalloc]\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_string\" [@@noalloc]\n\nmodule B = Bytes\n\nlet bts = B.unsafe_to_string\nlet bos = B.unsafe_of_string\n\nlet make n c =\n  B.make n c |> bts\nlet init n f =\n  B.init n f |> bts\nlet copy s =\n  B.copy (bos s) |> bts\nlet sub s ofs len =\n  B.sub (bos s) ofs len |> bts\nlet fill =\n  B.fill\nlet blit =\n  B.blit_string\n\nlet ensure_ge x y = if x >= y then x else invalid_arg \"String.concat\"\n\nlet rec sum_lengths acc seplen = function\n  | [] -> acc\n  | hd :: [] -> length hd + acc\n  | hd :: tl -> sum_lengths (ensure_ge (length hd + seplen + acc) acc) seplen tl\n\nlet rec unsafe_blits dst pos sep seplen = function\n    [] -> dst\n  | hd :: [] ->\n    unsafe_blit hd 0 dst pos (length hd); dst\n  | hd :: tl ->\n    unsafe_blit hd 0 dst pos (length hd);\n    unsafe_blit sep 0 dst (pos + length hd) seplen;\n    unsafe_blits dst (pos + length hd + seplen) sep seplen tl\n\nlet concat sep = function\n    [] -> \"\"\n  | l -> let seplen = length sep in bts @@\n          unsafe_blits \n            (B.create (sum_lengths 0 seplen l))\n            0 sep seplen l\n\n(* duplicated in bytes.ml *)\nlet iter f s =\n  for i = 0 to length s - 1 do f (unsafe_get s i) done\n\n(* duplicated in bytes.ml *)\nlet iteri f s =\n  for i = 0 to length s - 1 do f i (unsafe_get s i) done\n\nlet map f s =\n  B.map f (bos s) |> bts\nlet mapi f s =\n  B.mapi f (bos s) |> bts\n\n(* Beware: we cannot use B.trim or B.escape because they always make a\n   copy, but String.mli spells out some cases where we are not allowed\n   to make a copy. *)\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  if s = \"\" then s\n  else if is_space (unsafe_get s 0) || is_space (unsafe_get s (length s - 1))\n    then bts (B.trim (bos s))\n  else s\n\nlet escaped s =\n  let rec needs_escape i =\n    if i >= length s then false else\n      match unsafe_get s i with\n      | '\\\"' | '\\\\' | '\\n' | '\\t' | '\\r' | '\\b' -> true\n      | ' ' .. '~' -> needs_escape (i+1)\n      | _ -> true\n  in\n  if needs_escape 0 then\n    bts (B.escaped (bos s))\n  else\n    s\n\n(* duplicated in bytes.ml *)\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c\n\n(* duplicated in bytes.ml *)\nlet index s c = index_rec s (length s) 0 c\n\n(* duplicated in bytes.ml *)\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n    index_rec s l i c\n\n(* duplicated in bytes.ml *)\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex s c = rindex_rec s (length s - 1) c\n\n(* duplicated in bytes.ml *)\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n\n(* duplicated in bytes.ml *)\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n\n(* duplicated in bytes.ml *)\nlet contains s c = contains_from s 0 c\n\n(* duplicated in bytes.ml *)\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n\nlet uppercase_ascii s =\n  B.uppercase_ascii (bos s) |> bts\nlet lowercase_ascii s =\n  B.lowercase_ascii (bos s) |> bts\nlet capitalize_ascii s =\n  B.capitalize_ascii (bos s) |> bts\nlet uncapitalize_ascii s =\n  B.uncapitalize_ascii (bos s) |> bts\n\ntype t = string\n\nlet compare (x: t) (y: t) = Pervasives.compare x y\nexternal equal : string -> string -> bool = \"caml_string_equal\"\n\nlet split_on_char sep s =\n  let r = ref [] in\n  let j = ref (length s) in\n  for i = length s - 1 downto 0 do\n    if unsafe_get s i = sep then begin\n      r := sub s (i + 1) (!j - i - 1) :: !r;\n      j := i\n    end\n  done;\n  sub s 0 !j :: !r\n\n(* Deprecated functions implemented via other deprecated functions *)\n[@@@ocaml.warning \"-3\"]\nlet uppercase s =\n  B.uppercase (bos s) |> bts\nlet lowercase s =\n  B.lowercase (bos s) |> bts\nlet capitalize s =\n  B.capitalize (bos s) |> bts\nlet uncapitalize s =\n  B.uncapitalize (bos s) |> bts\n","#2 \"stdlib/sys.mlp\"\n(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* WARNING: sys.ml is generated from sys.mlp.  DO NOT EDIT sys.ml or\n   your changes will be lost.\n*)\n\ntype backend_type =\n  | Native\n  | Bytecode\n  | Other of string\n(* System interface *)\n\nexternal get_config: unit -> string * int * bool = \"caml_sys_get_config\"\nexternal get_argv: unit -> string * string array = \"caml_sys_get_argv\"\nexternal big_endian : unit -> bool = \"%big_endian\"\nexternal word_size : unit -> int = \"%word_size\"\nexternal int_size : unit -> int = \"%int_size\"\nexternal max_wosize : unit -> int = \"%max_wosize\"\nexternal unix : unit -> bool = \"%ostype_unix\"\nexternal win32 : unit -> bool = \"%ostype_win32\"\nexternal cygwin : unit -> bool = \"%ostype_cygwin\"\nexternal get_backend_type : unit -> backend_type = \"%backend_type\"\n\nlet (executable_name, argv) = get_argv()\nlet (os_type, _, _) = get_config()\nlet backend_type = get_backend_type ()\nlet big_endian = big_endian ()\nlet word_size = word_size ()\nlet int_size = int_size ()\nlet unix = unix ()\nlet win32 = win32 ()\nlet cygwin = cygwin ()\nlet max_array_length = max_wosize ()\nlet max_string_length = word_size / 8 * max_array_length - 1\nexternal runtime_variant : unit -> string = \"caml_runtime_variant\"\nexternal runtime_parameters : unit -> string = \"caml_runtime_parameters\"\n\nexternal file_exists: string -> bool = \"caml_sys_file_exists\"\nexternal is_directory : string -> bool = \"caml_sys_is_directory\"\nexternal remove: string -> unit = \"caml_sys_remove\"\nexternal rename : string -> string -> unit = \"caml_sys_rename\"\nexternal getenv: string -> string = \"caml_sys_getenv\"\nexternal command: string -> int = \"caml_sys_system_command\"\nexternal time: unit -> (float [@unboxed]) =\n  \"caml_sys_time\" \"caml_sys_time_unboxed\" [@@noalloc]\nexternal chdir: string -> unit = \"caml_sys_chdir\"\nexternal getcwd: unit -> string = \"caml_sys_getcwd\"\nexternal readdir : string -> string array = \"caml_sys_read_directory\"\n\nlet interactive = ref false\n\ntype signal_behavior =\n    Signal_default\n  | Signal_ignore\n  | Signal_handle of (int -> unit)\n\nexternal signal : int -> signal_behavior -> signal_behavior\n                = \"caml_install_signal_handler\"\n\nlet set_signal sig_num sig_beh = ignore(signal sig_num sig_beh)\n\nlet sigabrt = -1\nlet sigalrm = -2\nlet sigfpe = -3\nlet sighup = -4\nlet sigill = -5\nlet sigint = -6\nlet sigkill = -7\nlet sigpipe = -8\nlet sigquit = -9\nlet sigsegv = -10\nlet sigterm = -11\nlet sigusr1 = -12\nlet sigusr2 = -13\nlet sigchld = -14\nlet sigcont = -15\nlet sigstop = -16\nlet sigtstp = -17\nlet sigttin = -18\nlet sigttou = -19\nlet sigvtalrm = -20\nlet sigprof = -21\nlet sigbus = -22\nlet sigpoll = -23\nlet sigsys = -24\nlet sigtrap = -25\nlet sigurg = -26\nlet sigxcpu = -27\nlet sigxfsz = -28\n\nexception Break\n\nlet catch_break on =\n  if on then\n    set_signal sigint (Signal_handle(fun _ -> raise Break))\n  else\n    set_signal sigint Signal_default\n\n\nexternal enable_runtime_warnings: bool -> unit =\n  \"caml_ml_enable_runtime_warnings\"\nexternal runtime_warnings_enabled: unit -> bool =\n  \"caml_ml_runtime_warnings_enabled\"\n\n(* The version string is found in file ../VERSION *)\n\nlet ocaml_version = \"4.04.0\"\n\n(* Optimization *)\n\nexternal opaque_identity : 'a -> 'a = \"%opaque\"\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*    Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt    *)\n(*                                                                        *)\n(*   Copyright 1999 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Extensible buffers *)\n\ntype t =\n {mutable buffer : bytes;\n  mutable position : int;\n  mutable length : int;\n  initial_buffer : bytes}\n\nlet create n =\n let n = if n < 1 then 1 else n in\n let n = if n > Sys.max_string_length then Sys.max_string_length else n in\n let s = Bytes.create n in\n {buffer = s; position = 0; length = n; initial_buffer = s}\n\nlet contents b = Bytes.sub_string b.buffer 0 b.position\nlet to_bytes b = Bytes.sub b.buffer 0 b.position\n\nlet sub b ofs len =\n  if ofs < 0 || len < 0 || ofs > b.position - len\n  then invalid_arg \"Buffer.sub\"\n  else Bytes.sub_string b.buffer ofs len\n\n\nlet blit src srcoff dst dstoff len =\n  if len < 0 || srcoff < 0 || srcoff > src.position - len\n             || dstoff < 0 || dstoff > (Bytes.length dst) - len\n  then invalid_arg \"Buffer.blit\"\n  else\n    Bytes.unsafe_blit src.buffer srcoff dst dstoff len\n\n\nlet nth b ofs =\n  if ofs < 0 || ofs >= b.position then\n   invalid_arg \"Buffer.nth\"\n  else Bytes.unsafe_get b.buffer ofs\n\n\nlet length b = b.position\n\nlet clear b = b.position <- 0\n\nlet reset b =\n  b.position <- 0; b.buffer <- b.initial_buffer;\n  b.length <- Bytes.length b.buffer\n\nlet resize b more =\n  let len = b.length in\n  let new_len = ref len in\n  while b.position + more > !new_len do new_len := 2 * !new_len done;\n  if !new_len > Sys.max_string_length then begin\n    if b.position + more <= Sys.max_string_length\n    then new_len := Sys.max_string_length\n    else failwith \"Buffer.add: cannot grow buffer\"\n  end;\n  let new_buffer = Bytes.create !new_len in\n  (* PR#6148: let's keep using [blit] rather than [unsafe_blit] in\n     this tricky function that is slow anyway. *)\n  Bytes.blit b.buffer 0 new_buffer 0 b.position;\n  b.buffer <- new_buffer;\n  b.length <- !new_len\n\nlet add_char b c =\n  let pos = b.position in\n  if pos >= b.length then resize b 1;\n  Bytes.unsafe_set b.buffer pos c;\n  b.position <- pos + 1\n\nlet add_substring b s offset len =\n  if offset < 0 || len < 0 || offset > String.length s - len\n  then invalid_arg \"Buffer.add_substring/add_subbytes\";\n  let new_position = b.position + len in\n  if new_position > b.length then resize b len;\n  Bytes.blit_string s offset b.buffer b.position len;\n  b.position <- new_position\n\nlet add_subbytes b s offset len =\n  add_substring b (Bytes.unsafe_to_string s) offset len\n\nlet add_string b s =\n  let len = String.length s in\n  let new_position = b.position + len in\n  if new_position > b.length then resize b len;\n  Bytes.blit_string s 0 b.buffer b.position len;\n  b.position <- new_position\n\nlet add_bytes b s = add_string b (Bytes.unsafe_to_string s)\n\nlet add_buffer b bs =\n  add_subbytes b bs.buffer 0 bs.position\n\n(* read up to [len] bytes from [ic] into [b]. *)\nlet rec add_channel_rec b ic len =\n  if len > 0 then (\n    let n = input ic b.buffer b.position len in\n    b.position <- b.position + n;\n    if n = 0 then raise End_of_file\n    else add_channel_rec b ic (len-n)   (* n <= len *)\n  )\n\nlet add_channel b ic len =\n  if len < 0 || len > Sys.max_string_length then   (* PR#5004 *)\n    invalid_arg \"Buffer.add_channel\";\n  if b.position + len > b.length then resize b len;\n  add_channel_rec b ic len\n\nlet output_buffer oc b =\n  output oc b.buffer 0 b.position\n\nlet closing = function\n  | '(' -> ')'\n  | '{' -> '}'\n  | _ -> assert false\n\n(* opening and closing: open and close characters, typically ( and )\n   k: balance of opening and closing chars\n   s: the string where we are searching\n   start: the index where we start the search. *)\nlet advance_to_closing opening closing k s start =\n  let rec advance k i lim =\n    if i >= lim then raise Not_found else\n    if s.[i] = opening then advance (k + 1) (i + 1) lim else\n    if s.[i] = closing then\n      if k = 0 then i else advance (k - 1) (i + 1) lim\n    else advance k (i + 1) lim in\n  advance k start (String.length s)\n\nlet advance_to_non_alpha s start =\n  let rec advance i lim =\n    if i >= lim then lim else\n    match s.[i] with\n    | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' -> advance (i + 1) lim\n    | _ -> i in\n  advance start (String.length s)\n\n(* We are just at the beginning of an ident in s, starting at start. *)\nlet find_ident s start lim =\n  if start >= lim then raise Not_found else\n  match s.[start] with\n  (* Parenthesized ident ? *)\n  | '(' | '{' as c ->\n     let new_start = start + 1 in\n     let stop = advance_to_closing c (closing c) 0 s new_start in\n     String.sub s new_start (stop - start - 1), stop + 1\n  (* Regular ident *)\n  | _ ->\n     let stop = advance_to_non_alpha s (start + 1) in\n     String.sub s start (stop - start), stop\n\n(* Substitute $ident, $(ident), or ${ident} in s,\n    according to the function mapping f. *)\nlet add_substitute b f s =\n  let lim = String.length s in\n  let rec subst previous i =\n    if i < lim then begin\n      match s.[i] with\n      | '$' as current when previous = '\\\\' ->\n         add_char b current;\n         subst ' ' (i + 1)\n      | '$' ->\n         let j = i + 1 in\n         let ident, next_i = find_ident s j lim in\n         add_string b (f ident);\n         subst ' ' next_i\n      | current when previous == '\\\\' ->\n         add_char b '\\\\';\n         add_char b current;\n         subst ' ' (i + 1)\n      | '\\\\' as current ->\n         subst current (i + 1)\n      | current ->\n         add_char b current;\n         subst current (i + 1)\n    end else\n    if previous = '\\\\' then add_char b previous in\n  subst ' ' 0\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*                          Benoit Vaugon, ENSTA                          *)\n(*                                                                        *)\n(*   Copyright 2014 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\n\n(******************************************************************************)\n           (* Tools to manipulate scanning set of chars (see %[...]) *)\n\ntype mutable_char_set = bytes\n\n(* Create a fresh, empty, mutable char set. *)\nlet create_char_set () = Bytes.make 32 '\\000'\n\n(* Add a char in a mutable char set. *)\nlet add_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  Bytes.set char_set str_ind\n    (char_of_int (int_of_char (Bytes.get char_set str_ind) lor mask))\n\nlet freeze_char_set char_set =\n  Bytes.to_string char_set\n\n(* Compute the complement of a char set. *)\nlet rev_char_set char_set =\n  let char_set' = create_char_set () in\n  for i = 0 to 31 do\n    Bytes.set char_set' i\n      (char_of_int (int_of_char (String.get char_set i) lxor 0xFF));\n  done;\n  Bytes.unsafe_to_string char_set'\n\n(* Return true if a `c' is in `char_set'. *)\nlet is_in_char_set char_set c =\n  let ind = int_of_char c in\n  let str_ind = ind lsr 3 and mask = 1 lsl (ind land 0b111) in\n  (int_of_char (String.get char_set str_ind) land mask) <> 0\n\n\n(******************************************************************************)\n                         (* Ignored param conversion *)\n\n(* GADT used to abstract an existential type parameter. *)\n(* See param_format_of_ignored_format. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb = Param_format_EBB :\n    ('x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    ('a, 'b, 'c, 'd, 'e, 'f) param_format_ebb\n\n(* Compute a padding associated to a pad_option (see \"%_42d\"). *)\nlet pad_of_pad_opt pad_opt = match pad_opt with\n  | None -> No_padding\n  | Some width -> Lit_padding (Right, width)\n\n(* Compute a precision associated to a prec_option (see \"%_.42f\"). *)\nlet prec_of_prec_opt prec_opt = match prec_opt with\n  | None -> No_precision\n  | Some ndec -> Lit_precision ndec\n\n(* Turn an ignored param into its equivalent not-ignored format node. *)\n(* Used for format pretty-printing and Scanf. *)\nlet param_format_of_ignored_format : type a b c d e f x y .\n    (a, b, c, d, y, x) ignored -> (x, b, c, y, e, f) fmt ->\n      (a, b, c, d, e, f) param_format_ebb =\nfun ign fmt -> match ign with\n  | Ignored_char ->\n    Param_format_EBB (Char fmt)\n  | Ignored_caml_char ->\n    Param_format_EBB (Caml_char fmt)\n  | Ignored_string pad_opt ->\n    Param_format_EBB (String (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_caml_string pad_opt ->\n    Param_format_EBB (Caml_string (pad_of_pad_opt pad_opt, fmt))\n  | Ignored_int (iconv, pad_opt) ->\n    Param_format_EBB (Int (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int32 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int32 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_nativeint (iconv, pad_opt) ->\n    Param_format_EBB\n      (Nativeint (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_int64 (iconv, pad_opt) ->\n    Param_format_EBB\n      (Int64 (iconv, pad_of_pad_opt pad_opt, No_precision, fmt))\n  | Ignored_float (pad_opt, prec_opt) ->\n    Param_format_EBB\n      (Float (Float_f, pad_of_pad_opt pad_opt, prec_of_prec_opt prec_opt, fmt))\n  | Ignored_bool ->\n    Param_format_EBB (Bool fmt)\n  | Ignored_format_arg (pad_opt, fmtty) ->\n    Param_format_EBB (Format_arg (pad_opt, fmtty, fmt))\n  | Ignored_format_subst (pad_opt, fmtty) ->\n    Param_format_EBB\n      (Format_subst (pad_opt, fmtty, fmt))\n  | Ignored_reader ->\n    Param_format_EBB (Reader fmt)\n  | Ignored_scan_char_set (width_opt, char_set) ->\n    Param_format_EBB (Scan_char_set (width_opt, char_set, fmt))\n  | Ignored_scan_get_counter counter ->\n    Param_format_EBB (Scan_get_counter (counter, fmt))\n  | Ignored_scan_next_char ->\n    Param_format_EBB (Scan_next_char fmt)\n\n\n(******************************************************************************)\n                                 (* Types *)\n\ntype ('b, 'c) acc_formatting_gen =\n  | Acc_open_tag of ('b, 'c) acc\n  | Acc_open_box of ('b, 'c) acc\n\n(* Reversed list of printing atoms. *)\n(* Used to accumulate printf arguments. *)\nand ('b, 'c) acc =\n  | Acc_formatting_lit of ('b, 'c) acc * formatting_lit\n      (* Special fmtting (box) *)\n  | Acc_formatting_gen of ('b, 'c) acc * ('b, 'c) acc_formatting_gen\n      (* Special fmtting (box) *)\n  | Acc_string_literal of ('b, 'c) acc * string     (* Literal string *)\n  | Acc_char_literal   of ('b, 'c) acc * char       (* Literal char *)\n  | Acc_data_string    of ('b, 'c) acc * string     (* Generated string *)\n  | Acc_data_char      of ('b, 'c) acc * char       (* Generated char *)\n  | Acc_delay          of ('b, 'c) acc * ('b -> 'c)\n                                                (* Delayed printing (%a, %t) *)\n  | Acc_flush          of ('b, 'c) acc              (* Flush *)\n  | Acc_invalid_arg    of ('b, 'c) acc * string\n      (* Raise Invalid_argument msg *)\n  | End_of_acc\n\n(* List of heterogeneous values. *)\n(* Used to accumulate scanf callback arguments. *)\ntype ('a, 'b) heter_list =\n  | Cons : 'c * ('a, 'b) heter_list -> ('c -> 'a, 'b) heter_list\n  | Nil : ('b, 'b) heter_list\n\n(* Existential Black Boxes. *)\n(* Used to abstract some existential type parameters. *)\n\n(* GADT type associating a padding and an fmtty. *)\n(* See the type_padding function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb = Padding_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padding_fmtty_ebb\n\n(* GADT type associating a padding, a precision and an fmtty. *)\n(* See the type_padprec function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb = Padprec_fmtty_EBB :\n     ('x, 'y) padding * ('y, 'z) precision * ('z, 'b, 'c, 'd, 'e, 'f) fmtty ->\n     ('x, 'b, 'c, 'd, 'e, 'f) padprec_fmtty_ebb\n\n(* GADT type associating a padding and an fmt. *)\n(* See make_padding_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) padding_fmt_ebb = Padding_fmt_EBB :\n     (_, 'x -> 'a) padding *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) padding_fmt_ebb\n\n(* GADT type associating a precision and an fmt. *)\n(* See make_precision_fmt_ebb and parse_format functions. *)\ntype ('a, 'b, 'c, 'e, 'f) precision_fmt_ebb = Precision_fmt_EBB :\n     (_, 'x -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('x, 'b, 'c, 'e, 'f) precision_fmt_ebb\n\n(* GADT type associating a padding, a precision and an fmt. *)\n(* See make_padprec_fmt_ebb and parse_format functions. *)\ntype ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb = Padprec_fmt_EBB :\n     ('x, 'y) padding * ('y, 'p -> 'a) precision *\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('p, 'b, 'c, 'e, 'f) padprec_fmt_ebb\n\n(* Abstract the 'a and 'd parameters of an fmt. *)\n(* Output type of the format parsing function. *)\ntype ('b, 'c, 'e, 'f) fmt_ebb = Fmt_EBB :\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n     ('b, 'c, 'e, 'f) fmt_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_format_gen function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb = Fmt_fmtty_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmt *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmtty ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmt_fmtty_ebb\n\n(* GADT type associating an fmtty and an fmt. *)\n(* See the type_ignored_format_substitution function. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb = Fmtty_fmt_EBB :\n     ('a, 'b, 'c, 'd, 'y, 'x) fmtty *\n     ('x, 'b, 'c, 'y, 'e, 'f) fmt_fmtty_ebb ->\n     ('a, 'b, 'c, 'd, 'e, 'f) fmtty_fmt_ebb\n\n(* Abstract all fmtty type parameters. *)\n(* Used to compare format types. *)\ntype fmtty_ebb = Fmtty_EBB : ('a, 'b, 'c, 'd, 'e, 'f) fmtty -> fmtty_ebb\n\n(* Abstract all padding type parameters. *)\n(* Used to compare paddings. *)\ntype padding_ebb = Padding_EBB : ('a, 'b) padding -> padding_ebb\n\n(* Abstract all precision type parameters. *)\n(* Used to compare precisions. *)\ntype precision_ebb = Precision_EBB : ('a, 'b) precision -> precision_ebb\n\n(******************************************************************************)\n                               (* Constants *)\n\n(* Default precision for float printing. *)\nlet default_float_precision = -6\n  (* For %h and %H formats, a negative precision means \"as many digits as\n     necessary\".  For the other FP formats, we take the absolute value\n     of the precision, hence 6 digits by default. *)\n\n(******************************************************************************)\n                               (* Externals *)\n\nexternal format_float: string -> float -> string\n  = \"caml_format_float\"\nexternal format_int: string -> int -> string\n  = \"caml_format_int\"\nexternal format_int32: string -> int32 -> string\n  = \"caml_int32_format\"\nexternal format_nativeint: string -> nativeint -> string\n  = \"caml_nativeint_format\"\nexternal format_int64: string -> int64 -> string\n  = \"caml_int64_format\"\nexternal hexstring_of_float: float -> int -> char -> string\n  = \"caml_hexstring_of_float\"\n\n(******************************************************************************)\n                     (* Tools to pretty-print formats *)\n\n(* Type of extensible character buffers. *)\ntype buffer = {\n  mutable ind : int;\n  mutable bytes : bytes;\n}\n\n(* Create a fresh buffer. *)\nlet buffer_create init_size = { ind = 0; bytes = Bytes.create init_size }\n\n(* Check size of the buffer and grow it if needed. *)\nlet buffer_check_size buf overhead =\n  let len = Bytes.length buf.bytes in\n  let min_len = buf.ind + overhead in\n  if min_len > len then (\n    let new_len = max (len * 2) min_len in\n    let new_str = Bytes.create new_len in\n    Bytes.blit buf.bytes 0 new_str 0 len;\n    buf.bytes <- new_str;\n  )\n\n(* Add the character `c' to the buffer `buf'. *)\nlet buffer_add_char buf c =\n  buffer_check_size buf 1;\n  Bytes.set buf.bytes buf.ind c;\n  buf.ind <- buf.ind + 1\n\n(* Add the string `s' to the buffer `buf'. *)\nlet buffer_add_string buf s =\n  let str_len = String.length s in\n  buffer_check_size buf str_len;\n  String.blit s 0 buf.bytes buf.ind str_len;\n  buf.ind <- buf.ind + str_len\n\n(* Get the content of the buffer. *)\nlet buffer_contents buf =\n  Bytes.sub_string buf.bytes 0 buf.ind\n\n(***)\n\n(* Convert an integer conversion to char. *)\nlet char_of_iconv iconv = match iconv with\n  | Int_d | Int_pd | Int_sd -> 'd' | Int_i | Int_pi | Int_si -> 'i'\n  | Int_x | Int_Cx -> 'x' | Int_X | Int_CX -> 'X' | Int_o | Int_Co -> 'o'\n  | Int_u -> 'u'\n\n(* Convert a float conversion to char. *)\nlet char_of_fconv fconv = match fconv with\n  | Float_f | Float_pf | Float_sf -> 'f' | Float_e | Float_pe | Float_se -> 'e'\n  | Float_E | Float_pE | Float_sE -> 'E' | Float_g | Float_pg | Float_sg -> 'g'\n  | Float_G | Float_pG | Float_sG -> 'G' | Float_F -> 'F'\n  | Float_h | Float_ph | Float_sh -> 'h' | Float_H | Float_pH | Float_sH -> 'H'\n\n\n(* Convert a scanning counter to char. *)\nlet char_of_counter counter = match counter with\n  | Line_counter  -> 'l'\n  | Char_counter  -> 'n'\n  | Token_counter -> 'N'\n\n(***)\n\n(* Print a char_set in a buffer with the OCaml format lexical convention. *)\nlet bprint_char_set buf char_set =\n  let rec print_start set =\n    let is_alone c =\n      let before, after = Char.(chr (code c - 1), chr (code c + 1)) in\n      is_in_char_set set c\n      && not (is_in_char_set set before && is_in_char_set set after) in\n    if is_alone ']' then buffer_add_char buf ']';\n    print_out set 1;\n    if is_alone '-' then buffer_add_char buf '-';\n  and print_out set i =\n    if i < 256 then\n      if is_in_char_set set (char_of_int i) then print_first set i\n      else print_out set (i + 1)\n  and print_first set i =\n    match char_of_int i with\n    | '\\255' -> print_char buf 255;\n    | ']' | '-' -> print_out set (i + 1);\n    | _ -> print_second set (i + 1);\n  and print_second set i =\n    if is_in_char_set set (char_of_int i) then\n      match char_of_int i with\n      | '\\255' ->\n        print_char buf 254;\n        print_char buf 255;\n      | ']' | '-' when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_out set (i + 1);\n      | _ when not (is_in_char_set set (char_of_int (i + 1))) ->\n        print_char buf (i - 1);\n        print_char buf i;\n        print_out set (i + 2);\n      | _ ->\n        print_in set (i - 1) (i + 2);\n    else (\n      print_char buf (i - 1);\n      print_out set (i + 1);\n    )\n  and print_in set i j =\n    if j = 256 || not (is_in_char_set set (char_of_int j)) then (\n      print_char buf i;\n      print_char buf (int_of_char '-');\n      print_char buf (j - 1);\n      if j < 256 then print_out set (j + 1);\n    ) else\n      print_in set i (j + 1);\n  and print_char buf i = match char_of_int i with\n    | '%' -> buffer_add_char buf '%'; buffer_add_char buf '%';\n    | '@' -> buffer_add_char buf '%'; buffer_add_char buf '@';\n    | c   -> buffer_add_char buf c;\n  in\n  buffer_add_char buf '[';\n  print_start (\n    if is_in_char_set char_set '\\000'\n    then ( buffer_add_char buf '^'; rev_char_set char_set )\n    else char_set\n  );\n  buffer_add_char buf ']'\n\n(***)\n\n(* Print a padty in a buffer with the format-like syntax. *)\nlet bprint_padty buf padty = match padty with\n  | Left  -> buffer_add_char buf '-'\n  | Right -> ()\n  | Zeros -> buffer_add_char buf '0'\n\n(* Print the '_' of an ignored flag if needed. *)\nlet bprint_ignored_flag buf ign_flag =\n  if ign_flag then buffer_add_char buf '_'\n\n(***)\n\nlet bprint_pad_opt buf pad_opt = match pad_opt with\n  | None -> ()\n  | Some width -> buffer_add_string buf (string_of_int width)\n\n(***)\n\n(* Print padding in a buffer with the format-like syntax. *)\nlet bprint_padding : type a b . buffer -> (a, b) padding -> unit =\nfun buf pad -> match pad with\n  | No_padding -> ()\n  | Lit_padding (padty, n) ->\n    bprint_padty buf padty;\n    buffer_add_string buf (string_of_int n);\n  | Arg_padding padty ->\n    bprint_padty buf padty;\n    buffer_add_char buf '*'\n\n(* Print precision in a buffer with the format-like syntax. *)\nlet bprint_precision : type a b . buffer -> (a, b) precision -> unit =\n  fun buf prec -> match prec with\n  | No_precision -> ()\n  | Lit_precision n ->\n    buffer_add_char buf '.';\n    buffer_add_string buf (string_of_int n);\n  | Arg_precision ->\n    buffer_add_string buf \".*\"\n\n(***)\n\n(* Print the optionnal '+', ' ' or '#' associated to an int conversion. *)\nlet bprint_iconv_flag buf iconv = match iconv with\n  | Int_pd | Int_pi -> buffer_add_char buf '+'\n  | Int_sd | Int_si -> buffer_add_char buf ' '\n  | Int_Cx | Int_CX | Int_Co -> buffer_add_char buf '#'\n  | Int_d | Int_i | Int_x | Int_X | Int_o | Int_u -> ()\n\n(* Print an complete int format in a buffer (ex: \"%3.*d\"). *)\nlet bprint_int_fmt buf ign_flag iconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(* Print a complete int32, nativeint or int64 format in a buffer. *)\nlet bprint_altint_fmt buf ign_flag iconv pad prec c =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_iconv_flag buf iconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf c;\n  buffer_add_char buf (char_of_iconv iconv)\n\n(***)\n\n(* Print the optionnal '+' associated to a float conversion. *)\nlet bprint_fconv_flag buf fconv = match fconv with\n  | Float_pf | Float_pe | Float_pE\n  | Float_pg | Float_pG | Float_ph | Float_pH ->\n    buffer_add_char buf '+'\n  | Float_sf | Float_se | Float_sE\n  | Float_sg | Float_sG | Float_sh | Float_sH ->\n    buffer_add_char buf ' '\n  | Float_f | Float_e | Float_E\n  | Float_g | Float_G | Float_F | Float_h | Float_H ->\n    ()\n\n(* Print a complete float format in a buffer (ex: \"%+*.3f\"). *)\nlet bprint_float_fmt buf ign_flag fconv pad prec =\n  buffer_add_char buf '%';\n  bprint_ignored_flag buf ign_flag;\n  bprint_fconv_flag buf fconv;\n  bprint_padding buf pad;\n  bprint_precision buf prec;\n  buffer_add_char buf (char_of_fconv fconv)\n\n(* Compute the literal string representation of a formatting_lit. *)\n(* Also used by Printf and Scanf where formatting is not interpreted. *)\nlet string_of_formatting_lit formatting_lit = match formatting_lit with\n  | Close_box            -> \"@]\"\n  | Close_tag            -> \"@}\"\n  | Break (str, _, _)    -> str\n  | FFlush               -> \"@?\"\n  | Force_newline        -> \"@\\n\"\n  | Flush_newline        -> \"@.\"\n  | Magic_size (str, _)  -> str\n  | Escaped_at           -> \"@@\"\n  | Escaped_percent      -> \"@%\"\n  | Scan_indic c -> \"@\" ^ (String.make 1 c)\n\n(* Compute the literal string representation of a formatting. *)\n(* Also used by Printf and Scanf where formatting is not interpreted. *)\nlet string_of_formatting_gen : type a b c d e f .\n    (a, b, c, d, e, f) formatting_gen -> string =\n  fun formatting_gen -> match formatting_gen with\n  | Open_tag (Format (_, str)) -> str\n  | Open_box (Format (_, str)) -> str\n\n(***)\n\n(* Print a literal char in a buffer, escape '%' by \"%%\". *)\nlet bprint_char_literal buf chr = match chr with\n  | '%' -> buffer_add_string buf \"%%\"\n  | _ -> buffer_add_char buf chr\n\n(* Print a literal string in a buffer, escape all '%' by \"%%\". *)\nlet bprint_string_literal buf str =\n  for i = 0 to String.length str - 1 do\n    bprint_char_literal buf str.[i]\n  done\n\n(******************************************************************************)\n                          (* Format pretty-printing *)\n\n(* Print a complete format type (an fmtty) in a buffer. *)\nlet rec bprint_fmtty : type a b c d e f g h i j k l .\n    buffer -> (a, b, c, d, e, f, g, h, i, j, k, l) fmtty_rel -> unit =\nfun buf fmtty -> match fmtty with\n  | Char_ty rest      -> buffer_add_string buf \"%c\";  bprint_fmtty buf rest;\n  | String_ty rest    -> buffer_add_string buf \"%s\";  bprint_fmtty buf rest;\n  | Int_ty rest       -> buffer_add_string buf \"%i\";  bprint_fmtty buf rest;\n  | Int32_ty rest     -> buffer_add_string buf \"%li\"; bprint_fmtty buf rest;\n  | Nativeint_ty rest -> buffer_add_string buf \"%ni\"; bprint_fmtty buf rest;\n  | Int64_ty rest     -> buffer_add_string buf \"%Li\"; bprint_fmtty buf rest;\n  | Float_ty rest     -> buffer_add_string buf \"%f\";  bprint_fmtty buf rest;\n  | Bool_ty rest      -> buffer_add_string buf \"%B\";  bprint_fmtty buf rest;\n  | Alpha_ty rest     -> buffer_add_string buf \"%a\";  bprint_fmtty buf rest;\n  | Theta_ty rest     -> buffer_add_string buf \"%t\";  bprint_fmtty buf rest;\n  | Any_ty rest       -> buffer_add_string buf \"%?\";  bprint_fmtty buf rest;\n  | Reader_ty rest    -> buffer_add_string buf \"%r\";  bprint_fmtty buf rest;\n\n  | Ignored_reader_ty rest ->\n    buffer_add_string buf \"%_r\";\n    bprint_fmtty buf rest;\n\n  | Format_arg_ty (sub_fmtty, rest) ->\n    buffer_add_string buf \"%{\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%}\"; bprint_fmtty buf rest;\n  | Format_subst_ty (sub_fmtty, _, rest) ->\n    buffer_add_string buf \"%(\"; bprint_fmtty buf sub_fmtty;\n    buffer_add_string buf \"%)\"; bprint_fmtty buf rest;\n\n  | End_of_fmtty -> ()\n\n(***)\n\nlet rec int_of_custom_arity : type a b c .\n  (a, b, c) custom_arity -> int =\n  function\n  | Custom_zero -> 0\n  | Custom_succ x -> 1 + int_of_custom_arity x\n\n(* Print a complete format in a buffer. *)\nlet bprint_fmt buf fmt =\n  let rec fmtiter : type a b c d e f .\n      (a, b, c, d, e, f) fmt -> bool -> unit =\n  fun fmt ign_flag -> match fmt with\n    | String (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 's';\n      fmtiter rest false;\n    | Caml_string (pad, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_padding buf pad; buffer_add_char buf 'S';\n      fmtiter rest false;\n\n    | Int (iconv, pad, prec, rest) ->\n      bprint_int_fmt buf ign_flag iconv pad prec;\n      fmtiter rest false;\n    | Int32 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'l';\n      fmtiter rest false;\n    | Nativeint (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'n';\n      fmtiter rest false;\n    | Int64 (iconv, pad, prec, rest) ->\n      bprint_altint_fmt buf ign_flag iconv pad prec 'L';\n      fmtiter rest false;\n    | Float (fconv, pad, prec, rest) ->\n      bprint_float_fmt buf ign_flag fconv pad prec;\n      fmtiter rest false;\n\n    | Char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'c'; fmtiter rest false;\n    | Caml_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'C'; fmtiter rest false;\n    | Bool rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'B'; fmtiter rest false;\n    | Alpha rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'a'; fmtiter rest false;\n    | Theta rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 't'; fmtiter rest false;\n    | Custom (arity, _, rest) ->\n      for _i = 1 to int_of_custom_arity arity do\n        buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n        buffer_add_char buf '?';\n      done;\n      fmtiter rest false;\n    | Reader rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf 'r'; fmtiter rest false;\n    | Flush rest ->\n      buffer_add_string buf \"%!\";\n      fmtiter rest ign_flag;\n\n    | String_literal (str, rest) ->\n      bprint_string_literal buf str;\n      fmtiter rest ign_flag;\n    | Char_literal (chr, rest) ->\n      bprint_char_literal buf chr;\n      fmtiter rest ign_flag;\n\n    | Format_arg (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '{';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf '}';\n      fmtiter rest false;\n    | Format_subst (pad_opt, fmtty, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf pad_opt; buffer_add_char buf '(';\n      bprint_fmtty buf fmtty; buffer_add_char buf '%'; buffer_add_char buf ')';\n      fmtiter rest false;\n\n    | Scan_char_set (width_opt, char_set, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_pad_opt buf width_opt; bprint_char_set buf char_set;\n      fmtiter rest false;\n    | Scan_get_counter (counter, rest) ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      buffer_add_char buf (char_of_counter counter);\n      fmtiter rest false;\n    | Scan_next_char rest ->\n      buffer_add_char buf '%'; bprint_ignored_flag buf ign_flag;\n      bprint_string_literal buf \"0c\"; fmtiter rest false;\n\n    | Ignored_param (ign, rest) ->\n      let Param_format_EBB fmt' = param_format_of_ignored_format ign rest in\n      fmtiter fmt' true;\n\n    | Formatting_lit (fmting_lit, rest) ->\n      bprint_string_literal buf (string_of_formatting_lit fmting_lit);\n      fmtiter rest ign_flag;\n    | Formatting_gen (fmting_gen, rest) ->\n      bprint_string_literal buf \"@{\";\n      bprint_string_literal buf (string_of_formatting_gen fmting_gen);\n      fmtiter rest ign_flag;\n\n    | End_of_format -> ()\n\n  in fmtiter fmt false\n\n(***)\n\n(* Convert a format to string. *)\nlet string_of_fmt fmt =\n  let buf = buffer_create 16 in\n  bprint_fmt buf fmt;\n  buffer_contents buf\n\n(******************************************************************************)\n                          (* Type extraction *)\n\ntype (_, _) eq = Refl : ('a, 'a) eq\n\n(* Invariant: this function is the identity on values.\n\n   In particular, if (ty1, ty2) have equal values, then\n   (trans (symm ty1) ty2) respects the 'trans' precondition. *)\nlet rec symm : type a1 b1 c1 d1 e1 f1 a2 b2 c2 d2 e2 f2 .\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a1, b1, c1, d1, e1, f1) fmtty_rel\n= function\n  | Char_ty rest -> Char_ty (symm rest)\n  | Int_ty rest -> Int_ty (symm rest)\n  | Int32_ty rest -> Int32_ty (symm rest)\n  | Int64_ty rest -> Int64_ty (symm rest)\n  | Nativeint_ty rest -> Nativeint_ty (symm rest)\n  | Float_ty rest -> Float_ty (symm rest)\n  | Bool_ty rest -> Bool_ty (symm rest)\n  | String_ty rest -> String_ty (symm rest)\n  | Theta_ty rest -> Theta_ty (symm rest)\n  | Alpha_ty rest -> Alpha_ty (symm rest)\n  | Any_ty rest -> Any_ty (symm rest)\n  | Reader_ty rest -> Reader_ty (symm rest)\n  | Ignored_reader_ty rest -> Ignored_reader_ty (symm rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, symm rest)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty2, ty1, symm rest)\n  | End_of_fmtty -> End_of_fmtty\n\nlet rec fmtty_rel_det : type a1 b c d1 e1 f1 a2 d2 e2 f2 .\n  (a1, b, c, d1, e1, f1,\n   a2, b, c, d2, e2, f2) fmtty_rel ->\n    ((f1, f2) eq -> (a1, a2) eq)\n  * ((a1, a2) eq -> (f1, f2) eq)\n  * ((e1, e2) eq -> (d1, d2) eq)\n  * ((d1, d2) eq -> (e1, e2) eq)\n= function\n  | End_of_fmtty ->\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl),\n    (fun Refl -> Refl)\n  | Char_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | String_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int32_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Int64_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Nativeint_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Float_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Bool_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n\n  | Theta_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Alpha_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Any_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Ignored_reader_ty rest ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in Refl),\n    (fun Refl -> let Refl = de Refl in Refl)\n  | Format_arg_ty (_ty, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    (fun Refl -> let Refl = fa Refl in Refl),\n    (fun Refl -> let Refl = af Refl in Refl),\n    ed, de\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let fa, af, ed, de = fmtty_rel_det rest in\n    let ty = trans (symm ty1) ty2 in\n    let ag, ga, dj, jd = fmtty_rel_det ty in\n    (fun Refl -> let Refl = fa Refl in let Refl = ag Refl in Refl),\n    (fun Refl -> let Refl = ga Refl in let Refl = af Refl in Refl),\n    (fun Refl -> let Refl = ed Refl in let Refl = dj Refl in Refl),\n    (fun Refl -> let Refl = jd Refl in let Refl = de Refl in Refl)\n\n(* Precondition: we assume that the two fmtty_rel arguments have equal\n   values (at possibly distinct types); this invariant comes from the way\n   fmtty_rel witnesses are produced by the type-checker\n\n   The code below uses (assert false) when this assumption is broken. The\n   code pattern is the following:\n\n     | Foo x, Foo y ->\n       (* case where indeed both values\n          start with constructor Foo *)\n     | Foo _, _\n     | _, Foo _ ->\n       (* different head constructors: broken precondition *)\n       assert false\n*)\nand trans : type\n  a1 b1 c1 d1 e1 f1\n  a2 b2 c2 d2 e2 f2\n  a3 b3 c3 d3 e3 f3\n.\n   (a1, b1, c1, d1, e1, f1,\n    a2, b2, c2, d2, e2, f2) fmtty_rel\n-> (a2, b2, c2, d2, e2, f2,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n-> (a1, b1, c1, d1, e1, f1,\n    a3, b3, c3, d3, e3, f3) fmtty_rel\n= fun ty1 ty2 -> match ty1, ty2 with\n  | Char_ty rest1, Char_ty rest2 -> Char_ty (trans rest1 rest2)\n  | String_ty rest1, String_ty rest2 -> String_ty (trans rest1 rest2)\n  | Bool_ty rest1, Bool_ty rest2 -> Bool_ty (trans rest1 rest2)\n  | Int_ty rest1, Int_ty rest2 -> Int_ty (trans rest1 rest2)\n  | Int32_ty rest1, Int32_ty rest2 -> Int32_ty (trans rest1 rest2)\n  | Int64_ty rest1, Int64_ty rest2 -> Int64_ty (trans rest1 rest2)\n  | Nativeint_ty rest1, Nativeint_ty rest2 -> Nativeint_ty (trans rest1 rest2)\n  | Float_ty rest1, Float_ty rest2 -> Float_ty (trans rest1 rest2)\n\n  | Alpha_ty rest1, Alpha_ty rest2 -> Alpha_ty (trans rest1 rest2)\n  | Alpha_ty _, _ -> assert false\n  | _, Alpha_ty _ -> assert false\n\n  | Theta_ty rest1, Theta_ty rest2 -> Theta_ty (trans rest1 rest2)\n  | Theta_ty _, _ -> assert false\n  | _, Theta_ty _ -> assert false\n\n  | Any_ty rest1, Any_ty rest2 -> Any_ty (trans rest1 rest2)\n  | Any_ty _, _ -> assert false\n  | _, Any_ty _ -> assert false\n\n  | Reader_ty rest1, Reader_ty rest2 -> Reader_ty (trans rest1 rest2)\n  | Reader_ty _, _ -> assert false\n  | _, Reader_ty _ -> assert false\n\n  | Ignored_reader_ty rest1, Ignored_reader_ty rest2 ->\n    Ignored_reader_ty (trans rest1 rest2)\n  | Ignored_reader_ty _, _ -> assert false\n  | _, Ignored_reader_ty _ -> assert false\n\n  | Format_arg_ty (ty1, rest1), Format_arg_ty (ty2, rest2) ->\n    Format_arg_ty (trans ty1 ty2, trans rest1 rest2)\n  | Format_arg_ty _, _ -> assert false\n  | _, Format_arg_ty _ -> assert false\n\n  | Format_subst_ty (ty11, ty12, rest1),\n    Format_subst_ty (ty21, ty22, rest2) ->\n    let ty = trans (symm ty12) ty21 in\n    let _, f2, _, f4 = fmtty_rel_det ty in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    Format_subst_ty (ty11, ty22, trans rest1 rest2)\n  | Format_subst_ty _, _ -> assert false\n  | _, Format_subst_ty _ -> assert false\n\n  | End_of_fmtty, End_of_fmtty -> End_of_fmtty\n  | End_of_fmtty, _ -> assert false\n  | _, End_of_fmtty -> assert false\n\nlet rec fmtty_of_formatting_gen : type a b c d e f .\n  (a, b, c, d, e, f) formatting_gen ->\n    (a, b, c, d, e, f) fmtty =\nfun formatting_gen -> match formatting_gen with\n  | Open_tag (Format (fmt, _)) -> fmtty_of_fmt fmt\n  | Open_box (Format (fmt, _)) -> fmtty_of_fmt fmt\n\n(* Extract the type representation (an fmtty) of a format. *)\nand fmtty_of_fmt : type a b c d e f .\n  (a, b, c, d, e, f) fmt -> (a, b, c, d, e, f) fmtty =\nfun fmtty -> match fmtty with\n  | String (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n  | Caml_string (pad, rest) ->\n    fmtty_of_padding_fmtty pad (String_ty (fmtty_of_fmt rest))\n\n  | Int (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int32 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int32_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Nativeint (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Nativeint_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Int64 (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Int64_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n  | Float (_, pad, prec, rest) ->\n    let ty_rest = fmtty_of_fmt rest in\n    let prec_ty = fmtty_of_precision_fmtty prec (Float_ty ty_rest) in\n    fmtty_of_padding_fmtty pad prec_ty\n\n  | Char rest                  -> Char_ty (fmtty_of_fmt rest)\n  | Caml_char rest             -> Char_ty (fmtty_of_fmt rest)\n  | Bool rest                  -> Bool_ty (fmtty_of_fmt rest)\n  | Alpha rest                 -> Alpha_ty (fmtty_of_fmt rest)\n  | Theta rest                 -> Theta_ty (fmtty_of_fmt rest)\n  | Custom (arity, _, rest)    -> fmtty_of_custom arity (fmtty_of_fmt rest)\n  | Reader rest                -> Reader_ty (fmtty_of_fmt rest)\n\n  | Format_arg (_, ty, rest) ->\n    Format_arg_ty (ty, fmtty_of_fmt rest)\n  | Format_subst (_, ty, rest) ->\n    Format_subst_ty (ty, ty, fmtty_of_fmt rest)\n\n  | Flush rest                 -> fmtty_of_fmt rest\n  | String_literal (_, rest)   -> fmtty_of_fmt rest\n  | Char_literal (_, rest)     -> fmtty_of_fmt rest\n\n  | Scan_char_set (_, _, rest) -> String_ty (fmtty_of_fmt rest)\n  | Scan_get_counter (_, rest) -> Int_ty (fmtty_of_fmt rest)\n  | Scan_next_char rest        -> Char_ty (fmtty_of_fmt rest)\n  | Ignored_param (ign, rest)  -> fmtty_of_ignored_format ign rest\n  | Formatting_lit (_, rest)   -> fmtty_of_fmt rest\n  | Formatting_gen (fmting_gen, rest)  ->\n    concat_fmtty (fmtty_of_formatting_gen fmting_gen) (fmtty_of_fmt rest)\n\n  | End_of_format              -> End_of_fmtty\n\nand fmtty_of_custom : type x y a b c d e f .\n  (a, x, y) custom_arity -> (a, b, c, d, e, f) fmtty ->\n  (y, b, c, d, e, f) fmtty =\nfun arity fmtty -> match arity with\n  | Custom_zero -> fmtty\n  | Custom_succ arity -> Any_ty (fmtty_of_custom arity fmtty)\n\n(* Extract the fmtty of an ignored parameter followed by the rest of\n   the format. *)\nand fmtty_of_ignored_format : type x y a b c d e f .\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt ->\n    (a, b, c, d, e, f) fmtty =\nfun ign fmt -> match ign with\n  | Ignored_char                    -> fmtty_of_fmt fmt\n  | Ignored_caml_char               -> fmtty_of_fmt fmt\n  | Ignored_string _                -> fmtty_of_fmt fmt\n  | Ignored_caml_string _           -> fmtty_of_fmt fmt\n  | Ignored_int (_, _)              -> fmtty_of_fmt fmt\n  | Ignored_int32 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_nativeint (_, _)        -> fmtty_of_fmt fmt\n  | Ignored_int64 (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_float (_, _)            -> fmtty_of_fmt fmt\n  | Ignored_bool                    -> fmtty_of_fmt fmt\n  | Ignored_format_arg _            -> fmtty_of_fmt fmt\n  | Ignored_format_subst (_, fmtty) -> concat_fmtty fmtty (fmtty_of_fmt fmt)\n  | Ignored_reader                  -> Ignored_reader_ty (fmtty_of_fmt fmt)\n  | Ignored_scan_char_set _         -> fmtty_of_fmt fmt\n  | Ignored_scan_get_counter _      -> fmtty_of_fmt fmt\n  | Ignored_scan_next_char          -> fmtty_of_fmt fmt\n\n(* Add an Int_ty node if padding is taken as an extra argument (ex: \"%*s\"). *)\nand fmtty_of_padding_fmtty : type x a b c d e f .\n    (x, a) padding -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun pad fmtty -> match pad with\n    | No_padding    -> fmtty\n    | Lit_padding _ -> fmtty\n    | Arg_padding _ -> Int_ty fmtty\n\n(* Add an Int_ty node if precision is taken as an extra argument (ex: \"%.*f\").*)\nand fmtty_of_precision_fmtty : type x a b c d e f .\n    (x, a) precision -> (a, b, c, d, e, f) fmtty -> (x, b, c, d, e, f) fmtty =\n  fun prec fmtty -> match prec with\n    | No_precision    -> fmtty\n    | Lit_precision _ -> fmtty\n    | Arg_precision   -> Int_ty fmtty\n\n(******************************************************************************)\n                            (* Format typing *)\n\n(* Exception raised when a format does not match a given format type. *)\nexception Type_mismatch\n\n(* Type a padding. *)\n(* Take an Int_ty from the fmtty if the integer should be kept as argument. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padding : type a b c d e f x y .\n    (x, y) padding -> (a, b, c, d, e, f) fmtty ->\n      (a, b, c, d, e, f) padding_fmtty_ebb =\nfun pad fmtty -> match pad, fmtty with\n  | No_padding, _ -> Padding_fmtty_EBB (No_padding, fmtty)\n  | Lit_padding (padty, w), _ -> Padding_fmtty_EBB (Lit_padding (padty,w),fmtty)\n  | Arg_padding padty, Int_ty rest -> Padding_fmtty_EBB (Arg_padding padty,rest)\n  | _ -> raise Type_mismatch\n\n(* Convert a (upadding, uprecision) to a (padding, precision). *)\n(* Take one or two Int_ty from the fmtty if needed. *)\n(* Raise Type_mismatch in case of type mismatch. *)\nlet type_padprec : type a b c d e f x y z .\n  (x, y) padding -> (y, z) precision -> (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) padprec_fmtty_ebb =\nfun pad prec fmtty -> match prec, type_padding pad fmtty with\n  | No_precision, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, No_precision, rest)\n  | Lit_precision p, Padding_fmtty_EBB (pad, rest) ->\n    Padprec_fmtty_EBB (pad, Lit_precision p, rest)\n  | Arg_precision, Padding_fmtty_EBB (pad, Int_ty rest) ->\n    Padprec_fmtty_EBB (pad, Arg_precision, rest)\n  | _, Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n\n(* Type a format according to an fmtty. *)\n(* If typing succeed, generate a copy of the format with the same\n    type parameters as the fmtty. *)\n(* Raise a Failure with an error message in case of type mismatch. *)\nlet rec type_format :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty -> match type_format_gen fmt fmtty with\n  | Fmt_fmtty_EBB (fmt', End_of_fmtty) -> fmt'\n  | _ -> raise Type_mismatch\n\nand type_format_gen :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a2, b2, c2, d2, e2, f2) fmtty\n  -> (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun fmt fmtty -> match fmt, fmtty with\n  | Char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char fmt', fmtty')\n  | Caml_char fmt_rest, Char_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Caml_char fmt', fmtty')\n  | String (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (String (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Caml_string (pad, fmt_rest), _ -> (\n    match type_padding pad fmtty with\n    | Padding_fmtty_EBB (pad, String_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Caml_string (pad, fmt'), fmtty')\n    | Padding_fmtty_EBB (_, _) -> raise Type_mismatch\n  )\n  | Int (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int32 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int32_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int32 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Nativeint (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Nativeint_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Nativeint (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Int64 (iconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Int64_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Int64 (iconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Float (fconv, pad, prec, fmt_rest), _ -> (\n    match type_padprec pad prec fmtty with\n    | Padprec_fmtty_EBB (pad, prec, Float_ty fmtty_rest) ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n      Fmt_fmtty_EBB (Float (fconv, pad, prec, fmt'), fmtty')\n    | Padprec_fmtty_EBB (_, _, _) -> raise Type_mismatch\n  )\n  | Bool fmt_rest, Bool_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Bool fmt', fmtty')\n  | Flush fmt_rest, fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Flush fmt', fmtty')\n\n  | String_literal (str, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (String_literal (str, fmt'), fmtty')\n  | Char_literal (chr, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Char_literal (chr, fmt'), fmtty')\n\n  | Format_arg (pad_opt, sub_fmtty, fmt_rest),\n    Format_arg_ty (sub_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub_fmtty <> Fmtty_EBB sub_fmtty' then raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Format_arg (pad_opt, sub_fmtty', fmt'), fmtty')\n  | Format_subst (pad_opt, sub_fmtty, fmt_rest),\n    Format_subst_ty (sub_fmtty1, _sub_fmtty2, fmtty_rest) ->\n    if Fmtty_EBB (erase_rel sub_fmtty) <> Fmtty_EBB (erase_rel sub_fmtty1) then\n      raise Type_mismatch;\n    let Fmt_fmtty_EBB (fmt', fmtty') =\n      type_format_gen fmt_rest (erase_rel fmtty_rest)\n    in\n    Fmt_fmtty_EBB (Format_subst (pad_opt, sub_fmtty1, fmt'), fmtty')\n  (* Printf and Format specific constructors: *)\n  | Alpha fmt_rest, Alpha_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Alpha fmt', fmtty')\n  | Theta fmt_rest, Theta_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Theta fmt', fmtty')\n\n  (* Format specific constructors: *)\n  | Formatting_lit (formatting_lit, fmt_rest), fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Formatting_lit (formatting_lit, fmt'), fmtty')\n  | Formatting_gen (formatting_gen, fmt_rest), fmtty_rest ->\n    type_formatting_gen formatting_gen fmt_rest fmtty_rest\n\n  (* Scanf specific constructors: *)\n  | Reader fmt_rest, Reader_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Reader fmt', fmtty')\n  | Scan_char_set (width_opt, char_set, fmt_rest), String_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_char_set (width_opt, char_set, fmt'), fmtty')\n  | Scan_get_counter (counter, fmt_rest), Int_ty fmtty_rest ->\n    let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt_rest fmtty_rest in\n    Fmt_fmtty_EBB (Scan_get_counter (counter, fmt'), fmtty')\n  | Ignored_param (ign, rest), fmtty_rest ->\n    type_ignored_param ign rest fmtty_rest\n\n  | End_of_format, fmtty_rest -> Fmt_fmtty_EBB (End_of_format, fmtty_rest)\n\n  | _ -> raise Type_mismatch\n\nand type_formatting_gen : type a1 a3 b1 b3 c1 c3 d1 d3 e1 e2 e3 f1 f2 f3 .\n    (a1, b1, c1, d1, e1, f1) formatting_gen ->\n    (f1, b1, c1, e1, e2, f2) fmt ->\n    (a3, b3, c3, d3, e3, f3) fmtty ->\n    (a3, b3, c3, d3, e3, f3) fmt_fmtty_ebb =\nfun formatting_gen fmt0 fmtty0 -> match formatting_gen with\n  | Open_tag (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_tag (Format (fmt2, str)), fmt3), fmtty3)\n  | Open_box (Format (fmt1, str)) ->\n    let Fmt_fmtty_EBB (fmt2, fmtty2) = type_format_gen fmt1 fmtty0 in\n    let Fmt_fmtty_EBB (fmt3, fmtty3) = type_format_gen fmt0 fmtty2 in\n    Fmt_fmtty_EBB (Formatting_gen (Open_box (Format (fmt2, str)), fmt3), fmtty3)\n\n(* Type an Ignored_param node according to an fmtty. *)\nand type_ignored_param : type p q x y z t u v a b c d e f .\n    (x, y, z, t, q, p) ignored ->\n    (p, y, z, q, u, v) fmt ->\n    (a, b, c, d, e, f) fmtty ->\n    (a, b, c, d, e, f) fmt_fmtty_ebb =\nfun ign fmt fmtty -> match ign with\n  | Ignored_char               as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_char          as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_string _           as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_caml_string _      as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int _              as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int32 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_nativeint _        as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_int64 _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_float _            as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_bool               as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_char_set _    as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_get_counter _ as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_scan_next_char     as ign' -> type_ignored_param_one ign' fmt fmtty\n  | Ignored_format_arg (pad_opt, sub_fmtty) ->\n    type_ignored_param_one (Ignored_format_arg (pad_opt, sub_fmtty)) fmt fmtty\n  | Ignored_format_subst (pad_opt, sub_fmtty) ->\n    let Fmtty_fmt_EBB (sub_fmtty', Fmt_fmtty_EBB (fmt', fmtty')) =\n      type_ignored_format_substitution sub_fmtty fmt fmtty in\n    Fmt_fmtty_EBB (Ignored_param (Ignored_format_subst (pad_opt, sub_fmtty'),\n                                  fmt'),\n                   fmtty')\n  | Ignored_reader -> (\n    match fmtty with\n    | Ignored_reader_ty fmtty_rest ->\n      let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty_rest in\n      Fmt_fmtty_EBB (Ignored_param (Ignored_reader, fmt'), fmtty')\n    | _ -> raise Type_mismatch\n  )\n\nand type_ignored_param_one : type a1 a2 b1 b2 c1 c2 d1 d2 e1 e2 f1 f2 .\n    (a2, b2, c2, d2, d2, a2) ignored ->\n    (a1, b1, c1, d1, e1, f1) fmt ->\n    (a2, b2, c2, d2, e2, f2) fmtty ->\n    (a2, b2, c2, d2, e2, f2) fmt_fmtty_ebb\n= fun ign fmt fmtty ->\n  let Fmt_fmtty_EBB (fmt', fmtty') = type_format_gen fmt fmtty in\n  Fmt_fmtty_EBB (Ignored_param (ign, fmt'), fmtty')\n\n(* Typing of the complex case: \"%_(...%)\". *)\nand type_ignored_format_substitution : type w x y z p s t u a b c d e f .\n    (w, x, y, z, s, p) fmtty ->\n    (p, x, y, s, t, u) fmt ->\n    (a, b, c, d, e, f) fmtty -> (a, b, c, d, e, f) fmtty_fmt_ebb =\nfun sub_fmtty fmt fmtty -> match sub_fmtty, fmtty with\n  | Char_ty sub_fmtty_rest, Char_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Char_ty sub_fmtty_rest', fmt')\n  | String_ty sub_fmtty_rest, String_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (String_ty sub_fmtty_rest', fmt')\n  | Int_ty sub_fmtty_rest, Int_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int_ty sub_fmtty_rest', fmt')\n  | Int32_ty sub_fmtty_rest, Int32_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int32_ty sub_fmtty_rest', fmt')\n  | Nativeint_ty sub_fmtty_rest, Nativeint_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Nativeint_ty sub_fmtty_rest', fmt')\n  | Int64_ty sub_fmtty_rest, Int64_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Int64_ty sub_fmtty_rest', fmt')\n  | Float_ty sub_fmtty_rest, Float_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Float_ty sub_fmtty_rest', fmt')\n  | Bool_ty sub_fmtty_rest, Bool_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Bool_ty sub_fmtty_rest', fmt')\n  | Alpha_ty sub_fmtty_rest, Alpha_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Alpha_ty sub_fmtty_rest', fmt')\n  | Theta_ty sub_fmtty_rest, Theta_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Theta_ty sub_fmtty_rest', fmt')\n  | Reader_ty sub_fmtty_rest, Reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Reader_ty sub_fmtty_rest', fmt')\n  | Ignored_reader_ty sub_fmtty_rest, Ignored_reader_ty fmtty_rest ->\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Ignored_reader_ty sub_fmtty_rest', fmt')\n\n  | Format_arg_ty (sub2_fmtty, sub_fmtty_rest),\n    Format_arg_ty (sub2_fmtty', fmtty_rest) ->\n    if Fmtty_EBB sub2_fmtty <> Fmtty_EBB sub2_fmtty' then raise Type_mismatch;\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution sub_fmtty_rest fmt fmtty_rest in\n    Fmtty_fmt_EBB (Format_arg_ty (sub2_fmtty', sub_fmtty_rest'), fmt')\n  | Format_subst_ty (sub1_fmtty,  sub2_fmtty,  sub_fmtty_rest),\n    Format_subst_ty (sub1_fmtty', sub2_fmtty', fmtty_rest) ->\n    (* TODO define Fmtty_rel_EBB to remove those erase_rel *)\n    if Fmtty_EBB (erase_rel sub1_fmtty) <> Fmtty_EBB (erase_rel sub1_fmtty')\n    then raise Type_mismatch;\n    if Fmtty_EBB (erase_rel sub2_fmtty) <> Fmtty_EBB (erase_rel sub2_fmtty')\n    then raise Type_mismatch;\n    let sub_fmtty' = trans (symm sub1_fmtty') sub2_fmtty' in\n    let _, f2, _, f4 = fmtty_rel_det sub_fmtty' in\n    let Refl = f2 Refl in\n    let Refl = f4 Refl in\n    let Fmtty_fmt_EBB (sub_fmtty_rest', fmt') =\n      type_ignored_format_substitution (erase_rel sub_fmtty_rest) fmt fmtty_rest\n    in\n    Fmtty_fmt_EBB (Format_subst_ty (sub1_fmtty', sub2_fmtty',\n                                    symm sub_fmtty_rest'),\n                   fmt')\n  | End_of_fmtty, fmtty ->\n    Fmtty_fmt_EBB (End_of_fmtty, type_format_gen fmt fmtty)\n  | _ -> raise Type_mismatch\n\n(* This implementation of `recast` is a bit disappointing. The\n   invariant provided by the type are very strong: the input format's\n   type is in relation to the output type's as witnessed by the\n   fmtty_rel argument. One would at first expect this function to be\n   total, and implementable by exhaustive pattern matching. Instead,\n   we reuse the highly partial and much less well-defined function\n   `type_format` that has lost all knowledge of the correspondence\n   between the argument's types.\n\n   Besides the fact that this function reuses a lot of the\n   `type_format` logic (eg.: seeing Int_ty in the fmtty parameter does\n   not let you match on Int only, as you may in fact have Float\n   (Arg_padding, ...) (\"%.*d\") beginning with an Int_ty), it is also\n   a partial function, because the typing information in a format is\n   not quite enough to reconstruct it unambiguously. For example, the\n   format types of \"%d%_r\" and \"%_r%d\" have the same format6\n   parameters, but they are not at all exchangeable, and putting one\n   in place of the other must result in a dynamic failure.\n\n   Given that:\n   - we'd have to duplicate a lot of non-trivial typing logic from type_format\n   - this wouldn't even eliminate (all) the dynamic failures\n   we decided to just reuse type_format directly for now.\n*)\nlet recast :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n  .\n     (a1, b1, c1, d1, e1, f1) fmt\n  -> (a1, b1, c1, d1, e1, f1,\n      a2, b2, c2, d2, e2, f2) fmtty_rel\n  -> (a2, b2, c2, d2, e2, f2) fmt\n= fun fmt fmtty ->\n  type_format fmt (erase_rel (symm fmtty))\n\n(******************************************************************************)\n                             (* Printing tools *)\n\n(* Add padding spaces arround a string. *)\nlet fix_padding padty width str =\n  let len = String.length str in\n  let width, padty =\n    abs width,\n    (* while literal padding widths are always non-negative,\n       dynamically-set widths (Arg_padding, eg. %*d) may be negative;\n       we interpret those as specifying a padding-to-the-left; this\n       means that '0' may get dropped even if it was explicitly set,\n       but:\n       - this is what the legacy implementation does, and\n         we preserve compatibility if possible\n       - we could only signal this issue by failing at runtime,\n         which is not very nice... *)\n    if width < 0 then Left else padty in\n  if width <= len then str else\n    let res = Bytes.make width (if padty = Zeros then '0' else ' ') in\n    begin match padty with\n    | Left  -> String.blit str 0 res 0 len\n    | Right -> String.blit str 0 res (width - len) len\n    | Zeros when len > 0 && (str.[0] = '+' || str.[0] = '-' || str.[0] = ' ') ->\n      Bytes.set res 0 str.[0];\n      String.blit str 1 res (width - len + 1) (len - 1)\n    | Zeros when len > 1 && str.[0] = '0' && (str.[1] = 'x' || str.[1] = 'X') ->\n      Bytes.set res 1 str.[1];\n      String.blit str 2 res (width - len + 2) (len - 2)\n    | Zeros ->\n      String.blit str 0 res (width - len) len\n    end;\n    Bytes.unsafe_to_string res\n\n(* Add '0' padding to int, int32, nativeint or int64 string representation. *)\nlet fix_int_precision prec str =\n  let prec = abs prec in\n  let len = String.length str in\n  match str.[0] with\n  | ('+' | '-' | ' ') as c when prec + 1 > len ->\n    let res = Bytes.make (prec + 1) '0' in\n    Bytes.set res 0 c;\n    String.blit str 1 res (prec - len + 2) (len - 1);\n    Bytes.unsafe_to_string res\n  | '0' when prec + 2 > len && len > 1 && (str.[1] = 'x' || str.[1] = 'X') ->\n    let res = Bytes.make (prec + 2) '0' in\n    Bytes.set res 1 str.[1];\n    String.blit str 2 res (prec - len + 4) (len - 2);\n    Bytes.unsafe_to_string res\n  | '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' when prec > len ->\n    let res = Bytes.make prec '0' in\n    String.blit str 0 res (prec - len) len;\n    Bytes.unsafe_to_string res\n  | _ ->\n    str\n\n(* Escape a string according to the OCaml lexing convention. *)\nlet string_to_caml_string str =\n  let str = String.escaped str in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\\"' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Generate the format_int/int32/nativeint/int64 first argument\n   from an int_conv. *)\nlet format_of_iconv = function\n  | Int_d -> \"%d\" | Int_pd -> \"%+d\" | Int_sd -> \"% d\"\n  | Int_i -> \"%i\" | Int_pi -> \"%+i\" | Int_si -> \"% i\"\n  | Int_x -> \"%x\" | Int_Cx -> \"%#x\"\n  | Int_X -> \"%X\" | Int_CX -> \"%#X\"\n  | Int_o -> \"%o\" | Int_Co -> \"%#o\"\n  | Int_u -> \"%u\"\n\nlet format_of_iconvL = function\n  | Int_d -> \"%Ld\" | Int_pd -> \"%+Ld\" | Int_sd -> \"% Ld\"\n  | Int_i -> \"%Li\" | Int_pi -> \"%+Li\" | Int_si -> \"% Li\"\n  | Int_x -> \"%Lx\" | Int_Cx -> \"%#Lx\"\n  | Int_X -> \"%LX\" | Int_CX -> \"%#LX\"\n  | Int_o -> \"%Lo\" | Int_Co -> \"%#Lo\"\n  | Int_u -> \"%Lu\"\n\nlet format_of_iconvl = function\n  | Int_d -> \"%ld\" | Int_pd -> \"%+ld\" | Int_sd -> \"% ld\"\n  | Int_i -> \"%li\" | Int_pi -> \"%+li\" | Int_si -> \"% li\"\n  | Int_x -> \"%lx\" | Int_Cx -> \"%#lx\"\n  | Int_X -> \"%lX\" | Int_CX -> \"%#lX\"\n  | Int_o -> \"%lo\" | Int_Co -> \"%#lo\"\n  | Int_u -> \"%lu\"\n\nlet format_of_iconvn = function\n  | Int_d -> \"%nd\" | Int_pd -> \"%+nd\" | Int_sd -> \"% nd\"\n  | Int_i -> \"%ni\" | Int_pi -> \"%+ni\" | Int_si -> \"% ni\"\n  | Int_x -> \"%nx\" | Int_Cx -> \"%#nx\"\n  | Int_X -> \"%nX\" | Int_CX -> \"%#nX\"\n  | Int_o -> \"%no\" | Int_Co -> \"%#no\"\n  | Int_u -> \"%nu\"\n\n(* Generate the format_float first argument form a float_conv. *)\nlet format_of_fconv fconv prec =\n  if fconv = Float_F then \"%.12g\" else\n    let prec = abs prec in\n    let symb = char_of_fconv fconv in\n    let buf = buffer_create 16 in\n    buffer_add_char buf '%';\n    bprint_fconv_flag buf fconv;\n    buffer_add_char buf '.';\n    buffer_add_string buf (string_of_int prec);\n    buffer_add_char buf symb;\n    buffer_contents buf\n\n(* Convert an integer to a string according to a conversion. *)\nlet convert_int iconv n = format_int (format_of_iconv iconv) n\nlet convert_int32 iconv n = format_int32 (format_of_iconvl iconv) n\nlet convert_nativeint iconv n = format_nativeint (format_of_iconvn iconv) n\nlet convert_int64 iconv n = format_int64 (format_of_iconvL iconv) n\n\n(* Convert a float to string. *)\n(* Fix special case of \"OCaml float format\". *)\nlet convert_float fconv prec x =\n  match fconv with\n  | Float_h | Float_ph | Float_sh | Float_H | Float_pH | Float_sH ->\n    let sign =\n      match fconv with\n      | Float_ph | Float_pH -> '+'\n      | Float_sh | Float_sH -> ' '\n      | _ -> '-' in\n    let str = hexstring_of_float x prec sign in\n    begin match fconv with\n    | Float_H | Float_pH | Float_sH -> String.uppercase_ascii str\n    | _ -> str\n    end\n  | _ ->\n    let str = format_float (format_of_fconv fconv prec) x in\n    if fconv <> Float_F then str else\n      let len = String.length str in\n      let rec is_valid i =\n        if i = len then false else\n          match str.[i] with\n          | '.' | 'e' | 'E' -> true\n          | _ -> is_valid (i + 1)\n      in\n      match classify_float x with\n      | FP_normal | FP_subnormal | FP_zero ->\n        if is_valid 0 then str else str ^ \".\"\n      | FP_infinite ->\n        if x < 0.0 then \"neg_infinity\" else \"infinity\"\n      | FP_nan -> \"nan\"\n\n(* Convert a char to a string according to the OCaml lexical convention. *)\nlet format_caml_char c =\n  let str = Char.escaped c in\n  let l = String.length str in\n  let res = Bytes.make (l + 2) '\\'' in\n  String.unsafe_blit str 0 res 1 l;\n  Bytes.unsafe_to_string res\n\n(* Convert a format type to string *)\nlet string_of_fmtty fmtty =\n  let buf = buffer_create 16 in\n  bprint_fmtty buf fmtty;\n  buffer_contents buf\n\n(******************************************************************************)\n                        (* Generic printing function *)\n\n(* Make a generic printing function. *)\n(* Used to generate Printf and Format printing functions. *)\n(* Parameters:\n     k: a continuation finally applied to the output stream and the accumulator.\n     o: the output stream (see k, %a and %t).\n     acc: rev list of printing entities (string, char, flush, formatting, ...).\n     fmt: the format. *)\nlet rec make_printf : type a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k o acc fmt -> match fmt with\n  | Char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k o new_acc rest\n  | Caml_char rest ->\n    fun c ->\n      let new_acc = Acc_data_string (acc, format_caml_char c) in\n      make_printf k o new_acc rest\n  | String (pad, rest) ->\n    make_string_padding k o acc rest pad (fun str -> str)\n  | Caml_string (pad, rest) ->\n    make_string_padding k o acc rest pad string_to_caml_string\n  | Int (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_int iconv\n  | Int32 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_int32 iconv\n  | Nativeint (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_nativeint iconv\n  | Int64 (iconv, pad, prec, rest) ->\n    make_int_padding_precision k o acc rest pad prec convert_int64 iconv\n  | Float (fconv, pad, prec, rest) ->\n    make_float_padding_precision k o acc rest pad prec fconv\n  | Bool rest ->\n    fun b -> make_printf k o (Acc_data_string (acc, string_of_bool b)) rest\n  | Alpha rest ->\n    fun f x -> make_printf k o (Acc_delay (acc, fun o -> f o x)) rest\n  | Theta rest ->\n    fun f -> make_printf k o (Acc_delay (acc, f)) rest\n  | Custom (arity, f, rest) ->\n    make_custom k o acc rest arity (f ())\n  | Reader _ ->\n    (* This case is impossible, by typing of formats. *)\n    (* Indeed, since printf and co. take a format4 as argument, the 'd and 'e\n       type parameters of fmt are obviously equals. The Reader is the\n       only constructor which touch 'd and 'e type parameters of the format\n       type, it adds an (->) to the 'd parameters. Consequently, a format4\n       cannot contain a Reader node, except in the sub-format associated to\n       an %{...%}. It's not a problem because make_printf do not call\n       itself recursively on the sub-format associated to %{...%}. *)\n    assert false\n  | Flush rest ->\n    make_printf k o (Acc_flush acc) rest\n\n  | String_literal (str, rest) ->\n    make_printf k o (Acc_string_literal (acc, str)) rest\n  | Char_literal (chr, rest) ->\n    make_printf k o (Acc_char_literal (acc, chr)) rest\n\n  | Format_arg (_, sub_fmtty, rest) ->\n    let ty = string_of_fmtty sub_fmtty in\n    (fun str ->\n      ignore str;\n      make_printf k o (Acc_data_string (acc, ty)) rest)\n  | Format_subst (_, fmtty, rest) ->\n    fun (Format (fmt, _)) -> make_printf k o acc\n      (concat_fmt (recast fmt fmtty) rest)\n\n  | Scan_char_set (_, _, rest) ->\n    let new_acc = Acc_invalid_arg (acc, \"Printf: bad conversion %[\") in\n    fun _ -> make_printf k o new_acc rest\n  | Scan_get_counter (_, rest) ->\n    (* This case should be refused for Printf. *)\n    (* Accepted for backward compatibility. *)\n    (* Interpret %l, %n and %L as %u. *)\n    fun n ->\n      let new_acc = Acc_data_string (acc, format_int \"%u\" n) in\n      make_printf k o new_acc rest\n  | Scan_next_char rest ->\n    fun c ->\n      let new_acc = Acc_data_char (acc, c) in\n      make_printf k o new_acc rest\n  | Ignored_param (ign, rest) ->\n    make_ignored_param k o acc ign rest\n\n  | Formatting_lit (fmting_lit, rest) ->\n    make_printf k o (Acc_formatting_lit (acc, fmting_lit)) rest\n  | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n    let k' koc kacc =\n      make_printf k koc (Acc_formatting_gen (acc, Acc_open_tag kacc)) rest in\n    make_printf k' o End_of_acc fmt'\n  | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n    let k' koc kacc =\n      make_printf k koc (Acc_formatting_gen (acc, Acc_open_box kacc)) rest in\n    make_printf k' o End_of_acc fmt'\n\n  | End_of_format ->\n    k o acc\n\n(* Delay the error (Invalid_argument \"Printf: bad conversion %_\"). *)\n(* Generate functions to take remaining arguments (after the \"%_\"). *)\nand make_ignored_param : type x y a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, y, x) ignored ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k o acc ign fmt -> match ign with\n  | Ignored_char                    -> make_invalid_arg k o acc fmt\n  | Ignored_caml_char               -> make_invalid_arg k o acc fmt\n  | Ignored_string _                -> make_invalid_arg k o acc fmt\n  | Ignored_caml_string _           -> make_invalid_arg k o acc fmt\n  | Ignored_int (_, _)              -> make_invalid_arg k o acc fmt\n  | Ignored_int32 (_, _)            -> make_invalid_arg k o acc fmt\n  | Ignored_nativeint (_, _)        -> make_invalid_arg k o acc fmt\n  | Ignored_int64 (_, _)            -> make_invalid_arg k o acc fmt\n  | Ignored_float (_, _)            -> make_invalid_arg k o acc fmt\n  | Ignored_bool                    -> make_invalid_arg k o acc fmt\n  | Ignored_format_arg _            -> make_invalid_arg k o acc fmt\n  | Ignored_format_subst (_, fmtty) -> make_from_fmtty k o acc fmtty fmt\n  | Ignored_reader                  -> assert false\n  | Ignored_scan_char_set _         -> make_invalid_arg k o acc fmt\n  | Ignored_scan_get_counter _      -> make_invalid_arg k o acc fmt\n  | Ignored_scan_next_char          -> make_invalid_arg k o acc fmt\n\n\n(* Special case of printf \"%_(\". *)\nand make_from_fmtty : type x y a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, y, x) fmtty ->\n    (x, b, c, y, e, f) fmt -> a =\nfun k o acc fmtty fmt -> match fmtty with\n  | Char_ty rest            -> fun _ -> make_from_fmtty k o acc rest fmt\n  | String_ty rest          -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Int_ty rest             -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Int32_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Nativeint_ty rest       -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Int64_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Float_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Bool_ty rest            -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Alpha_ty rest           -> fun _ _ -> make_from_fmtty k o acc rest fmt\n  | Theta_ty rest           -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Any_ty rest             -> fun _ -> make_from_fmtty k o acc rest fmt\n  | Reader_ty _             -> assert false\n  | Ignored_reader_ty _     -> assert false\n  | Format_arg_ty (_, rest) -> fun _ -> make_from_fmtty k o acc rest fmt\n  | End_of_fmtty            -> make_invalid_arg k o acc fmt\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let ty = trans (symm ty1) ty2 in\n    fun _ -> make_from_fmtty k o acc (concat_fmtty ty rest) fmt\n\n(* Insert an Acc_invalid_arg in the accumulator and continue to generate\n   closures to get the remaining arguments. *)\nand make_invalid_arg : type a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt -> a =\nfun k o acc fmt ->\n  make_printf k o (Acc_invalid_arg (acc, \"Printf: bad conversion %_\")) fmt\n\n(* Fix padding, take it as an extra integer argument if needed. *)\nand make_string_padding : type x z a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, z -> a) padding -> (z -> string) -> x =\n  fun k o acc fmt pad trans -> match pad with\n  | No_padding ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, trans x) in\n      make_printf k o new_acc fmt\n  | Lit_padding (padty, width) ->\n    fun x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty width (trans x)) in\n      make_printf k o new_acc fmt\n  | Arg_padding padty ->\n    fun w x ->\n      let new_acc = Acc_data_string (acc, fix_padding padty w (trans x)) in\n      make_printf k o new_acc fmt\n\n(* Fix padding and precision for int, int32, nativeint or int64. *)\n(* Take one or two extra integer arguments if needed. *)\nand make_int_padding_precision : type x y z a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, z -> a) precision -> (int_conv -> z -> string) ->\n    int_conv -> x =\n  fun k o acc fmt pad prec trans iconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = trans iconv x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = fix_int_precision p (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = fix_padding padty w (trans iconv x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (fix_int_precision p (trans iconv x)) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n\n(* Convert a float, fix padding and precision if needed. *)\n(* Take the float argument and one or two extra integer arguments if needed. *)\nand make_float_padding_precision : type x y a b c d e f .\n    (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n    (a, b, c, d, e, f) fmt ->\n    (x, y) padding -> (y, float -> a) precision -> float_conv -> x =\n  fun k o acc fmt pad prec fconv -> match pad, prec with\n  | No_padding, No_precision ->\n    fun x ->\n      let str = convert_float fconv default_float_precision x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Lit_precision p ->\n    fun x ->\n      let str = convert_float fconv p x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | No_padding, Arg_precision ->\n    fun p x ->\n      let str = convert_float fconv p x in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), No_precision ->\n    fun x ->\n      let str = convert_float fconv default_float_precision x in\n      let str' = fix_padding padty w str in\n      make_printf k o (Acc_data_string (acc, str')) fmt\n  | Lit_padding (padty, w), Lit_precision p ->\n    fun x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Lit_padding (padty, w), Arg_precision ->\n    fun p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, No_precision ->\n    fun w x ->\n      let str = convert_float fconv default_float_precision x in\n      let str' = fix_padding padty w str in\n      make_printf k o (Acc_data_string (acc, str')) fmt\n  | Arg_padding padty, Lit_precision p ->\n    fun w x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\n  | Arg_padding padty, Arg_precision ->\n    fun w p x ->\n      let str = fix_padding padty w (convert_float fconv p x) in\n      make_printf k o (Acc_data_string (acc, str)) fmt\nand make_custom : type x y a b c d e f .\n  (b -> (b, c) acc -> f) -> b -> (b, c) acc ->\n  (a, b, c, d, e, f) fmt ->\n  (a, x, y) custom_arity -> x -> y =\n  fun k o acc rest arity f -> match arity with\n  | Custom_zero -> make_printf k o (Acc_data_string (acc, f)) rest\n  | Custom_succ arity ->\n    fun x ->\n      make_custom k o acc rest arity (f x)\n\nlet const x _ = x\n\nlet rec make_iprintf : type a b c d e f.\n  (b -> f) -> b -> (a, b, c, d, e, f) fmt -> a =\n  fun k o fmt -> match fmt with\n    | Char rest ->\n        const (make_iprintf k o rest)\n    | Caml_char rest ->\n        const (make_iprintf k o rest)\n    | String (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | String (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | String (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Caml_string (No_padding, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Lit_padding _, rest) ->\n        const (make_iprintf k o rest)\n    | Caml_string (Arg_padding _, rest) ->\n        const (const (make_iprintf k o rest))\n    | Int (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int32 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Nativeint (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Int64 (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Float (_, pad, prec, rest) ->\n        fn_of_padding_precision k o rest pad prec\n    | Bool rest ->\n        const (make_iprintf k o rest)\n    | Alpha rest ->\n        const (const (make_iprintf k o rest))\n    | Theta rest ->\n        const (make_iprintf k o rest)\n    | Custom (arity, _, rest) ->\n        fn_of_custom_arity k o rest arity\n    | Reader _ ->\n        (* This case is impossible, by typing of formats.  See the\n           note in the corresponding case for make_printf. *)\n        assert false\n    | Flush rest ->\n        make_iprintf k o rest\n    | String_literal (_, rest) ->\n        make_iprintf k o rest\n    | Char_literal (_, rest) ->\n        make_iprintf k o rest\n    | Format_arg (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Format_subst (_, fmtty, rest) ->\n        fun (Format (fmt, _)) ->\n          make_iprintf k o\n            (concat_fmt (recast fmt fmtty) rest)\n    | Scan_char_set (_, _, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_get_counter (_, rest) ->\n        const (make_iprintf k o rest)\n    | Scan_next_char rest ->\n        const (make_iprintf k o rest)\n    | Ignored_param (ign, rest) ->\n        make_ignored_param (fun x _ -> k x) o (End_of_acc) ign rest\n    | Formatting_lit (_, rest) ->\n        make_iprintf k o rest\n    | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n        make_iprintf (fun koc -> make_iprintf k koc rest) o fmt'\n    | End_of_format ->\n        k o\nand fn_of_padding_precision :\n  type x y z a b c d e f.\n  (b -> f) -> b -> (a, b, c, d, e, f) fmt ->\n  (x, y) padding -> (y, z -> a) precision -> x =\n  fun k o fmt pad prec -> match pad, prec with\n    | No_padding   , No_precision    ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | No_padding   , Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Lit_padding _, No_precision    ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Lit_precision _ ->\n        const (make_iprintf k o fmt)\n    | Lit_padding _, Arg_precision   ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, No_precision    ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Lit_precision _ ->\n        const (const (make_iprintf k o fmt))\n    | Arg_padding _, Arg_precision   ->\n        const (const (const (make_iprintf k o fmt)))\nand fn_of_custom_arity : type x y a b c d e f .\n  (b -> f) -> b -> (a, b, c, d, e, f) fmt -> (a, x, y) custom_arity -> y =\n  fun k o fmt -> function\n    | Custom_zero ->\n        make_iprintf k o fmt\n    | Custom_succ arity ->\n        const (fn_of_custom_arity k o fmt arity)\n\n(******************************************************************************)\n                          (* Continuations for make_printf *)\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in an output_stream. *)\n(* Used as a continuation of make_printf. *)\nlet rec output_acc o acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    output_acc o p; output_string o s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    output_acc o p; output_string o \"@{\"; output_acc o acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    output_acc o p; output_string o \"@[\"; output_acc o acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> output_acc o p; output_string o s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> output_acc o p; output_char o c\n  | Acc_delay (p, f)         -> output_acc o p; f o\n  | Acc_flush p              -> output_acc o p; flush o\n  | Acc_invalid_arg (p, msg) -> output_acc o p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Used as a continuation of make_printf. *)\nlet rec bufput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    bufput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    bufput_acc b p; Buffer.add_string b \"@{\"; bufput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    bufput_acc b p; Buffer.add_string b \"@[\"; bufput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> bufput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> bufput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> bufput_acc b p; f b\n  | Acc_flush p              -> bufput_acc b p;\n  | Acc_invalid_arg (p, msg) -> bufput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Differ from bufput_acc by the interpretation of %a and %t. *)\n(* Used as a continuation of make_printf. *)\nlet rec strput_acc b acc = match acc with\n  | Acc_formatting_lit (p, fmting_lit) ->\n    let s = string_of_formatting_lit fmting_lit in\n    strput_acc b p; Buffer.add_string b s;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    strput_acc b p; Buffer.add_string b \"@{\"; strput_acc b acc';\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    strput_acc b p; Buffer.add_string b \"@[\"; strput_acc b acc';\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> strput_acc b p; Buffer.add_string b s\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> strput_acc b p; Buffer.add_char b c\n  | Acc_delay (p, f)         -> strput_acc b p; Buffer.add_string b (f ())\n  | Acc_flush p              -> strput_acc b p;\n  | Acc_invalid_arg (p, msg) -> strput_acc b p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(******************************************************************************)\n                          (* Error managment *)\n\n(* Raise a Failure with a pretty-printed error message. *)\nlet failwith_message (Format (fmt, _)) =\n  let buf = Buffer.create 256 in\n  let k () acc = strput_acc buf acc; failwith (Buffer.contents buf) in\n  make_printf k () End_of_acc fmt\n\n(******************************************************************************)\n                            (* Formatting tools *)\n\n(* Convert a string to an open block description (indent, block_type) *)\nlet open_box_of_string str =\n  if str = \"\" then (0, Pp_box) else\n    let len = String.length str in\n    let invalid_box () = failwith_message \"invalid box description %S\" str in\n    let rec parse_spaces i =\n      if i = len then i else\n        match str.[i] with\n        | ' ' | '\\t' -> parse_spaces (i + 1)\n        | _ -> i\n    and parse_lword i j =\n      if j = len then j else\n        match str.[j] with\n        | 'a' .. 'z' -> parse_lword i (j + 1)\n        | _ -> j\n    and parse_int i j =\n      if j = len then j else\n        match str.[j] with\n        | '0' .. '9' | '-' -> parse_int i (j + 1)\n        | _ -> j in\n    let wstart = parse_spaces 0 in\n    let wend = parse_lword wstart wstart in\n    let box_name = String.sub str wstart (wend - wstart) in\n    let nstart = parse_spaces wend in\n    let nend = parse_int nstart nstart in\n    let indent =\n      if nstart = nend then 0 else\n        try int_of_string (String.sub str nstart (nend - nstart))\n        with Failure _ -> invalid_box () in\n    let exp_end = parse_spaces nend in\n    if exp_end <> len then invalid_box ();\n    let box_type = match box_name with\n      | \"\" | \"b\" -> Pp_box\n      | \"h\"      -> Pp_hbox\n      | \"v\"      -> Pp_vbox\n      | \"hv\"     -> Pp_hvbox\n      | \"hov\"    -> Pp_hovbox\n      | _        -> invalid_box () in\n    (indent, box_type)\n\n(******************************************************************************)\n                            (* Parsing tools *)\n\n(* Create a padding_fmt_ebb from a padding and a format. *)\n(* Copy the padding to disjoin the type parameters of argument and result. *)\nlet make_padding_fmt_ebb : type x y .\n    (x, y) padding -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) padding_fmt_ebb =\nfun pad fmt -> match pad with\n  | No_padding         -> Padding_fmt_EBB (No_padding, fmt)\n  | Lit_padding (s, w) -> Padding_fmt_EBB (Lit_padding (s, w), fmt)\n  | Arg_padding s      -> Padding_fmt_EBB (Arg_padding s, fmt)\n\n(* Create a precision_fmt_ebb from a precision and a format. *)\n(* Copy the precision to disjoin the type parameters of argument and result. *)\nlet make_precision_fmt_ebb : type x y .\n    (x, y) precision -> (_, _, _, _, _, _) fmt ->\n      (_, _, _, _, _) precision_fmt_ebb =\nfun prec fmt -> match prec with\n  | No_precision    -> Precision_fmt_EBB (No_precision, fmt)\n  | Lit_precision p -> Precision_fmt_EBB (Lit_precision p, fmt)\n  | Arg_precision   -> Precision_fmt_EBB (Arg_precision, fmt)\n\n(* Create a padprec_fmt_ebb forma a padding, a precision and a format. *)\n(* Copy the padding and the precision to disjoin type parameters of arguments\n   and result. *)\nlet make_padprec_fmt_ebb : type x y z t .\n    (x, y) padding -> (z, t) precision ->\n    (_, _, _, _, _, _) fmt ->\n    (_, _, _, _, _) padprec_fmt_ebb =\nfun pad prec fmt ->\n  let Precision_fmt_EBB (prec, fmt') = make_precision_fmt_ebb prec fmt in\n  match pad with\n  | No_padding         -> Padprec_fmt_EBB (No_padding, prec, fmt')\n  | Lit_padding (s, w) -> Padprec_fmt_EBB (Lit_padding (s, w), prec, fmt')\n  | Arg_padding s      -> Padprec_fmt_EBB (Arg_padding s, prec, fmt')\n\n(******************************************************************************)\n                             (* Format parsing *)\n\n(* Parse a string representing a format and create a fmt_ebb. *)\n(* Raise an Failure exception in case of invalid format. *)\nlet fmt_ebb_of_string ?legacy_behavior str =\n  (* Parameters naming convention:                                    *)\n  (*   - lit_start: start of the literal sequence.                    *)\n  (*   - str_ind: current index in the string.                        *)\n  (*   - end_ind: end of the current (sub-)format.                    *)\n  (*   - pct_ind: index of the '%' in the current micro-format.       *)\n  (*   - zero:  is the '0' flag defined in the current micro-format.  *)\n  (*   - minus: is the '-' flag defined in the current micro-format.  *)\n  (*   - plus:  is the '+' flag defined in the current micro-format.  *)\n  (*   - hash:  is the '#' flag defined in the current micro-format.  *)\n  (*   - space: is the ' ' flag defined in the current micro-format.  *)\n  (*   - ign:   is the '_' flag defined in the current micro-format.  *)\n  (*   - pad: padding of the current micro-format.                    *)\n  (*   - prec: precision of the current micro-format.                 *)\n  (*   - symb: char representing the conversion ('c', 's', 'd', ...). *)\n  (*   - char_set: set of characters as bitmap (see scanf %[...]).    *)\n\n  let legacy_behavior = match legacy_behavior with\n    | Some flag -> flag\n    | None -> true\n  (*  When this flag is enabled, the format parser tries to behave as\n      the <4.02 implementations, in particular it ignores most benine\n      nonsensical format. When the flag is disabled, it will reject any\n      format that is not accepted by the specification.\n\n      A typical example would be \"%+ d\": specifying both '+' (if the\n      number is positive, pad with a '+' to get the same width as\n      negative numbres) and ' ' (if the number is positive, pad with\n      a space) does not make sense, but the legacy (< 4.02)\n      implementation was happy to just ignore the space.\n  *)\n  in\n\n  (* Raise a Failure with a friendly error message. *)\n  let invalid_format_message str_ind msg =\n    failwith_message\n      \"invalid format %S: at character number %d, %s\"\n      str str_ind msg;\n  in\n\n  (* Used when the end of the format (or the current sub-format) was encoutered\n      unexpectedly. *)\n  let unexpected_end_of_format end_ind =\n    invalid_format_message end_ind\n      \"unexpected end of format\"\n  in\n\n  (* Used for %0c: no other widths are implemented *)\n  let invalid_nonnull_char_width str_ind =\n    invalid_format_message str_ind\n      \"non-zero widths are unsupported for %c conversions\"\n  in\n  (* Raise Failure with a friendly error message about an option dependencie\n     problem. *)\n  let invalid_format_without str_ind c s =\n    failwith_message\n      \"invalid format %S: at character number %d, '%c' without %s\"\n      str str_ind c s\n  in\n\n  (* Raise Failure with a friendly error message about an unexpected\n     character. *)\n  let expected_character str_ind expected read =\n    failwith_message\n     \"invalid format %S: at character number %d, %s expected, read %C\"\n      str str_ind expected read\n  in\n\n  (* Parse the string from beg_ind (included) to end_ind (excluded). *)\n  let rec parse : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun beg_ind end_ind -> parse_literal beg_ind beg_ind end_ind\n\n  (* Read literal characters up to '%' or '@' special characters. *)\n  and parse_literal : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind end_ind ->\n    if str_ind = end_ind then add_literal lit_start str_ind End_of_format else\n      match str.[str_ind] with\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse_format str_ind end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse_after_at (str_ind + 1) end_ind in\n        add_literal lit_start str_ind fmt_rest\n      | _ ->\n        parse_literal lit_start (str_ind + 1) end_ind\n\n  (* Parse a format after '%' *)\n  and parse_format : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind end_ind -> parse_ign pct_ind (pct_ind + 1) end_ind\n\n  and parse_ign : type e f . int -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n      | '_' -> parse_flags pct_ind (str_ind+1) end_ind true\n      | _ -> parse_flags pct_ind str_ind end_ind false\n\n  and parse_flags : type e f . int -> int -> int -> bool -> (_, _, e, f) fmt_ebb\n  =\n  fun pct_ind str_ind end_ind ign ->\n    let zero = ref false and minus = ref false\n    and plus = ref false and space = ref false\n    and hash = ref false in\n    let set_flag str_ind flag =\n      (* in legacy mode, duplicate flags are accepted *)\n      if !flag && not legacy_behavior then\n        failwith_message\n          \"invalid format %S: at character number %d, duplicate flag %C\"\n          str str_ind str.[str_ind];\n      flag := true;\n    in\n    let rec read_flags str_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      begin match str.[str_ind] with\n      | '0' -> set_flag str_ind zero;  read_flags (str_ind + 1)\n      | '-' -> set_flag str_ind minus; read_flags (str_ind + 1)\n      | '+' -> set_flag str_ind plus;  read_flags (str_ind + 1)\n      | '#' -> set_flag str_ind hash; read_flags (str_ind + 1)\n      | ' ' -> set_flag str_ind space; read_flags (str_ind + 1)\n      | _ ->\n        parse_padding pct_ind str_ind end_ind\n          !zero !minus !plus !hash !space ign\n      end\n    in\n    read_flags str_ind\n\n  (* Try to read a digital or a '*' padding. *)\n  and parse_padding : type e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool -> bool ->\n        (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind zero minus plus hash space ign ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let padty = match zero, minus with\n      | false, false -> Right\n      | false, true  -> Left\n      |  true, false -> Zeros\n      |  true, true  ->\n        if legacy_behavior then Left\n        else incompatible_flag pct_ind str_ind '-' \"0\" in\n    match str.[str_ind] with\n    | '0' .. '9' ->\n      let new_ind, width = parse_positive str_ind end_ind 0 in\n      parse_after_padding pct_ind new_ind end_ind minus plus hash space ign\n        (Lit_padding (padty, width))\n    | '*' ->\n      parse_after_padding pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign (Arg_padding padty)\n    | _ ->\n      begin match padty with\n      | Left  ->\n        if not legacy_behavior then\n          invalid_format_without (str_ind - 1) '-' \"padding\";\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      | Zeros ->\n         (* a '0' padding indication not followed by anything should\n           be interpreted as a Right padding of width 0. This is used\n           by scanning conversions %0s and %0c *)\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          (Lit_padding (Right, 0))\n      | Right ->\n        parse_after_padding pct_ind str_ind end_ind minus plus hash space ign\n          No_padding\n      end\n\n  (* Is precision defined? *)\n  and parse_after_padding : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '.' ->\n      parse_precision pct_ind (str_ind + 1) end_ind minus plus hash space ign\n        pad\n    | symb ->\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        No_precision pad symb\n\n  (* Read the digital or '*' precision. *)\n  and parse_precision : type x e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, _) padding -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_literal minus str_ind =\n      let new_ind, prec = parse_positive str_ind end_ind 0 in\n      parse_after_precision pct_ind new_ind end_ind minus plus hash space ign\n        pad (Lit_precision prec) in\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_literal minus str_ind\n    | ('+' | '-') as symb when legacy_behavior ->\n      (* Legacy mode would accept and ignore '+' or '-' before the\n         integer describing the desired precision; not that this\n         cannot happen for padding width, as '+' and '-' already have\n         a semantics there.\n\n         That said, the idea (supported by this tweak) that width and\n         precision literals are \"integer literals\" in the OCaml sense is\n         still blatantly wrong, as 123_456 or 0xFF are rejected. *)\n      parse_literal (minus || symb = '-') (str_ind + 1)\n    | '*' ->\n      parse_after_precision pct_ind (str_ind + 1) end_ind minus plus hash space\n        ign pad Arg_precision\n    | _ ->\n      if legacy_behavior then\n        (* note that legacy implementation did not ignore '.' without\n           a number (as it does for padding indications), but\n           interprets it as '.0' *)\n        parse_after_precision pct_ind str_ind end_ind minus plus hash space ign\n          pad (Lit_precision 0)\n      else\n        invalid_format_without (str_ind - 1) '.' \"precision\"\n\n  (* Try to read the conversion. *)\n  and parse_after_precision : type x y z t e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> bool ->\n        (x, y) padding -> (z, t) precision -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind minus plus hash space ign pad prec ->\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    let parse_conv (type u) (type v) (padprec : (u, v) padding) =\n      parse_conversion pct_ind (str_ind + 1) end_ind plus hash space ign pad\n        prec padprec str.[str_ind] in\n    (* in legacy mode, some formats (%s and %S) accept a weird mix of\n       padding and precision, which is merged as a single padding\n       information. For example, in %.10s the precision is implicitly\n       understood as padding %10s, but the left-padding component may\n       be specified either as a left padding or a negative precision:\n       %-.3s and %.-3s are equivalent to %-3s *)\n    match pad with\n    | No_padding -> (\n      match minus, prec with\n        | _, No_precision -> parse_conv No_padding\n        | false, Lit_precision n -> parse_conv (Lit_padding (Right, n))\n        | true, Lit_precision n -> parse_conv (Lit_padding (Left, n))\n        | false, Arg_precision -> parse_conv (Arg_padding Right)\n        | true, Arg_precision -> parse_conv (Arg_padding Left)\n    )\n    | pad -> parse_conv pad\n\n  (* Case analysis on conversion. *)\n  and parse_conversion : type x y z t u v e f .\n      int -> int -> int -> bool -> bool -> bool -> bool -> (x, y) padding ->\n        (z, t) precision -> (u, v) padding -> char -> (_, _, e, f) fmt_ebb =\n  fun pct_ind str_ind end_ind plus hash space ign pad prec padprec symb ->\n    (* Flags used to check option usages/compatibilities. *)\n    let plus_used  = ref false and hash_used = ref false\n    and space_used = ref false and ign_used   = ref false\n    and pad_used   = ref false and prec_used  = ref false in\n\n    (* Access to options, update flags. *)\n    let get_plus    () = plus_used  := true; plus\n    and get_hash   () = hash_used := true; hash\n    and get_space   () = space_used := true; space\n    and get_ign     () = ign_used   := true; ign\n    and get_pad     () = pad_used   := true; pad\n    and get_prec    () = prec_used  := true; prec\n    and get_padprec () = pad_used   := true; padprec in\n\n    let get_int_pad () =\n      (* %5.3d is accepted and meaningful: pad to length 5 with\n         spaces, but first pad with zeros upto length 3 (0-padding\n         is the interpretation of \"precision\" for integer formats).\n\n         %05.3d is redundant: pad to length 5 *with zeros*, but\n         first pad with zeros... To add insult to the injury, the\n         legacy implementation ignores the 0-padding indication and\n         does the 5 padding with spaces instead. We reuse this\n         interpretation for compatiblity, but statically reject this\n         format when the legacy mode is disabled, to protect strict\n         users from this corner case. *)\n       match get_pad (), get_prec () with\n         | pad, No_precision -> pad\n         | No_padding, _     -> No_padding\n         | Lit_padding (Zeros, n), _ ->\n           if legacy_behavior then Lit_padding (Right, n)\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Arg_padding Zeros, _ ->\n           if legacy_behavior then Arg_padding Right\n           else incompatible_flag pct_ind str_ind '0' \"precision\"\n         | Lit_padding _ as pad, _ -> pad\n         | Arg_padding _ as pad, _ -> pad in\n\n    (* Check that padty <> Zeros. *)\n    let check_no_0 symb (type a) (type b) (pad : (a, b) padding) =\n      match pad with\n      | No_padding -> pad\n      | Lit_padding ((Left | Right), _) -> pad\n      | Arg_padding (Left | Right) -> pad\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Lit_padding (Right, width)\n        else incompatible_flag pct_ind str_ind symb \"0\"\n      | Arg_padding Zeros ->\n        if legacy_behavior then Arg_padding Right\n        else incompatible_flag pct_ind str_ind symb \"0\"\n    in\n\n    (* Get padding as a pad_option (see \"%_\", \"%{\", \"%(\" and \"%[\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let opt_of_pad c (type a) (type b) (pad : (a, b) padding) = match pad with\n      | No_padding -> None\n      | Lit_padding (Right, width) -> Some width\n      | Lit_padding (Zeros, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'0'\"\n      | Lit_padding (Left, width) ->\n        if legacy_behavior then Some width\n        else incompatible_flag pct_ind str_ind c \"'-'\"\n      | Arg_padding _ -> incompatible_flag pct_ind str_ind c \"'*'\"\n    in\n    let get_pad_opt c = opt_of_pad c (get_pad ()) in\n    let get_padprec_opt c = opt_of_pad c (get_padprec ()) in\n\n    (* Get precision as a prec_option (see \"%_f\").\n       (no need for legacy mode tweaking, those were rejected by the\n       legacy parser as well) *)\n    let get_prec_opt () = match get_prec () with\n      | No_precision       -> None\n      | Lit_precision ndec -> Some ndec\n      | Arg_precision      -> incompatible_flag pct_ind str_ind '_' \"'*'\"\n    in\n\n    let fmt_result = match symb with\n    | ',' ->\n      parse str_ind end_ind\n    | 'c' ->\n      let char_format fmt_rest = (* %c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_char, fmt_rest))\n        else Fmt_EBB (Char fmt_rest)\n      in\n      let scan_format fmt_rest = (* %0c *)\n        if get_ign ()\n        then Fmt_EBB (Ignored_param (Ignored_scan_next_char, fmt_rest))\n        else Fmt_EBB (Scan_next_char fmt_rest)\n      in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      begin match get_pad_opt 'c' with\n        | None -> char_format fmt_rest\n        | Some 0 -> scan_format fmt_rest\n        | Some _n ->\n           if not legacy_behavior\n           then invalid_nonnull_char_width str_ind\n           else (* legacy ignores %c widths *) char_format fmt_rest\n      end\n    | 'C' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_caml_char,fmt_rest))\n      else Fmt_EBB (Caml_char fmt_rest)\n    | 's' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (String (pad', fmt_rest'))\n    | 'S' ->\n      let pad = check_no_0 symb (get_padprec ()) in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_caml_string (get_padprec_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padding_fmt_EBB (pad', fmt_rest') =\n          make_padding_fmt_ebb pad fmt_rest in\n        Fmt_EBB (Caml_string (pad', fmt_rest'))\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' ->\n      let iconv = compute_int_conv pct_ind str_ind (get_plus ()) (get_hash ())\n        (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_int (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int (iconv, pad', prec', fmt_rest'))\n    | 'N' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = Token_counter in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' | 'n' | 'L' when str_ind=end_ind || not (is_int_base str.[str_ind]) ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let counter = counter_of_char symb in\n      if get_ign () then\n        let ignored = Ignored_scan_get_counter counter in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_get_counter (counter, fmt_rest))\n    | 'l' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int32 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int32 (iconv, pad', prec', fmt_rest'))\n    | 'n' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ())\n          (get_hash ()) (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_nativeint (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Nativeint (iconv, pad', prec', fmt_rest'))\n    | 'L' ->\n      let iconv =\n        compute_int_conv pct_ind (str_ind + 1) (get_plus ()) (get_hash ())\n          (get_space ()) str.[str_ind] in\n      let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n      if get_ign () then\n        let ignored = Ignored_int64 (iconv, get_pad_opt '_') in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_int_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Int64 (iconv, pad', prec', fmt_rest'))\n    | 'f' | 'e' | 'E' | 'g' | 'G' | 'F' | 'h' | 'H' ->\n      let fconv = compute_float_conv pct_ind str_ind (get_plus ())\n        (get_space ()) symb in\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_float (get_pad_opt '_', get_prec_opt ()) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        let Padprec_fmt_EBB (pad', prec', fmt_rest') =\n          make_padprec_fmt_ebb (get_pad ()) (get_prec ()) fmt_rest in\n        Fmt_EBB (Float (fconv, pad', prec', fmt_rest'))\n    | 'b' | 'B' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_bool, fmt_rest))\n      else Fmt_EBB (Bool fmt_rest)\n    | 'a' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Alpha fmt_rest)\n    | 't' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Theta fmt_rest)\n    | 'r' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      if get_ign () then Fmt_EBB (Ignored_param (Ignored_reader, fmt_rest))\n      else Fmt_EBB (Reader fmt_rest)\n    | '!' ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Flush fmt_rest)\n    | ('%' | '@') as c ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Char_literal (c, fmt_rest))\n    | '{' ->\n      let sub_end = search_subformat_end str_ind end_ind '}' in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_arg (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_arg (get_pad_opt '{', sub_fmtty, fmt_rest))\n    | '(' ->\n      let sub_end = search_subformat_end str_ind end_ind ')' in\n      let Fmt_EBB fmt_rest = parse (sub_end + 2) end_ind in\n      let Fmt_EBB sub_fmt = parse str_ind sub_end in\n      let sub_fmtty = fmtty_of_fmt sub_fmt in\n      if get_ign () then\n        let ignored = Ignored_format_subst (get_pad_opt '_', sub_fmtty) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Format_subst (get_pad_opt '(', sub_fmtty, fmt_rest))\n    | '[' ->\n      let next_ind, char_set = parse_char_set str_ind end_ind in\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      if get_ign () then\n        let ignored = Ignored_scan_char_set (get_pad_opt '_', char_set) in\n        Fmt_EBB (Ignored_param (ignored, fmt_rest))\n      else\n        Fmt_EBB (Scan_char_set (get_pad_opt '[', char_set, fmt_rest))\n    | '-' | '+' | '#' | ' ' | '_' ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         flag %C is only allowed after the '%%', before padding and precision\"\n        str pct_ind symb\n    | _ ->\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         invalid conversion \\\"%%%c\\\"\" str (str_ind - 1) symb\n    in\n    (* Check for unused options, and reject them as incompatible.\n\n       Such checks need to be disabled in legacy mode, as the legacy\n       parser silently ignored incompatible flags. *)\n    if not legacy_behavior then begin\n    if not !plus_used && plus then\n      incompatible_flag pct_ind str_ind symb \"'+'\";\n    if not !hash_used && hash then\n      incompatible_flag pct_ind str_ind symb \"'#'\";\n    if not !space_used && space then\n      incompatible_flag pct_ind str_ind symb \"' '\";\n    if not !pad_used  && Padding_EBB pad <> Padding_EBB No_padding then\n      incompatible_flag pct_ind str_ind symb \"`padding'\";\n    if not !prec_used && Precision_EBB prec <> Precision_EBB No_precision then\n      incompatible_flag pct_ind str_ind (if ign then '_' else symb)\n        \"`precision'\";\n    if ign && plus then incompatible_flag pct_ind str_ind '_' \"'+'\";\n    end;\n    (* this last test must not be disabled in legacy mode,\n       as ignoring it would typically result in a different typing\n       than what the legacy parser used *)\n    if not !ign_used && ign then\n      begin match symb with\n        (* argument-less formats can safely be ignored in legacy mode *)\n        | ('@' | '%' | '!' | ',') when legacy_behavior -> ()\n        | _ ->\n          incompatible_flag pct_ind str_ind symb \"'_'\"\n      end;\n    fmt_result\n\n  (* Parse formatting informations (after '@'). *)\n  and parse_after_at : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    if str_ind = end_ind then Fmt_EBB (Char_literal ('@', End_of_format))\n    else\n      match str.[str_ind] with\n      | '[' ->\n        parse_tag false (str_ind + 1) end_ind\n      | ']' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_box, fmt_rest))\n      | '{' ->\n        parse_tag true (str_ind + 1) end_ind\n      | '}' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Close_tag, fmt_rest))\n      | ',' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@,\", 0, 0), fmt_rest))\n      | ' ' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Break (\"@ \", 1, 0), fmt_rest))\n      | ';' ->\n        parse_good_break (str_ind + 1) end_ind\n      | '?' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (FFlush, fmt_rest))\n      | '\\n' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Force_newline, fmt_rest))\n      | '.' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Flush_newline, fmt_rest))\n      | '<' ->\n        parse_magic_size (str_ind + 1) end_ind\n      | '@' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_at, fmt_rest))\n      | '%' when str_ind + 1 < end_ind && str.[str_ind + 1] = '%' ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 2) end_ind in\n        Fmt_EBB (Formatting_lit (Escaped_percent, fmt_rest))\n      | '%' ->\n        let Fmt_EBB fmt_rest = parse str_ind end_ind in\n        Fmt_EBB (Char_literal ('@', fmt_rest))\n      | c ->\n        let Fmt_EBB fmt_rest = parse (str_ind + 1) end_ind in\n        Fmt_EBB (Formatting_lit (Scan_indic c, fmt_rest))\n\n  and check_open_box : type a b c d e f . (a, b, c, d, e, f) fmt -> unit =\n  fun fmt -> match fmt with\n    | String_literal (str, End_of_format) -> (\n      try ignore (open_box_of_string str) with Failure _ ->\n        ((* Emit warning: invalid open box *))\n    )\n    | _ -> ()\n\n  (* Try to read the optionnal <name> after \"@{\" or \"@[\". *)\n  and parse_tag : type e f . bool -> int -> int -> (_, _, e, f) fmt_ebb =\n  fun is_open_tag str_ind end_ind ->\n    try\n      if str_ind = end_ind then raise Not_found;\n      match str.[str_ind] with\n      | '<' ->\n        let ind = String.index_from str (str_ind + 1) '>' in\n        if ind >= end_ind then raise Not_found;\n        let sub_str = String.sub str str_ind (ind - str_ind + 1) in\n        let Fmt_EBB fmt_rest = parse (ind + 1) end_ind in\n        let Fmt_EBB sub_fmt = parse str_ind (ind + 1) in\n        let sub_format = Format (sub_fmt, sub_str) in\n        let formatting = if is_open_tag then Open_tag sub_format else (\n          check_open_box sub_fmt;\n          Open_box sub_format) in\n        Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n      | _ ->\n        raise Not_found\n    with Not_found ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      let sub_format = Format (End_of_format, \"\") in\n      let formatting =\n        if is_open_tag then Open_tag sub_format else Open_box sub_format in\n      Fmt_EBB (Formatting_gen (formatting, fmt_rest))\n\n  (* Try to read the optionnal <width offset> after \"@;\". *)\n  and parse_good_break : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    let next_ind, formatting_lit =\n      try\n        if str_ind = end_ind || str.[str_ind] <> '<' then raise Not_found;\n        let str_ind_1 = parse_spaces (str_ind + 1) end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' -> (\n          let str_ind_2, width = parse_integer str_ind_1 end_ind in\n            let str_ind_3 = parse_spaces str_ind_2 end_ind in\n            match str.[str_ind_3] with\n              | '>' ->\n                let s = String.sub str (str_ind-2) (str_ind_3-str_ind+3) in\n                str_ind_3 + 1, Break (s, width, 0)\n              | '0' .. '9' | '-' ->\n                let str_ind_4, offset = parse_integer str_ind_3 end_ind in\n                let str_ind_5 = parse_spaces str_ind_4 end_ind in\n                if str.[str_ind_5] <> '>' then raise Not_found;\n                let s = String.sub str (str_ind-2) (str_ind_5-str_ind+3) in\n                str_ind_5 + 1, Break (s, width, offset)\n              | _ -> raise Not_found\n        )\n        | _ -> raise Not_found\n      with Not_found | Failure _ ->\n        str_ind, Break (\"@;\", 1, 0)\n    in\n    let Fmt_EBB fmt_rest = parse next_ind end_ind in\n    Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n\n  (* Parse the size in a <n>. *)\n  and parse_magic_size : type e f . int -> int -> (_, _, e, f) fmt_ebb =\n  fun str_ind end_ind ->\n    match\n      try\n        let str_ind_1 = parse_spaces str_ind end_ind in\n        match str.[str_ind_1] with\n        | '0' .. '9' | '-' ->\n          let str_ind_2, size = parse_integer str_ind_1 end_ind in\n          let str_ind_3 = parse_spaces str_ind_2 end_ind in\n          if str.[str_ind_3] <> '>' then raise Not_found;\n          let s = String.sub str (str_ind - 2) (str_ind_3 - str_ind + 3) in\n          Some (str_ind_3 + 1, Magic_size (s, size))\n        | _ -> None\n      with Not_found | Failure _ ->\n        None\n    with\n    | Some (next_ind, formatting_lit) ->\n      let Fmt_EBB fmt_rest = parse next_ind end_ind in\n      Fmt_EBB (Formatting_lit (formatting_lit, fmt_rest))\n    | None ->\n      let Fmt_EBB fmt_rest = parse str_ind end_ind in\n      Fmt_EBB (Formatting_lit (Scan_indic '<', fmt_rest))\n\n  (* Parse and construct a char set. *)\n  and parse_char_set str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n\n    let char_set = create_char_set () in\n    let add_char c =\n      add_in_char_set char_set c;\n    in\n    let add_range c c' =\n      for i = int_of_char c to int_of_char c' do\n        add_in_char_set char_set (char_of_int i);\n      done;\n    in\n\n    let fail_single_percent str_ind =\n      failwith_message\n        \"invalid format %S: '%%' alone is not accepted in character sets, \\\n         use %%%% instead at position %d.\" str str_ind;\n    in\n\n    (* Parse the first character of a char set. *)\n    let rec parse_char_set_start str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      let c = str.[str_ind] in\n      parse_char_set_after_char (str_ind + 1) end_ind c;\n\n    (* Parse the content of a char set until the first ']'. *)\n    and parse_char_set_content str_ind end_ind =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        str_ind + 1\n      | '-' ->\n        add_char '-';\n        parse_char_set_content (str_ind + 1) end_ind;\n      | c ->\n        parse_char_set_after_char (str_ind + 1) end_ind c;\n\n    (* Test for range in char set. *)\n    and parse_char_set_after_char str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        str_ind + 1\n      | '-' ->\n        parse_char_set_after_minus (str_ind + 1) end_ind c\n      | ('%' | '@') as c' when c = '%' ->\n        add_char c';\n        parse_char_set_content (str_ind + 1) end_ind\n      | c' ->\n        if c = '%' then fail_single_percent str_ind;\n        (* note that '@' alone is accepted, as done by the legacy\n           implementation; the documentation specifically requires %@\n           so we could warn on that *)\n        add_char c;\n        parse_char_set_after_char (str_ind + 1) end_ind c'\n\n    (* Manage range in char set (except if the '-' the last char before ']') *)\n    and parse_char_set_after_minus str_ind end_ind c =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n      | ']' ->\n        add_char c;\n        add_char '-';\n        str_ind + 1\n      | '%' ->\n        if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n        begin match str.[str_ind + 1] with\n          | ('%' | '@') as c' ->\n            add_range c c';\n            parse_char_set_content (str_ind + 2) end_ind\n          | _ -> fail_single_percent str_ind\n        end\n      | c' ->\n        add_range c c';\n        parse_char_set_content (str_ind + 1) end_ind\n    in\n    let str_ind, reverse =\n      if str_ind = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind] with\n        | '^' -> str_ind + 1, true\n        | _ -> str_ind, false in\n    let next_ind = parse_char_set_start str_ind end_ind in\n    let char_set = freeze_char_set char_set in\n    next_ind, (if reverse then rev_char_set char_set else char_set)\n\n  (* Consume all next spaces, raise an Failure if end_ind is reached. *)\n  and parse_spaces str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    if str.[str_ind] = ' ' then parse_spaces (str_ind + 1) end_ind else str_ind\n\n  (* Read a positive integer from the string, raise a Failure if end_ind is\n     reached. *)\n  and parse_positive str_ind end_ind acc =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' as c ->\n      let new_acc = acc * 10 + (int_of_char c - int_of_char '0') in\n      if new_acc > Sys.max_string_length then\n        failwith_message\n          \"invalid format %S: integer %d is greater than the limit %d\"\n          str new_acc Sys.max_string_length\n      else\n        parse_positive (str_ind + 1) end_ind new_acc\n    | _ -> str_ind, acc\n\n  (* Read a positive or negative integer from the string, raise a Failure\n     if end_ind is reached. *)\n  and parse_integer str_ind end_ind =\n    if str_ind = end_ind then unexpected_end_of_format end_ind;\n    match str.[str_ind] with\n    | '0' .. '9' -> parse_positive str_ind end_ind 0\n    | '-' -> (\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      match str.[str_ind + 1] with\n      | '0' .. '9' ->\n        let next_ind, n = parse_positive (str_ind + 1) end_ind 0 in\n        next_ind, -n\n      | c ->\n        expected_character (str_ind + 1) \"digit\" c\n    )\n    | _ -> assert false\n\n  (* Add a literal to a format from a literal character sub-sequence. *)\n  and add_literal : type a d e f .\n      int -> int -> (a, _, _, d, e, f) fmt ->\n      (_, _, e, f) fmt_ebb =\n  fun lit_start str_ind fmt -> match str_ind - lit_start with\n    | 0    -> Fmt_EBB fmt\n    | 1    -> Fmt_EBB (Char_literal (str.[lit_start], fmt))\n    | size -> Fmt_EBB (String_literal (String.sub str lit_start size, fmt))\n\n  (* Search the end of the current sub-format\n     (i.e. the corresponding \"%}\" or \"%)\") *)\n  and search_subformat_end str_ind end_ind c =\n    if str_ind = end_ind then\n      failwith_message\n        \"invalid format %S: unclosed sub-format, \\\n         expected \\\"%%%c\\\" at character number %d\" str c end_ind;\n    match str.[str_ind] with\n    | '%' ->\n      if str_ind + 1 = end_ind then unexpected_end_of_format end_ind;\n      if str.[str_ind + 1] = c then (* End of format found *) str_ind else\n        begin match str.[str_ind + 1] with\n        | '_' ->\n          (* Search for \"%_(\" or \"%_{\". *)\n          if str_ind + 2 = end_ind then unexpected_end_of_format end_ind;\n          begin match str.[str_ind + 2] with\n          | '{' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind '}' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | '(' ->\n            let sub_end = search_subformat_end (str_ind + 3) end_ind ')' in\n            search_subformat_end (sub_end + 2) end_ind c\n          | _ -> search_subformat_end (str_ind + 3) end_ind c\n          end\n        | '{' ->\n          (* %{...%} sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind '}' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '(' ->\n          (* %(...%) sub-format found. *)\n          let sub_end = search_subformat_end (str_ind + 2) end_ind ')' in\n          search_subformat_end (sub_end + 2) end_ind c\n        | '}' ->\n          (* Error: %(...%}. *)\n          expected_character (str_ind + 1) \"character ')'\" '}';\n        | ')' ->\n          (* Error: %{...%). *)\n          expected_character (str_ind + 1) \"character '}'\" ')';\n        | _ ->\n          search_subformat_end (str_ind + 2) end_ind c\n        end\n    | _ -> search_subformat_end (str_ind + 1) end_ind c\n\n  (* Check if symb is a valid int conversion after \"%l\", \"%n\" or \"%L\" *)\n  and is_int_base symb = match symb with\n    | 'd' | 'i' | 'x' | 'X' | 'o' | 'u' -> true\n    | _ -> false\n\n  (* Convert a char (l, n or L) to its associated counter. *)\n  and counter_of_char symb = match symb with\n    | 'l' -> Line_counter  | 'n' -> Char_counter\n    | 'L' -> Token_counter | _ -> assert false\n\n  (* Convert (plus, symb) to its associated int_conv. *)\n  and compute_int_conv pct_ind str_ind plus hash space symb =\n    match plus, hash, space, symb with\n    | false, false, false, 'd' -> Int_d  | false, false, false, 'i' -> Int_i\n    | false, false,  true, 'd' -> Int_sd | false, false,  true, 'i' -> Int_si\n    |  true, false, false, 'd' -> Int_pd |  true, false, false, 'i' -> Int_pi\n    | false, false, false, 'x' -> Int_x  | false, false, false, 'X' -> Int_X\n    | false,  true, false, 'x' -> Int_Cx | false,  true, false, 'X' -> Int_CX\n    | false, false, false, 'o' -> Int_o\n    | false,  true, false, 'o' -> Int_Co\n    | false, false, false, 'u' -> Int_u\n    | _, true, _, 'x' when legacy_behavior -> Int_Cx\n    | _, true, _, 'X' when legacy_behavior -> Int_CX\n    | _, true, _, 'o' when legacy_behavior -> Int_Co\n    | _, true, _, ('d' | 'i' | 'u') ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus false space symb\n      else incompatible_flag pct_ind str_ind symb \"'#'\"\n    | true, _, true, _ ->\n      if legacy_behavior then\n        (* plus and space: legacy implementation prefers plus *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\"\n    | false, _, true, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind plus hash false symb\n      else incompatible_flag pct_ind str_ind symb \"' '\"\n    | true, _, false, _    ->\n      if legacy_behavior then (* ignore *)\n        compute_int_conv pct_ind str_ind false hash space symb\n      else incompatible_flag pct_ind str_ind symb \"'+'\"\n    | false, _, false, _ -> assert false\n\n  (* Convert (plus, symb) to its associated float_conv. *)\n  and compute_float_conv pct_ind str_ind plus space symb =\n  match plus, space, symb with\n    | false, false, 'f' -> Float_f  | false, false, 'e' -> Float_e\n    | false,  true, 'f' -> Float_sf | false,  true, 'e' -> Float_se\n    |  true, false, 'f' -> Float_pf |  true, false, 'e' -> Float_pe\n    | false, false, 'E' -> Float_E  | false, false, 'g' -> Float_g\n    | false,  true, 'E' -> Float_sE | false,  true, 'g' -> Float_sg\n    |  true, false, 'E' -> Float_pE |  true, false, 'g' -> Float_pg\n    | false, false, 'G' -> Float_G\n    | false,  true, 'G' -> Float_sG\n    |  true, false, 'G' -> Float_pG\n    | false, false, 'h' -> Float_h\n    | false,  true, 'h' -> Float_sh\n    |  true, false, 'h' -> Float_ph\n    | false, false, 'H' -> Float_H\n    | false,  true, 'H' -> Float_sH\n    |  true, false, 'H' -> Float_pH\n    | false, false, 'F' -> Float_F\n    |  true,  true, _ ->\n      if legacy_behavior then\n        (* plus and space: legacy implementation prefers plus *)\n        compute_float_conv pct_ind str_ind plus false symb\n      else incompatible_flag pct_ind str_ind ' ' \"'+'\"\n    | false,  true, _ ->\n      if legacy_behavior then (* ignore *)\n        compute_float_conv pct_ind str_ind plus false symb\n      else incompatible_flag pct_ind str_ind symb \"' '\"\n    |  true, false, _ ->\n      if legacy_behavior then (* ignore *)\n        compute_float_conv pct_ind str_ind false space symb\n      else incompatible_flag pct_ind str_ind symb \"'+'\"\n    | false, false, _ -> assert false\n\n  (* Raise a Failure with a friendly error message about incompatible options.*)\n  and incompatible_flag : type a . int -> int -> char -> string -> a =\n    fun pct_ind str_ind symb option ->\n      let subfmt = String.sub str pct_ind (str_ind - pct_ind) in\n      failwith_message\n        \"invalid format %S: at character number %d, \\\n         %s is incompatible with '%c' in sub-format %S\"\n        str pct_ind option symb subfmt;\n\n  in parse 0 (String.length str)\n\n(******************************************************************************)\n                  (* Guarded string to format conversions *)\n\n(* Convert a string to a format according to an fmtty. *)\n(* Raise a Failure with an error message in case of type mismatch. *)\nlet format_of_string_fmtty str fmtty =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt fmtty, str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\"\n      str (string_of_fmtty fmtty)\n\n(* Convert a string to a format compatible with an other format. *)\n(* Raise a Failure with an error message in case of type mismatch. *)\nlet format_of_string_format str (Format (fmt', str')) =\n  let Fmt_EBB fmt = fmt_ebb_of_string str in\n  try Format (type_format fmt (fmtty_of_fmt fmt'), str)\n  with Type_mismatch ->\n    failwith_message\n      \"bad input: format type mismatch between %S and %S\" str str'\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Character operations *)\n\nexternal code: char -> int = \"%identity\"\nexternal unsafe_chr: int -> char = \"%identity\"\n\nlet chr n =\n  if n < 0 || n > 255 then invalid_arg \"Char.chr\" else unsafe_chr n\n\nexternal bytes_create: int -> bytes = \"caml_create_bytes\"\nexternal bytes_unsafe_set : bytes -> int -> char -> unit\n                           = \"%bytes_unsafe_set\"\nexternal unsafe_to_string : bytes -> string = \"%bytes_to_string\"\n\nlet escaped = function\n  | '\\'' -> \"\\\\'\"\n  | '\\\\' -> \"\\\\\\\\\"\n  | '\\n' -> \"\\\\n\"\n  | '\\t' -> \"\\\\t\"\n  | '\\r' -> \"\\\\r\"\n  | '\\b' -> \"\\\\b\"\n  | ' ' .. '~' as c ->\n      let s = bytes_create 1 in\n      bytes_unsafe_set s 0 c;\n      unsafe_to_string s\n  | c ->\n      let n = code c in\n      let s = bytes_create 4 in\n      bytes_unsafe_set s 0 '\\\\';\n      bytes_unsafe_set s 1 (unsafe_chr (48 + n / 100));\n      bytes_unsafe_set s 2 (unsafe_chr (48 + (n / 10) mod 10));\n      bytes_unsafe_set s 3 (unsafe_chr (48 + n mod 10));\n      unsafe_to_string s\n\nlet lowercase c =\n  if (c >= 'A' && c <= 'Z')\n  || (c >= '\\192' && c <= '\\214')\n  || (c >= '\\216' && c <= '\\222')\n  then unsafe_chr(code c + 32)\n  else c\n\nlet uppercase c =\n  if (c >= 'a' && c <= 'z')\n  || (c >= '\\224' && c <= '\\246')\n  || (c >= '\\248' && c <= '\\254')\n  then unsafe_chr(code c - 32)\n  else c\n\nlet lowercase_ascii c =\n  if (c >= 'A' && c <= 'Z')\n  then unsafe_chr(code c + 32)\n  else c\n\nlet uppercase_ascii c =\n  if (c >= 'a' && c <= 'z')\n  then unsafe_chr(code c - 32)\n  else c\n\ntype t = char\n\nlet compare c1 c2 = code c1 - code c2\nlet equal (c1: t) (c2: t) = compare c1 c2 = 0\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*   Xavier Leroy and Pierre Weis, projet Cristal, INRIA Rocquencourt     *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\nlet kfprintf k o (Format (fmt, _)) =\n  make_printf (fun o acc -> output_acc o acc; k o) o End_of_acc fmt\nlet kbprintf k b (Format (fmt, _)) =\n  make_printf (fun b acc -> bufput_acc b acc; k b) b End_of_acc fmt\nlet ikfprintf k oc (Format (fmt, _)) =\n  make_iprintf k oc fmt\n\nlet fprintf oc fmt = kfprintf ignore oc fmt\nlet bprintf b fmt = kbprintf ignore b fmt\nlet ifprintf oc fmt = ikfprintf ignore oc fmt\nlet printf fmt = fprintf stdout fmt\nlet eprintf fmt = fprintf stderr fmt\n\nlet ksprintf k (Format (fmt, _)) =\n  let k' () acc =\n    let buf = Buffer.create 64 in\n    strput_acc buf acc;\n    k (Buffer.contents buf) in\n  make_printf k' () End_of_acc fmt\n\nlet sprintf fmt = ksprintf (fun s -> s) fmt\n\nlet kprintf = ksprintf\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Operations on internal representations of values *)\n\ntype t\n\nexternal repr : 'a -> t = \"%identity\"\nexternal obj : t -> 'a = \"%identity\"\nexternal magic : 'a -> 'b = \"%identity\"\nexternal is_int : t -> bool = \"%obj_is_int\"\nlet [@inline always] is_block a = not (is_int a)\nexternal tag : t -> int = \"caml_obj_tag\"\nexternal set_tag : t -> int -> unit = \"caml_obj_set_tag\"\nexternal size : t -> int = \"%obj_size\"\nexternal reachable_words : t -> int = \"caml_obj_reachable_words\"\nexternal field : t -> int -> t = \"%obj_field\"\nexternal set_field : t -> int -> t -> unit = \"%obj_set_field\"\nexternal array_get: 'a array -> int -> 'a = \"%array_safe_get\"\nexternal array_set: 'a array -> int -> 'a -> unit = \"%array_safe_set\"\nlet [@inline always] double_field x i = array_get (obj x : float array) i\nlet [@inline always] set_double_field x i v =\n  array_set (obj x : float array) i v\nexternal new_block : int -> int -> t = \"caml_obj_block\"\nexternal dup : t -> t = \"caml_obj_dup\"\nexternal truncate : t -> int -> unit = \"caml_obj_truncate\"\nexternal add_offset : t -> Int32.t -> t = \"caml_obj_add_offset\"\n\nlet marshal (obj : t) =\n  Marshal.to_bytes obj []\nlet unmarshal str pos =\n  (Marshal.from_bytes str pos, pos + Marshal.total_size str pos)\n\nlet first_non_constant_constructor_tag = 0\nlet last_non_constant_constructor_tag = 245\n\nlet lazy_tag = 246\nlet closure_tag = 247\nlet object_tag = 248\nlet infix_tag = 249\nlet forward_tag = 250\n\nlet no_scan_tag = 251\n\nlet abstract_tag = 251\nlet string_tag = 252\nlet double_tag = 253\nlet double_array_tag = 254\nlet custom_tag = 255\nlet final_tag = custom_tag\n\n\nlet int_tag = 1000\nlet out_of_heap_tag = 1001\nlet unaligned_tag = 1002\n\nlet extension_constructor x =\n  let x = repr x in\n  let slot =\n    if (is_block x) && (tag x) <> object_tag && (size x) >= 1 then field x 0\n    else x\n  in\n  let name =\n    if (is_block slot) && (tag slot) = object_tag then field slot 0\n    else invalid_arg \"Obj.extension_constructor\"\n  in\n    if (tag name) = string_tag then (obj slot : extension_constructor)\n    else invalid_arg \"Obj.extension_constructor\"\n\nlet [@inline always] extension_name (slot : extension_constructor) =\n  (obj (field (repr slot) 0) : string)\n\nlet [@inline always] extension_id (slot : extension_constructor) =\n  (obj (field (repr slot) 1) : int)\n\nmodule Ephemeron = struct\n  type obj_t = t\n\n  type t (** ephemeron *)\n\n  external create: int -> t = \"caml_ephe_create\"\n\n  let length x = size(repr x) - 2\n\n  external get_key: t -> int -> obj_t option = \"caml_ephe_get_key\"\n  external get_key_copy: t -> int -> obj_t option = \"caml_ephe_get_key_copy\"\n  external set_key: t -> int -> obj_t -> unit = \"caml_ephe_set_key\"\n  external unset_key: t -> int -> unit = \"caml_ephe_unset_key\"\n  external check_key: t -> int -> bool = \"caml_ephe_check_key\"\n  external blit_key : t -> int -> t -> int -> int -> unit\n    = \"caml_ephe_blit_key\"\n\n  external get_data: t -> obj_t option = \"caml_ephe_get_data\"\n  external get_data_copy: t -> obj_t option = \"caml_ephe_get_data_copy\"\n  external set_data: t -> obj_t -> unit = \"caml_ephe_set_data\"\n  external unset_data: t -> unit = \"caml_ephe_unset_data\"\n  external check_data: t -> bool = \"caml_ephe_check_data\"\n  external blit_data : t -> t -> unit = \"caml_ephe_blit_data\"\n\n\nend\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Pierre Weis, projet Cristal, INRIA Rocquencourt            *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* A pretty-printing facility and definition of formatters for 'parallel'\n   (i.e. unrelated or independent) pretty-printing on multiple out channels. *)\n\n(*\n   The pretty-printing engine internal data structures.\n*)\n\n(* A devoted type for sizes to avoid confusion\n   between sizes and mere integers. *)\ntype size\n\nexternal size_of_int : int -> size = \"%identity\"\n\nexternal int_of_size : size -> int = \"%identity\"\n\n\n(* The pretty-printing boxes definition:\n   a pretty-printing box is either\n   - hbox: horizontal (no split in the line)\n   - vbox: vertical (the line is splitted at every break hint)\n   - hvbox: horizontal/vertical\n     (the box behaves as an horizontal box if it fits on\n      the current line, otherwise the box behaves as a vertical box)\n   - hovbox: horizontal or vertical\n     (the box is compacting material, printing as much material on every\n     lines)\n   - box: horizontal or vertical with box enhanced structure\n     (the box behaves as an horizontal or vertical box but break hints split\n      the line if splitting would move to the left)\n*)\ntype box_type = CamlinternalFormatBasics.block_type =\n  | Pp_hbox | Pp_vbox | Pp_hvbox | Pp_hovbox | Pp_box | Pp_fits\n\n\n(* The pretty-printing tokens definition:\n   are either text to print or pretty printing\n   elements that drive indentation and line splitting. *)\ntype pp_token =\n  | Pp_text of string          (* normal text *)\n  | Pp_break of int * int      (* complete break *)\n  | Pp_tbreak of int * int     (* go to next tabulation *)\n  | Pp_stab                    (* set a tabulation *)\n  | Pp_begin of int * box_type (* beginning of a box *)\n  | Pp_end                     (* end of a box *)\n  | Pp_tbegin of tbox          (* beginning of a tabulation box *)\n  | Pp_tend                    (* end of a tabulation box *)\n  | Pp_newline                 (* to force a newline inside a box *)\n  | Pp_if_newline              (* to do something only if this very\n                                  line has been broken *)\n  | Pp_open_tag of tag         (* opening a tag name *)\n  | Pp_close_tag               (* closing the most recently opened tag *)\n\nand tag = string\n\nand tbox = Pp_tbox of int list ref  (* Tabulation box *)\n\n\n(* The pretty-printer queue definition:\n   pretty-printing material is not written in the output as soon as emitted;\n   instead, the material is simply recorded in the pretty-printer queue,\n   until the enclosing box has a known computed size and proper splitting\n   decisions can be made.\n\n   To define the pretty-printer queue, we first define polymorphic queues,\n   then pretty-printer queue elements.\n*)\n\n(* The pretty-printer queue: polymorphic queue definition. *)\ntype 'a queue_elem =\n  | Nil\n  | Cons of {\n      head : 'a;\n      mutable tail : 'a queue_elem;\n    }\n\n\ntype 'a queue = {\n  mutable insert : 'a queue_elem;\n  mutable body : 'a queue_elem;\n}\n\n\n(* The pretty-printer queue: queue element definition.\n   The pretty-printer queue contains formatting elements to be printed.\n   Each formatting element is a tuple (size, token, length), where\n   - length is the declared length of the token,\n   - size is effective size of the token when it is printed\n     (size is set when the size of the box is known, so that size of break\n      hints are definitive). *)\ntype pp_queue_elem = {\n  mutable elem_size : size;\n  token : pp_token;\n  length : int;\n}\n\n\n(* The pretty-printer queue definition. *)\ntype pp_queue = pp_queue_elem queue\n\n(* The pretty-printer scanning stack. *)\n\n(* The pretty-printer scanning stack: scanning element definition.\n   Each element is (left_total, queue element) where left_total\n   is the value of pp_left_total when the element has been enqueued. *)\ntype pp_scan_elem = Scan_elem of int * pp_queue_elem\n\n(* The pretty-printer scanning stack definition. *)\ntype pp_scan_stack = pp_scan_elem list\n\n(* The pretty-printer formatting stack:\n   the formatting stack contains the description of all the currently active\n   boxes; the pretty-printer formatting stack is used to split the lines\n   while printing tokens. *)\n\n(* The pretty-printer formatting stack: formatting stack element definition.\n   Each stack element describes a pretty-printing box. *)\ntype pp_format_elem = Format_elem of box_type * int\n\n(* The pretty-printer formatting stack definition. *)\ntype pp_format_stack = pp_format_elem list\n\n(* The pretty-printer semantics tag stack definition. *)\ntype pp_tag_stack = tag list\n\n(* The formatter definition.\n   Each formatter value is a pretty-printer instance with all its\n   machinery. *)\ntype formatter = {\n  (* The various stacks. *)\n  mutable pp_scan_stack : pp_scan_stack;\n  mutable pp_format_stack : pp_format_stack;\n  mutable pp_tbox_stack : tbox list;\n  mutable pp_tag_stack : pp_tag_stack;\n  mutable pp_mark_stack : pp_tag_stack;\n  (* Value of right margin. *)\n  mutable pp_margin : int;\n  (* Minimal space left before margin, when opening a box. *)\n  mutable pp_min_space_left : int;\n  (* Maximum value of indentation:\n     no box can be opened further. *)\n  mutable pp_max_indent : int;\n  (* Space remaining on the current line. *)\n  mutable pp_space_left : int;\n  (* Current value of indentation. *)\n  mutable pp_current_indent : int;\n  (* True when the line has been broken by the pretty-printer. *)\n  mutable pp_is_new_line : bool;\n  (* Total width of tokens already printed. *)\n  mutable pp_left_total : int;\n  (* Total width of tokens ever put in queue. *)\n  mutable pp_right_total : int;\n  (* Current number of opened boxes. *)\n  mutable pp_curr_depth : int;\n  (* Maximum number of boxes which can be simultaneously opened. *)\n  mutable pp_max_boxes : int;\n  (* Ellipsis string. *)\n  mutable pp_ellipsis : string;\n  (* Output function. *)\n  mutable pp_out_string : string -> int -> int -> unit;\n  (* Flushing function. *)\n  mutable pp_out_flush : unit -> unit;\n  (* Output of new lines. *)\n  mutable pp_out_newline : unit -> unit;\n  (* Output of indentation spaces. *)\n  mutable pp_out_spaces : int -> unit;\n  (* Are tags printed ? *)\n  mutable pp_print_tags : bool;\n  (* Are tags marked ? *)\n  mutable pp_mark_tags : bool;\n  (* Find opening and closing markers of tags. *)\n  mutable pp_mark_open_tag : tag -> string;\n  mutable pp_mark_close_tag : tag -> string;\n  mutable pp_print_open_tag : tag -> unit;\n  mutable pp_print_close_tag : tag -> unit;\n  (* The pretty-printer queue. *)\n  mutable pp_queue : pp_queue;\n}\n\n\n(* The formatter specific tag handling functions. *)\ntype formatter_tag_functions = {\n  mark_open_tag : tag -> string;\n  mark_close_tag : tag -> string;\n  print_open_tag : tag -> unit;\n  print_close_tag : tag -> unit;\n}\n\n\n(* The formatter functions to output material. *)\ntype formatter_out_functions = {\n  out_string : string -> int -> int -> unit;\n  out_flush : unit -> unit;\n  out_newline : unit -> unit;\n  out_spaces : int -> unit;\n}\n\n\n(*\n\n  Auxiliaries and basic functions.\n\n*)\n\n(* Queues auxiliaries. *)\n\nlet make_queue () = { insert = Nil; body = Nil; }\n\nlet clear_queue q = q.insert <- Nil; q.body <- Nil\n\nlet add_queue x q =\n  let c = Cons { head = x; tail = Nil; } in\n  match q with\n  | { insert = Cons cell; body = _; } ->\n    q.insert <- c; cell.tail <- c\n  (* Invariant: when insert is Nil body should be Nil. *)\n  | { insert = Nil; body = _; } ->\n    q.insert <- c; q.body <- c\n\n\nexception Empty_queue\n\nlet peek_queue = function\n  | { body = Cons { head = x; tail = _; }; _ } -> x\n  | { body = Nil; insert = _; } -> raise Empty_queue\n\n\nlet take_queue = function\n  | { body = Cons { head = x; tail = tl; }; _ } as q ->\n    q.body <- tl;\n    if tl = Nil then q.insert <- Nil; (* Maintain the invariant. *)\n    x\n  | { body = Nil; insert = _; } -> raise Empty_queue\n\n\n(* Enter a token in the pretty-printer queue. *)\nlet pp_enqueue state ({ length = len; _} as token) =\n  state.pp_right_total <- state.pp_right_total + len;\n  add_queue token state.pp_queue\n\n\nlet pp_clear_queue state =\n  state.pp_left_total <- 1; state.pp_right_total <- 1;\n  clear_queue state.pp_queue\n\n\n(* Pp_infinity: large value for default tokens size.\n\n   Pp_infinity is documented as being greater than 1e10; to avoid\n   confusion about the word 'greater', we choose pp_infinity greater\n   than 1e10 + 1; for correct handling of tests in the algorithm,\n   pp_infinity must be even one more than 1e10 + 1; let's stand on the\n   safe side by choosing 1.e10+10.\n\n   Pp_infinity could probably be 1073741823 that is 2^30 - 1, that is\n   the minimal upper bound for integers; now that max_int is defined,\n   this limit could also be defined as max_int - 1.\n\n   However, before setting pp_infinity to something around max_int, we\n   must carefully double-check all the integer arithmetic operations\n   that involve pp_infinity, since any overflow would wreck havoc the\n   pretty-printing algorithm's invariants. Given that this arithmetic\n   correctness check is difficult and error prone and given that 1e10\n   + 1 is in practice large enough, there is no need to attempt to set\n   pp_infinity to the theoretically maximum limit. It is not worth the\n   burden ! *)\nlet pp_infinity = 1000000010\n\n(* Output functions for the formatter. *)\nlet pp_output_string state s = state.pp_out_string s 0 (String.length s)\nand pp_output_newline state = state.pp_out_newline ()\nand pp_output_spaces state n = state.pp_out_spaces n\n\n(* To format a break, indenting a new line. *)\nlet break_new_line state offset width =\n  pp_output_newline state;\n  state.pp_is_new_line <- true;\n  let indent = state.pp_margin - width + offset in\n  (* Don't indent more than pp_max_indent. *)\n  let real_indent = min state.pp_max_indent indent in\n  state.pp_current_indent <- real_indent;\n  state.pp_space_left <- state.pp_margin - state.pp_current_indent;\n  pp_output_spaces state state.pp_current_indent\n\n\n(* To force a line break inside a box: no offset is added. *)\nlet break_line state width = break_new_line state 0 width\n\n(* To format a break that fits on the current line. *)\nlet break_same_line state width =\n  state.pp_space_left <- state.pp_space_left - width;\n  pp_output_spaces state width\n\n\n(* To indent no more than pp_max_indent, if one tries to open a box\n   beyond pp_max_indent, then the box is rejected on the left\n   by simulating a break. *)\nlet pp_force_break_line state =\n  match state.pp_format_stack with\n  | Format_elem (bl_ty, width) :: _ ->\n    if width > state.pp_space_left then\n      (match bl_ty with\n       | Pp_fits -> () | Pp_hbox -> ()\n       | Pp_vbox | Pp_hvbox | Pp_hovbox | Pp_box ->\n         break_line state width)\n  | [] -> pp_output_newline state\n\n\n(* To skip a token, if the previous line has been broken. *)\nlet pp_skip_token state =\n  (* When calling pp_skip_token the queue cannot be empty. *)\n  match take_queue state.pp_queue with\n  | { elem_size = size; length = len; token = _; } ->\n    state.pp_left_total <- state.pp_left_total - len;\n    state.pp_space_left <- state.pp_space_left + int_of_size size\n\n\n(*\n\n  The main pretty printing functions.\n\n*)\n\n(* Formatting a token with a given size. *)\nlet format_pp_token state size = function\n\n  | Pp_text s ->\n    state.pp_space_left <- state.pp_space_left - size;\n    pp_output_string state s;\n    state.pp_is_new_line <- false\n\n  | Pp_begin (off, ty) ->\n    let insertion_point = state.pp_margin - state.pp_space_left in\n    if insertion_point > state.pp_max_indent then\n      (* can not open a box right there. *)\n      begin pp_force_break_line state end;\n    let offset = state.pp_space_left - off in\n    let bl_type =\n      begin match ty with\n      | Pp_vbox -> Pp_vbox\n      | Pp_hbox | Pp_hvbox | Pp_hovbox | Pp_box | Pp_fits ->\n        if size > state.pp_space_left then ty else Pp_fits\n      end in\n    state.pp_format_stack <-\n      Format_elem (bl_type, offset) :: state.pp_format_stack\n\n  | Pp_end ->\n    begin match state.pp_format_stack with\n    | _ :: ls -> state.pp_format_stack <- ls\n    | [] -> () (* No more box to close. *)\n    end\n\n  | Pp_tbegin (Pp_tbox _ as tbox) ->\n    state.pp_tbox_stack <- tbox :: state.pp_tbox_stack\n\n  | Pp_tend ->\n    begin match state.pp_tbox_stack with\n    | _ :: ls -> state.pp_tbox_stack <- ls\n    | [] -> () (* No more tabulation box to close. *)\n    end\n\n  | Pp_stab ->\n    begin match state.pp_tbox_stack with\n    | Pp_tbox tabs :: _ ->\n      let rec add_tab n = function\n        | [] -> [n]\n        | x :: l as ls -> if n < x then n :: ls else x :: add_tab n l in\n      tabs := add_tab (state.pp_margin - state.pp_space_left) !tabs\n    | [] -> () (* No opened tabulation box. *)\n    end\n\n  | Pp_tbreak (n, off) ->\n    let insertion_point = state.pp_margin - state.pp_space_left in\n    begin match state.pp_tbox_stack with\n    | Pp_tbox tabs :: _ ->\n      let rec find n = function\n        | x :: l -> if x >= n then x else find n l\n        | [] -> raise Not_found in\n      let tab =\n        match !tabs with\n        | x :: _ ->\n          begin\n            try find insertion_point !tabs with\n            | Not_found -> x\n          end\n        | _ -> insertion_point in\n      let offset = tab - insertion_point in\n      if offset >= 0\n      then break_same_line state (offset + n)\n      else break_new_line state (tab + off) state.pp_margin\n    | [] -> () (* No opened tabulation box. *)\n    end\n\n  | Pp_newline ->\n    begin match state.pp_format_stack with\n    | Format_elem (_, width) :: _ -> break_line state width\n    | [] -> pp_output_newline state (* No opened box. *)\n    end\n\n  | Pp_if_newline ->\n    if state.pp_current_indent != state.pp_margin - state.pp_space_left\n    then pp_skip_token state\n\n  | Pp_break (n, off) ->\n    begin match state.pp_format_stack with\n    | Format_elem (ty, width) :: _ ->\n      begin match ty with\n      | Pp_hovbox ->\n        if size > state.pp_space_left\n        then break_new_line state off width\n        else break_same_line state n\n      | Pp_box ->\n        (* Have the line just been broken here ? *)\n        if state.pp_is_new_line then break_same_line state n else\n        if size > state.pp_space_left\n         then break_new_line state off width else\n        (* break the line here leads to new indentation ? *)\n        if state.pp_current_indent > state.pp_margin - width + off\n        then break_new_line state off width\n        else break_same_line state n\n      | Pp_hvbox -> break_new_line state off width\n      | Pp_fits -> break_same_line state n\n      | Pp_vbox -> break_new_line state off width\n      | Pp_hbox -> break_same_line state n\n      end\n    | [] -> () (* No opened box. *)\n    end\n\n   | Pp_open_tag tag_name ->\n     let marker = state.pp_mark_open_tag tag_name in\n     pp_output_string state marker;\n     state.pp_mark_stack <- tag_name :: state.pp_mark_stack\n\n   | Pp_close_tag ->\n     begin match state.pp_mark_stack with\n     | tag_name :: tags ->\n       let marker = state.pp_mark_close_tag tag_name in\n       pp_output_string state marker;\n       state.pp_mark_stack <- tags\n     | [] -> () (* No more tag to close. *)\n     end\n\n\n(* Print if token size is known else printing is delayed.\n   Size is known when not negative.\n   Printing is delayed when the text waiting in the queue requires\n   more room to format than exists on the current line.\n\n   Note: [advance_loop] must be tail recursive to prevent stack overflows. *)\nlet rec advance_loop state =\n  match peek_queue state.pp_queue with\n  | {elem_size = size; token = tok; length = len} ->\n    let size = int_of_size size in\n    if not\n         (size < 0 &&\n          (state.pp_right_total - state.pp_left_total < state.pp_space_left))\n    then begin\n      ignore (take_queue state.pp_queue);\n      format_pp_token state (if size < 0 then pp_infinity else size) tok;\n      state.pp_left_total <- len + state.pp_left_total;\n      advance_loop state\n    end\n\n\nlet advance_left state =\n  try advance_loop state with\n  | Empty_queue -> ()\n\n\n(* To enqueue a token : try to advance. *)\nlet enqueue_advance state tok = pp_enqueue state tok; advance_left state\n\n(* Building pretty-printer queue elements. *)\nlet make_queue_elem size tok len =\n  { elem_size = size; token = tok; length = len; }\n\n\n(* To enqueue strings. *)\nlet enqueue_string_as state size s =\n  let len = int_of_size size in\n  enqueue_advance state (make_queue_elem size (Pp_text s) len)\n\n\nlet enqueue_string state s =\n  let len = String.length s in\n  enqueue_string_as state (size_of_int len) s\n\n\n(* Routines for scan stack\n   determine size of boxes. *)\n\n(* The scan_stack is never empty. *)\nlet scan_stack_bottom =\n  let q_elem = make_queue_elem (size_of_int (-1)) (Pp_text \"\") 0 in\n  [Scan_elem (-1, q_elem)]\n\n\n(* Clearing the pretty-printer scanning stack. *)\nlet clear_scan_stack state = state.pp_scan_stack <- scan_stack_bottom\n\n(* Setting the size of boxes on scan stack:\n   if ty = true then size of break is set else size of box is set;\n   in each case pp_scan_stack is popped.\n\n   Note:\n   Pattern matching on scan stack is exhaustive, since scan_stack is never\n   empty.\n   Pattern matching on token in scan stack is also exhaustive,\n   since scan_push is used on breaks and opening of boxes. *)\nlet set_size state ty =\n  match state.pp_scan_stack with\n  | Scan_elem\n      (left_tot,\n       ({ elem_size = size; token = tok; length = _; } as queue_elem)) :: t ->\n    let size = int_of_size size in\n    (* test if scan stack contains any data that is not obsolete. *)\n    if left_tot < state.pp_left_total then clear_scan_stack state else\n      begin match tok with\n      | Pp_break (_, _) | Pp_tbreak (_, _) ->\n        if ty then\n        begin\n          queue_elem.elem_size <- size_of_int (state.pp_right_total + size);\n          state.pp_scan_stack <- t\n        end\n      | Pp_begin (_, _) ->\n        if not ty then\n        begin\n          queue_elem.elem_size <- size_of_int (state.pp_right_total + size);\n          state.pp_scan_stack <- t\n        end\n      | Pp_text _ | Pp_stab | Pp_tbegin _ | Pp_tend | Pp_end\n      | Pp_newline | Pp_if_newline\n      | Pp_open_tag _ | Pp_close_tag ->\n        () (* scan_push is only used for breaks and boxes. *)\n      end\n  | [] -> () (* scan_stack is never empty. *)\n\n\n(* Push a token on pretty-printer scanning stack.\n   If b is true set_size is called. *)\nlet scan_push state b tok =\n  pp_enqueue state tok;\n  if b then set_size state true;\n  state.pp_scan_stack <-\n    Scan_elem (state.pp_right_total, tok) :: state.pp_scan_stack\n\n\n(* To open a new box :\n   the user may set the depth bound pp_max_boxes\n   any text nested deeper is printed as the ellipsis string. *)\nlet pp_open_box_gen state indent br_ty =\n  state.pp_curr_depth <- state.pp_curr_depth + 1;\n  if state.pp_curr_depth < state.pp_max_boxes then\n    let elem =\n      make_queue_elem\n        (size_of_int (- state.pp_right_total))\n        (Pp_begin (indent, br_ty))\n        0 in\n    scan_push state false elem else\n  if state.pp_curr_depth = state.pp_max_boxes\n  then enqueue_string state state.pp_ellipsis\n\n\n(* The box which is always opened. *)\nlet pp_open_sys_box state = pp_open_box_gen state 0 Pp_hovbox\n\n(* Close a box, setting sizes of its sub boxes. *)\nlet pp_close_box state () =\n  if state.pp_curr_depth > 1 then\n  begin\n    if state.pp_curr_depth < state.pp_max_boxes then\n    begin\n      pp_enqueue state\n        { elem_size = size_of_int 0; token = Pp_end; length = 0; };\n      set_size state true; set_size state false\n    end;\n    state.pp_curr_depth <- state.pp_curr_depth - 1;\n  end\n\n\n(* Open a tag, pushing it on the tag stack. *)\nlet pp_open_tag state tag_name =\n  if state.pp_print_tags then\n  begin\n    state.pp_tag_stack <- tag_name :: state.pp_tag_stack;\n    state.pp_print_open_tag tag_name\n  end;\n  if state.pp_mark_tags then\n    pp_enqueue state {\n      elem_size = size_of_int 0;\n      token = Pp_open_tag tag_name;\n      length = 0;\n    }\n\n\n(* Close a tag, popping it from the tag stack. *)\nlet pp_close_tag state () =\n  if state.pp_mark_tags then\n    pp_enqueue state {\n      elem_size = size_of_int 0;\n      token = Pp_close_tag;\n      length = 0;\n    };\n  if state.pp_print_tags then\n  begin\n    match state.pp_tag_stack with\n    | tag_name :: tags ->\n      state.pp_print_close_tag tag_name;\n      state.pp_tag_stack <- tags\n    | _ -> () (* No more tag to close. *)\n  end\n\n\nlet pp_set_print_tags state b = state.pp_print_tags <- b\nlet pp_set_mark_tags state b = state.pp_mark_tags <- b\nlet pp_get_print_tags state () = state.pp_print_tags\nlet pp_get_mark_tags state () = state.pp_mark_tags\nlet pp_set_tags state b =\n  pp_set_print_tags state b; pp_set_mark_tags state b\n\n\n(* Handling tag handling functions: get/set functions. *)\nlet pp_get_formatter_tag_functions state () = {\n  mark_open_tag = state.pp_mark_open_tag;\n  mark_close_tag = state.pp_mark_close_tag;\n  print_open_tag = state.pp_print_open_tag;\n  print_close_tag = state.pp_print_close_tag;\n}\n\n\nlet pp_set_formatter_tag_functions state {\n     mark_open_tag = mot;\n     mark_close_tag = mct;\n     print_open_tag = pot;\n     print_close_tag = pct;\n  } =\n  state.pp_mark_open_tag <- mot;\n  state.pp_mark_close_tag <- mct;\n  state.pp_print_open_tag <- pot;\n  state.pp_print_close_tag <- pct\n\n\n(* Initialize pretty-printer. *)\nlet pp_rinit state =\n  pp_clear_queue state;\n  clear_scan_stack state;\n  state.pp_format_stack <- [];\n  state.pp_tbox_stack <- [];\n  state.pp_tag_stack <- [];\n  state.pp_mark_stack <- [];\n  state.pp_current_indent <- 0;\n  state.pp_curr_depth <- 0;\n  state.pp_space_left <- state.pp_margin;\n  pp_open_sys_box state\n\n\n(* Flushing pretty-printer queue. *)\nlet pp_flush_queue state b =\n  while state.pp_curr_depth > 1 do\n    pp_close_box state ()\n  done;\n  state.pp_right_total <- pp_infinity;\n  advance_left state;\n  if b then pp_output_newline state;\n  pp_rinit state\n\n\n(*\n\n  Procedures to format values and use boxes.\n\n*)\n\n(* To format a string. *)\nlet pp_print_as_size state size s =\n  if state.pp_curr_depth < state.pp_max_boxes\n  then enqueue_string_as state size s\n\n\nlet pp_print_as state isize s =\n  pp_print_as_size state (size_of_int isize) s\n\n\nlet pp_print_string state s =\n  pp_print_as state (String.length s) s\n\n\n(* To format an integer. *)\nlet pp_print_int state i = pp_print_string state (string_of_int i)\n\n(* To format a float. *)\nlet pp_print_float state f = pp_print_string state (string_of_float f)\n\n(* To format a boolean. *)\nlet pp_print_bool state b = pp_print_string state (string_of_bool b)\n\n(* To format a char. *)\nlet pp_print_char state c =\n  pp_print_as state 1 (String.make 1 c)\n\n\n(* Opening boxes. *)\nlet pp_open_hbox state () = pp_open_box_gen state 0 Pp_hbox\nand pp_open_vbox state indent = pp_open_box_gen state indent Pp_vbox\n\nand pp_open_hvbox state indent = pp_open_box_gen state indent Pp_hvbox\nand pp_open_hovbox state indent = pp_open_box_gen state indent Pp_hovbox\nand pp_open_box state indent = pp_open_box_gen state indent Pp_box\n\n\n(* Printing all queued text.\n   [print_newline] prints a new line after flushing the queue.\n   [print_flush] on flush the queue without adding a newline. *)\nlet pp_print_newline state () =\n  pp_flush_queue state true; state.pp_out_flush ()\nand pp_print_flush state () =\n  pp_flush_queue state false; state.pp_out_flush ()\n\n\n(* To get a newline when one does not want to close the current box. *)\nlet pp_force_newline state () =\n  if state.pp_curr_depth < state.pp_max_boxes then\n    enqueue_advance state (make_queue_elem (size_of_int 0) Pp_newline 0)\n\n\n(* To format something, only in case the line has just been broken. *)\nlet pp_print_if_newline state () =\n  if state.pp_curr_depth < state.pp_max_boxes then\n    enqueue_advance state (make_queue_elem (size_of_int 0) Pp_if_newline 0)\n\n\n(* Printing break hints:\n   A break hint indicates where a box may be broken.\n   If line is broken then offset is added to the indentation of the current\n   box else (the value of) width blanks are printed. *)\nlet pp_print_break state width offset =\n  if state.pp_curr_depth < state.pp_max_boxes then\n    let elem =\n      make_queue_elem\n        (size_of_int (- state.pp_right_total))\n        (Pp_break (width, offset))\n        width in\n    scan_push state true elem\n\n\n(* Print a space :\n   a space is a break hint that prints a single space if the break does not\n   split the line;\n   a cut is a break hint that prints nothing if the break does not split the\n   line. *)\nlet pp_print_space state () = pp_print_break state 1 0\nand pp_print_cut state () = pp_print_break state 0 0\n\n\n(* Tabulation boxes. *)\nlet pp_open_tbox state () =\n  state.pp_curr_depth <- state.pp_curr_depth + 1;\n  if state.pp_curr_depth < state.pp_max_boxes then\n    let elem =\n      make_queue_elem (size_of_int 0) (Pp_tbegin (Pp_tbox (ref []))) 0 in\n    enqueue_advance state elem\n\n\n(* Close a tabulation box. *)\nlet pp_close_tbox state () =\n  if state.pp_curr_depth > 1 then\n  begin\n   if state.pp_curr_depth < state.pp_max_boxes then\n     let elem = make_queue_elem (size_of_int 0) Pp_tend 0 in\n     enqueue_advance state elem;\n     state.pp_curr_depth <- state.pp_curr_depth - 1\n  end\n\n\n(* Print a tabulation break. *)\nlet pp_print_tbreak state width offset =\n  if state.pp_curr_depth < state.pp_max_boxes then\n    let elem =\n      make_queue_elem\n        (size_of_int (- state.pp_right_total))\n        (Pp_tbreak (width, offset))\n        width in\n    scan_push state true elem\n\n\nlet pp_print_tab state () = pp_print_tbreak state 0 0\n\nlet pp_set_tab state () =\n  if state.pp_curr_depth < state.pp_max_boxes then\n    let elem =\n      make_queue_elem (size_of_int 0) Pp_stab 0 in\n    enqueue_advance state elem\n\n\n(*\n\n  Procedures to control the pretty-printers\n\n*)\n\n(* Set_max_boxes. *)\nlet pp_set_max_boxes state n = if n > 1 then state.pp_max_boxes <- n\n\n(* To know the current maximum number of boxes allowed. *)\nlet pp_get_max_boxes state () = state.pp_max_boxes\n\nlet pp_over_max_boxes state () = state.pp_curr_depth = state.pp_max_boxes\n\n(* Ellipsis. *)\nlet pp_set_ellipsis_text state s = state.pp_ellipsis <- s\nand pp_get_ellipsis_text state () = state.pp_ellipsis\n\n\n(* To set the margin of pretty-printer. *)\nlet pp_limit n =\n  if n < pp_infinity then n else pred pp_infinity\n\n\n(* Internal pretty-printer functions. *)\nlet pp_set_min_space_left state n =\n  if n >= 1 then\n    let n = pp_limit n in\n    state.pp_min_space_left <- n;\n    state.pp_max_indent <- state.pp_margin - state.pp_min_space_left;\n    pp_rinit state\n\n\n(* Initially, we have :\n   pp_max_indent = pp_margin - pp_min_space_left, and\n   pp_space_left = pp_margin. *)\nlet pp_set_max_indent state n =\n  pp_set_min_space_left state (state.pp_margin - n)\n\n\nlet pp_get_max_indent state () = state.pp_max_indent\n\nlet pp_set_margin state n =\n  if n >= 1 then\n    let n = pp_limit n in\n    state.pp_margin <- n;\n    let new_max_indent =\n      (* Try to maintain max_indent to its actual value. *)\n      if state.pp_max_indent <= state.pp_margin\n      then state.pp_max_indent else\n      (* If possible maintain pp_min_space_left to its actual value,\n         if this leads to a too small max_indent, take half of the\n         new margin, if it is greater than 1. *)\n       max (max (state.pp_margin - state.pp_min_space_left)\n                (state.pp_margin / 2)) 1 in\n    (* Rebuild invariants. *)\n    pp_set_max_indent state new_max_indent\n\n\nlet pp_get_margin state () = state.pp_margin\n\n(* Setting a formatter basic output functions. *)\nlet pp_set_formatter_out_functions state {\n      out_string = f;\n      out_flush = g;\n      out_newline = h;\n      out_spaces = i;\n    } =\n  state.pp_out_string <- f;\n  state.pp_out_flush <- g;\n  state.pp_out_newline <- h;\n  state.pp_out_spaces <- i\n\n\nlet pp_get_formatter_out_functions state () = {\n  out_string = state.pp_out_string;\n  out_flush = state.pp_out_flush;\n  out_newline = state.pp_out_newline;\n  out_spaces = state.pp_out_spaces;\n}\n\n\n(* Setting a formatter basic string output and flush functions. *)\nlet pp_set_formatter_output_functions state f g =\n  state.pp_out_string <- f; state.pp_out_flush <- g\n\nlet pp_get_formatter_output_functions state () =\n  (state.pp_out_string, state.pp_out_flush)\n\n\nlet pp_flush_formatter state =\n  pp_flush_queue state false\n\n(* The default function to output new lines. *)\nlet display_newline state () = state.pp_out_string \"\\n\" 0  1\n\n(* The default function to output spaces. *)\nlet blank_line = String.make 80 ' '\nlet rec display_blanks state n =\n  if n > 0 then\n  if n <= 80 then state.pp_out_string blank_line 0 n else\n  begin\n    state.pp_out_string blank_line 0 80;\n    display_blanks state (n - 80)\n  end\n\n\n(* Setting a formatter basic output functions as printing to a given\n   [Pervasive.out_channel] value. *)\nlet pp_set_formatter_out_channel state os =\n  state.pp_out_string <- output_substring os;\n  state.pp_out_flush <- (fun () -> flush os);\n  state.pp_out_newline <- display_newline state;\n  state.pp_out_spaces <- display_blanks state\n\n\n(*\n\n  Defining specific formatters\n\n*)\n\nlet default_pp_mark_open_tag s = \"<\" ^ s ^ \">\"\nlet default_pp_mark_close_tag s = \"</\" ^ s ^ \">\"\n\nlet default_pp_print_open_tag = ignore\nlet default_pp_print_close_tag = ignore\n\n(* Bulding a formatter given its basic output functions.\n   Other fields get reasonable default values. *)\nlet pp_make_formatter f g h i =\n  (* The initial state of the formatter contains a dummy box. *)\n  let pp_queue = make_queue () in\n  let sys_tok =\n    make_queue_elem (size_of_int (-1)) (Pp_begin (0, Pp_hovbox)) 0 in\n  add_queue sys_tok pp_queue;\n  let sys_scan_stack =\n    Scan_elem (1, sys_tok) :: scan_stack_bottom in\n  let pp_margin = 78\n  and pp_min_space_left = 10 in\n  {\n    pp_scan_stack = sys_scan_stack;\n    pp_format_stack = [];\n    pp_tbox_stack = [];\n    pp_tag_stack = [];\n    pp_mark_stack = [];\n    pp_margin = pp_margin;\n    pp_min_space_left = pp_min_space_left;\n    pp_max_indent = pp_margin - pp_min_space_left;\n    pp_space_left = pp_margin;\n    pp_current_indent = 0;\n    pp_is_new_line = true;\n    pp_left_total = 1;\n    pp_right_total = 1;\n    pp_curr_depth = 1;\n    pp_max_boxes = max_int;\n    pp_ellipsis = \".\";\n    pp_out_string = f;\n    pp_out_flush = g;\n    pp_out_newline = h;\n    pp_out_spaces = i;\n    pp_print_tags = false;\n    pp_mark_tags = false;\n    pp_mark_open_tag = default_pp_mark_open_tag;\n    pp_mark_close_tag = default_pp_mark_close_tag;\n    pp_print_open_tag = default_pp_print_open_tag;\n    pp_print_close_tag = default_pp_print_close_tag;\n    pp_queue = pp_queue;\n  }\n\n\n(* Make a formatter with default functions to output spaces and new lines. *)\nlet make_formatter output flush =\n  let ppf = pp_make_formatter output flush ignore ignore in\n  ppf.pp_out_newline <- display_newline ppf;\n  ppf.pp_out_spaces <- display_blanks ppf;\n  ppf\n\n\n(* Make a formatter writing to a given [Pervasive.out_channel] value. *)\nlet formatter_of_out_channel oc =\n  make_formatter (output_substring oc) (fun () -> flush oc)\n\n\n(* Make a formatter writing to a given [Buffer.t] value. *)\nlet formatter_of_buffer b =\n  make_formatter (Buffer.add_substring b) ignore\n\n\n(* Allocating buffer for pretty-printing purposes.\n   Default buffer size is pp_buffer_size or 512.\n*)\nlet pp_buffer_size = 512\nlet pp_make_buffer () = Buffer.create pp_buffer_size\n\n(* The standard (shared) buffer. *)\nlet stdbuf = pp_make_buffer ()\n\n(* Predefined formatters standard formatter to print\n   to [Pervasives.stdout], [Pervasives.stderr], and {!stdbuf}. *)\nlet std_formatter = formatter_of_out_channel Pervasives.stdout\nand err_formatter = formatter_of_out_channel Pervasives.stderr\nand str_formatter = formatter_of_buffer stdbuf\n\n\n(* [flush_buffer_formatter buf ppf] flushes formatter [ppf],\n   then return the contents of buffer [buff] thst is reset.\n   Formatter [ppf] is supposed to print to buffer [buf], otherwise this\n   function is not really useful. *)\nlet flush_buffer_formatter buf ppf =\n  pp_flush_queue ppf false;\n  let s = Buffer.contents buf in\n  Buffer.reset buf;\n  s\n\n\n(* Flush [str_formatter] and get the contents of [stdbuf]. *)\nlet flush_str_formatter () = flush_buffer_formatter stdbuf str_formatter\n\n(*\n\n  Basic functions on the 'standard' formatter\n  (the formatter that prints to [Pervasives.stdout]).\n\n*)\n\nlet open_hbox = pp_open_hbox std_formatter\nand open_vbox = pp_open_vbox std_formatter\nand open_hvbox = pp_open_hvbox std_formatter\nand open_hovbox = pp_open_hovbox std_formatter\nand open_box = pp_open_box std_formatter\nand close_box = pp_close_box std_formatter\nand open_tag = pp_open_tag std_formatter\nand close_tag = pp_close_tag std_formatter\nand print_as = pp_print_as std_formatter\nand print_string = pp_print_string std_formatter\nand print_int = pp_print_int std_formatter\nand print_float = pp_print_float std_formatter\nand print_char = pp_print_char std_formatter\nand print_bool = pp_print_bool std_formatter\nand print_break = pp_print_break std_formatter\nand print_cut = pp_print_cut std_formatter\nand print_space = pp_print_space std_formatter\nand force_newline = pp_force_newline std_formatter\nand print_flush = pp_print_flush std_formatter\nand print_newline = pp_print_newline std_formatter\nand print_if_newline = pp_print_if_newline std_formatter\n\nand open_tbox = pp_open_tbox std_formatter\nand close_tbox = pp_close_tbox std_formatter\nand print_tbreak = pp_print_tbreak std_formatter\n\nand set_tab = pp_set_tab std_formatter\nand print_tab = pp_print_tab std_formatter\n\nand set_margin = pp_set_margin std_formatter\nand get_margin = pp_get_margin std_formatter\n\nand set_max_indent = pp_set_max_indent std_formatter\nand get_max_indent = pp_get_max_indent std_formatter\n\nand set_max_boxes = pp_set_max_boxes std_formatter\nand get_max_boxes = pp_get_max_boxes std_formatter\nand over_max_boxes = pp_over_max_boxes std_formatter\n\nand set_ellipsis_text = pp_set_ellipsis_text std_formatter\nand get_ellipsis_text = pp_get_ellipsis_text std_formatter\n\nand set_formatter_out_channel =\n  pp_set_formatter_out_channel std_formatter\n\nand set_formatter_out_functions =\n  pp_set_formatter_out_functions std_formatter\nand get_formatter_out_functions =\n  pp_get_formatter_out_functions std_formatter\n\nand set_formatter_output_functions =\n  pp_set_formatter_output_functions std_formatter\nand get_formatter_output_functions =\n  pp_get_formatter_output_functions std_formatter\n\nand set_formatter_tag_functions =\n  pp_set_formatter_tag_functions std_formatter\nand get_formatter_tag_functions =\n  pp_get_formatter_tag_functions std_formatter\nand set_print_tags =\n  pp_set_print_tags std_formatter\nand get_print_tags =\n  pp_get_print_tags std_formatter\nand set_mark_tags =\n  pp_set_mark_tags std_formatter\nand get_mark_tags =\n  pp_get_mark_tags std_formatter\nand set_tags =\n  pp_set_tags std_formatter\n\n\n(* Convenience functions *)\n\n(* To format a list *)\nlet rec pp_print_list ?(pp_sep = pp_print_cut) pp_v ppf = function\n  | [] -> ()\n  | [v] -> pp_v ppf v\n  | v :: vs ->\n    pp_v ppf v;\n    pp_sep ppf ();\n    pp_print_list ~pp_sep pp_v ppf vs\n\n(* To format free-flowing text *)\nlet pp_print_text ppf s =\n  let len = String.length s in\n  let left = ref 0 in\n  let right = ref 0 in\n  let flush () =\n    pp_print_string ppf (String.sub s !left (!right - !left));\n    incr right; left := !right;\n  in\n  while (!right <> len) do\n    match s.[!right] with\n      | '\\n' ->\n        flush ();\n        pp_force_newline ppf ()\n      | ' ' ->\n        flush (); pp_print_space ppf ()\n      (* there is no specific support for '\\t'\n         as it is unclear what a right semantics would be *)\n      | _ -> incr right\n  done;\n  if !left <> len then flush ()\n\n (**************************************************************)\n\nlet compute_tag output tag_acc =\n  let buf = Buffer.create 16 in\n  let ppf = formatter_of_buffer buf in\n  output ppf tag_acc;\n  pp_print_flush ppf ();\n  let len = Buffer.length buf in\n  if len < 2 then Buffer.contents buf\n  else Buffer.sub buf 1 (len - 2)\n\n (**************************************************************\n\n  Defining continuations to be passed as arguments of\n  CamlinternalFormat.make_printf.\n\n  **************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\n(* Interpret a formatting entity on a formatter. *)\nlet output_formatting_lit ppf fmting_lit = match fmting_lit with\n  | Close_box                 -> pp_close_box ppf ()\n  | Close_tag                 -> pp_close_tag ppf ()\n  | Break (_, width, offset)  -> pp_print_break ppf width offset\n  | FFlush                    -> pp_print_flush ppf ()\n  | Force_newline             -> pp_force_newline ppf ()\n  | Flush_newline             -> pp_print_newline ppf ()\n  | Magic_size (_, _)         -> ()\n  | Escaped_at                -> pp_print_char ppf '@'\n  | Escaped_percent           -> pp_print_char ppf '%'\n  | Scan_indic c              -> pp_print_char ppf '@'; pp_print_char ppf c\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in an output_stream. *)\n(* Differ from Printf.output_acc by the interpretation of formatting. *)\n(* Used as a continuation of CamlinternalFormat.make_printf. *)\nlet rec output_acc ppf acc = match acc with\n  | Acc_string_literal (Acc_formatting_lit (p, Magic_size (_, size)), s)\n  | Acc_data_string (Acc_formatting_lit (p, Magic_size (_, size)), s) ->\n    output_acc ppf p;\n    pp_print_as_size ppf (size_of_int size) s;\n  | Acc_char_literal (Acc_formatting_lit (p, Magic_size (_, size)), c)\n  | Acc_data_char (Acc_formatting_lit (p, Magic_size (_, size)), c) ->\n    output_acc ppf p;\n    pp_print_as_size ppf (size_of_int size) (String.make 1 c);\n  | Acc_formatting_lit (p, f) ->\n    output_acc ppf p;\n    output_formatting_lit ppf f;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    output_acc ppf p;\n    pp_open_tag ppf (compute_tag output_acc acc')\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    output_acc ppf p;\n    let (indent, bty) = open_box_of_string (compute_tag output_acc acc') in\n    pp_open_box_gen ppf indent bty\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> output_acc ppf p; pp_print_string ppf s;\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> output_acc ppf p; pp_print_char ppf c;\n  | Acc_delay (p, f)         -> output_acc ppf p; f ppf;\n  | Acc_flush p              -> output_acc ppf p; pp_print_flush ppf ();\n  | Acc_invalid_arg (p, msg) -> output_acc ppf p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(* Recursively output an \"accumulator\" containing a reversed list of\n   printing entities (string, char, flus, ...) in a buffer. *)\n(* Differ from Printf.bufput_acc by the interpretation of formatting. *)\n(* Used as a continuation of CamlinternalFormat.make_printf. *)\nlet rec strput_acc ppf acc = match acc with\n  | Acc_string_literal (Acc_formatting_lit (p, Magic_size (_, size)), s)\n  | Acc_data_string (Acc_formatting_lit (p, Magic_size (_, size)), s) ->\n    strput_acc ppf p;\n    pp_print_as_size ppf (size_of_int size) s;\n  | Acc_char_literal (Acc_formatting_lit (p, Magic_size (_, size)), c)\n  | Acc_data_char (Acc_formatting_lit (p, Magic_size (_, size)), c) ->\n    strput_acc ppf p;\n    pp_print_as_size ppf (size_of_int size) (String.make 1 c);\n  | Acc_delay (Acc_formatting_lit (p, Magic_size (_, size)), f) ->\n    strput_acc ppf p;\n    pp_print_as_size ppf (size_of_int size) (f ());\n  | Acc_formatting_lit (p, f) ->\n    strput_acc ppf p;\n    output_formatting_lit ppf f;\n  | Acc_formatting_gen (p, Acc_open_tag acc') ->\n    strput_acc ppf p;\n    pp_open_tag ppf (compute_tag strput_acc acc')\n  | Acc_formatting_gen (p, Acc_open_box acc') ->\n    strput_acc ppf p;\n    let (indent, bty) = open_box_of_string (compute_tag strput_acc acc') in\n    pp_open_box_gen ppf indent bty\n  | Acc_string_literal (p, s)\n  | Acc_data_string (p, s)   -> strput_acc ppf p; pp_print_string ppf s;\n  | Acc_char_literal (p, c)\n  | Acc_data_char (p, c)     -> strput_acc ppf p; pp_print_char ppf c;\n  | Acc_delay (p, f)         -> strput_acc ppf p; pp_print_string ppf (f ());\n  | Acc_flush p              -> strput_acc ppf p; pp_print_flush ppf ();\n  | Acc_invalid_arg (p, msg) -> strput_acc ppf p; invalid_arg msg;\n  | End_of_acc               -> ()\n\n(*\n\n  Defining [fprintf] and various flavors of [fprintf].\n\n*)\n\nlet kfprintf k ppf (Format (fmt, _)) =\n  make_printf\n    (fun ppf acc -> output_acc ppf acc; k ppf)\n    ppf End_of_acc fmt\n\nand ikfprintf k ppf (Format (fmt, _)) =\n  make_iprintf k ppf fmt\n\nlet fprintf ppf = kfprintf ignore ppf\nlet ifprintf ppf = ikfprintf ignore ppf\nlet printf fmt = fprintf std_formatter fmt\nlet eprintf fmt = fprintf err_formatter fmt\n\nlet ksprintf k (Format (fmt, _)) =\n  let b = pp_make_buffer () in\n  let ppf = formatter_of_buffer b in\n  let k () acc =\n    strput_acc ppf acc;\n    k (flush_buffer_formatter b ppf) in\n  make_printf k () End_of_acc fmt\n\n\nlet sprintf fmt = ksprintf (fun s -> s) fmt\n\nlet kasprintf k (Format (fmt, _)) =\n  let b = pp_make_buffer () in\n  let ppf = formatter_of_buffer b in\n  let k ppf acc =\n    output_acc ppf acc;\n    k (flush_buffer_formatter b ppf) in\n  make_printf k ppf End_of_acc fmt\n\n\nlet asprintf fmt = kasprintf (fun s -> s) fmt\n\n(* Output everything left in the pretty printer queue at end of execution. *)\nlet () = at_exit print_flush\n\n\n(*\n\n  Deprecated stuff.\n\n*)\n\n(* Deprecated : subsumed by pp_set_formatter_out_functions *)\nlet pp_set_all_formatter_output_functions state\n    ~out:f ~flush:g ~newline:h ~spaces:i =\n  pp_set_formatter_output_functions state f g;\n  state.pp_out_newline <- h;\n  state.pp_out_spaces <- i\n\n\n(* Deprecated : subsumed by pp_get_formatter_out_functions *)\nlet pp_get_all_formatter_output_functions state () =\n  (state.pp_out_string, state.pp_out_flush,\n   state.pp_out_newline, state.pp_out_spaces)\n\n\n(* Deprecated : subsumed by set_formatter_out_functions *)\nlet set_all_formatter_output_functions =\n  pp_set_all_formatter_output_functions std_formatter\n\n\n(* Deprecated : subsumed by get_formatter_out_functions *)\nlet get_all_formatter_output_functions =\n  pp_get_all_formatter_output_functions std_formatter\n\n\n(* Deprecated : error prone function, do not use it.\n   Define a formatter of your own writing to the buffer,\n   as in\n   let ppf = formatter_of_buffer b\n   then use {!fprintf ppf} as useual. *)\nlet bprintf b (Format (fmt, _) : ('a, formatter, unit) format) =\n  let k ppf acc = output_acc ppf acc; pp_flush_queue ppf false in\n  make_printf k (formatter_of_buffer b) End_of_acc fmt\n\n\n(* Deprecated : alias for ksprintf. *)\nlet kprintf = ksprintf\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*         Francois Pottier, projet Cristal, INRIA Rocquencourt           *)\n(*                  Jeremie Dimino, Jane Street Europe                    *)\n(*                                                                        *)\n(*   Copyright 2002 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\nexception Empty\n\ntype 'a cell =\n  | Nil\n  | Cons of { content: 'a; mutable next: 'a cell }\n\ntype 'a t = {\n  mutable length: int;\n  mutable first: 'a cell;\n  mutable last: 'a cell\n}\n\nlet create () = {\n  length = 0;\n  first = Nil;\n  last = Nil\n}\n\nlet clear q =\n  q.length <- 0;\n  q.first <- Nil;\n  q.last <- Nil\n\nlet add x q =\n  let cell = Cons {\n    content = x;\n    next = Nil\n  } in\n  match q.last with\n  | Nil ->\n    q.length <- 1;\n    q.first <- cell;\n    q.last <- cell\n  | Cons last ->\n    q.length <- q.length + 1;\n    last.next <- cell;\n    q.last <- cell\n\nlet push =\n  add\n\nlet peek q =\n  match q.first with\n  | Nil -> raise Empty\n  | Cons { content } -> content\n\nlet top =\n  peek\n\nlet take q =\n  match q.first with\n  | Nil -> raise Empty\n  | Cons { content; next = Nil } ->\n    clear q;\n    content\n  | Cons { content; next } ->\n    q.length <- q.length - 1;\n    q.first <- next;\n    content\n\nlet pop =\n  take\n\nlet copy =\n  let rec copy q_res prev cell =\n    match cell with\n    | Nil -> q_res.last <- prev; q_res\n    | Cons { content; next } ->\n      let res = Cons { content; next = Nil } in\n      begin match prev with\n      | Nil -> q_res.first <- res\n      | Cons p -> p.next <- res\n      end;\n      copy q_res res next\n  in\n  fun q -> copy { length = q.length; first = Nil; last = Nil } Nil q.first\n\nlet is_empty q =\n  q.length = 0\n\nlet length q =\n  q.length\n\nlet iter =\n  let rec iter f cell =\n    match cell with\n    | Nil -> ()\n    | Cons { content; next } ->\n      f content;\n      iter f next\n  in\n  fun f q -> iter f q.first\n\nlet fold =\n  let rec fold f accu cell =\n    match cell with\n    | Nil -> accu\n    | Cons { content; next } ->\n      let accu = f accu content in\n      fold f accu next\n  in\n  fun f accu q -> fold f accu q.first\n\nlet transfer q1 q2 =\n  if q1.length > 0 then\n    match q2.last with\n    | Nil ->\n      q2.length <- q1.length;\n      q2.first <- q1.first;\n      q2.last <- q1.last;\n      clear q1\n    | Cons last ->\n      q2.length <- q2.length + q1.length;\n      last.next <- q1.first;\n      q2.last <- q1.last;\n      clear q1\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Registering OCaml values with the C runtime for later callbacks *)\n\nexternal register_named_value : string -> Obj.t -> unit\n                              = \"caml_register_named_value\"\n\nlet register name v =\n  register_named_value name (Obj.repr v)\n\nlet register_exception name (exn : exn) =\n  let exn = Obj.repr exn in\n  let slot = if Obj.tag exn = Obj.object_tag then exn else Obj.field exn 0 in\n  register_named_value name slot\n","(* MIT License\n * \n * Copyright (c) 2017 Xavier Van de Woestyne\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *)\n\n\nclass type broadcaster = object \n  inherit Dom_html.eventTarget\n  method name  : (Js.js_string Js.t) Js.readonly_prop\n  method close : unit -> unit Js.meth\nend\n\ntype t = broadcaster Js.t\n\n\nlet constr = Js.Unsafe.global##._BroadcastChannel\nlet create name = new%js constr (Js.string name)\nlet close obj = ignore (obj ## close())\nlet name obj = Js.to_string (obj##.name)","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* List operations *)\n\nlet rec length_aux len = function\n    [] -> len\n  | _::l -> length_aux (len + 1) l\n\nlet length l = length_aux 0 l\n\nlet cons a l = a::l\n\nlet hd = function\n    [] -> failwith \"hd\"\n  | a::_ -> a\n\nlet tl = function\n    [] -> failwith \"tl\"\n  | _::l -> l\n\nlet nth l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> failwith \"nth\"\n    | a::l -> if n = 0 then a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet append = (@)\n\nlet rec rev_append l1 l2 =\n  match l1 with\n    [] -> l2\n  | a :: l -> rev_append l (a :: l2)\n\nlet rev l = rev_append l []\n\nlet rec flatten = function\n    [] -> []\n  | l::r -> l @ flatten r\n\nlet concat = flatten\n\nlet rec map f = function\n    [] -> []\n  | a::l -> let r = f a in r :: map f l\n\nlet rec mapi i f = function\n    [] -> []\n  | a::l -> let r = f i a in r :: mapi (i + 1) f l\n\nlet mapi f l = mapi 0 f l\n\nlet rev_map f l =\n  let rec rmap_f accu = function\n    | [] -> accu\n    | a::l -> rmap_f (f a :: accu) l\n  in\n  rmap_f [] l\n\n\nlet rec iter f = function\n    [] -> ()\n  | a::l -> f a; iter f l\n\nlet rec iteri i f = function\n    [] -> ()\n  | a::l -> f i a; iteri (i + 1) f l\n\nlet iteri f l = iteri 0 f l\n\nlet rec fold_left f accu l =\n  match l with\n    [] -> accu\n  | a::l -> fold_left f (f accu a) l\n\nlet rec fold_right f l accu =\n  match l with\n    [] -> accu\n  | a::l -> f a (fold_right f l accu)\n\nlet rec map2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> let r = f a1 a2 in r :: map2 f l1 l2\n  | (_, _) -> invalid_arg \"List.map2\"\n\nlet rev_map2 f l1 l2 =\n  let rec rmap2_f accu l1 l2 =\n    match (l1, l2) with\n    | ([], []) -> accu\n    | (a1::l1, a2::l2) -> rmap2_f (f a1 a2 :: accu) l1 l2\n    | (_, _) -> invalid_arg \"List.rev_map2\"\n  in\n  rmap2_f [] l1 l2\n\n\nlet rec iter2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> ()\n  | (a1::l1, a2::l2) -> f a1 a2; iter2 f l1 l2\n  | (_, _) -> invalid_arg \"List.iter2\"\n\nlet rec fold_left2 f accu l1 l2 =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> fold_left2 f (f accu a1 a2) l1 l2\n  | (_, _) -> invalid_arg \"List.fold_left2\"\n\nlet rec fold_right2 f l1 l2 accu =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> f a1 a2 (fold_right2 f l1 l2 accu)\n  | (_, _) -> invalid_arg \"List.fold_right2\"\n\nlet rec for_all p = function\n    [] -> true\n  | a::l -> p a && for_all p l\n\nlet rec exists p = function\n    [] -> false\n  | a::l -> p a || exists p l\n\nlet rec for_all2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> true\n  | (a1::l1, a2::l2) -> p a1 a2 && for_all2 p l1 l2\n  | (_, _) -> invalid_arg \"List.for_all2\"\n\nlet rec exists2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> false\n  | (a1::l1, a2::l2) -> p a1 a2 || exists2 p l1 l2\n  | (_, _) -> invalid_arg \"List.exists2\"\n\nlet rec mem x = function\n    [] -> false\n  | a::l -> compare a x = 0 || mem x l\n\nlet rec memq x = function\n    [] -> false\n  | a::l -> a == x || memq x l\n\nlet rec assoc x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if compare a x = 0 then b else assoc x l\n\nlet rec assq x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if a == x then b else assq x l\n\nlet rec mem_assoc x = function\n  | [] -> false\n  | (a, _) :: l -> compare a x = 0 || mem_assoc x l\n\nlet rec mem_assq x = function\n  | [] -> false\n  | (a, _) :: l -> a == x || mem_assq x l\n\nlet rec remove_assoc x = function\n  | [] -> []\n  | (a, _ as pair) :: l ->\n      if compare a x = 0 then l else pair :: remove_assoc x l\n\nlet rec remove_assq x = function\n  | [] -> []\n  | (a, _ as pair) :: l -> if a == x then l else pair :: remove_assq x l\n\nlet rec find p = function\n  | [] -> raise Not_found\n  | x :: l -> if p x then x else find p l\n\nlet find_all p =\n  let rec find accu = function\n  | [] -> rev accu\n  | x :: l -> if p x then find (x :: accu) l else find accu l in\n  find []\n\nlet filter = find_all\n\nlet partition p l =\n  let rec part yes no = function\n  | [] -> (rev yes, rev no)\n  | x :: l -> if p x then part (x :: yes) no l else part yes (x :: no) l in\n  part [] [] l\n\nlet rec split = function\n    [] -> ([], [])\n  | (x,y)::l ->\n      let (rx, ry) = split l in (x::rx, y::ry)\n\nlet rec combine l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> (a1, a2) :: combine l1 l2\n  | (_, _) -> invalid_arg \"List.combine\"\n\n(** sorting *)\n\nlet rec merge cmp l1 l2 =\n  match l1, l2 with\n  | [], l2 -> l2\n  | l1, [] -> l1\n  | h1 :: t1, h2 :: t2 ->\n      if cmp h1 h2 <= 0\n      then h1 :: merge cmp t1 l2\n      else h2 :: merge cmp l1 t2\n\n\nlet rec chop k l =\n  if k = 0 then l else begin\n    match l with\n    | _::t -> chop (k-1) t\n    | _ -> assert false\n  end\n\n\nlet stable_sort cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 <= 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       if cmp x1 x2 <= 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       if cmp x1 x2 <= 0 then begin\n         if cmp x2 x3 <= 0 then [x1; x2; x3]\n         else if cmp x1 x3 <= 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         if cmp x1 x3 <= 0 then [x2; x1; x3]\n         else if cmp x2 x3 <= 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = rev_sort n1 l in\n       let s2 = rev_sort n2 l2 in\n       rev_merge_rev s1 s2 []\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       if cmp x1 x2 > 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       if cmp x1 x2 > 0 then begin\n         if cmp x2 x3 > 0 then [x1; x2; x3]\n         else if cmp x1 x3 > 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         if cmp x1 x3 > 0 then [x2; x1; x3]\n         else if cmp x2 x3 > 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = sort n1 l in\n       let s2 = sort n2 l2 in\n       rev_merge s1 s2 []\n  in\n  let len = length l in\n  if len < 2 then l else sort len l\n\n\nlet sort = stable_sort\nlet fast_sort = stable_sort\n\n(* Note: on a list of length between about 100000 (depending on the minor\n   heap size and the type of the list) and Sys.max_array_size, it is\n   actually faster to use the following, but it might also use more memory\n   because the argument list cannot be deallocated incrementally.\n\n   Also, there seems to be a bug in this code or in the\n   implementation of obj_truncate.\n\nexternal obj_truncate : 'a array -> int -> unit = \"caml_obj_truncate\"\n\nlet array_to_list_in_place a =\n  let l = Array.length a in\n  let rec loop accu n p =\n    if p <= 0 then accu else begin\n      if p = n then begin\n        obj_truncate a p;\n        loop (a.(p-1) :: accu) (n-1000) (p-1)\n      end else begin\n        loop (a.(p-1) :: accu) n (p-1)\n      end\n    end\n  in\n  loop [] (l-1000) l\n\n\nlet stable_sort cmp l =\n  let a = Array.of_list l in\n  Array.stable_sort cmp a;\n  array_to_list_in_place a\n\n*)\n\n\n(** sorting + removing duplicates *)\n\nlet sort_uniq cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge t1 t2 (h1::accu)\n        else if c < 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge_rev t1 t2 (h1::accu)\n        else if c > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then [x1]\n       else if c < 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x2]\n         else if c < 0 then [x2; x3] else [x3; x2]\n       end else if c < 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x1; x2]\n         else if c < 0 then [x1; x2; x3]\n         else let c = cmp x1 x3 in\n         if c = 0 then [x1; x2]\n         else if c < 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         let c = cmp x1 x3 in\n         if c = 0 then [x2; x1]\n         else if c < 0 then [x2; x1; x3]\n         else let c = cmp x2 x3 in\n         if c = 0 then [x2; x1]\n         else if c < 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = rev_sort n1 l in\n       let s2 = rev_sort n2 l2 in\n       rev_merge_rev s1 s2 []\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then [x1]\n       else if c > 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x2]\n         else if c > 0 then [x2; x3] else [x3; x2]\n       end else if c > 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x1; x2]\n         else if c > 0 then [x1; x2; x3]\n         else let c = cmp x1 x3 in\n         if c = 0 then [x1; x2]\n         else if c > 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         let c = cmp x1 x3 in\n         if c = 0 then [x2; x1]\n         else if c > 0 then [x2; x1; x3]\n         else let c = cmp x2 x3 in\n         if c = 0 then [x2; x1]\n         else if c > 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = sort n1 l in\n       let s2 = sort n2 l2 in\n       rev_merge s1 s2 []\n  in\n  let len = length l in\n  if len < 2 then l else sort len l\n","(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(* Ensure that [at_exit] functions are called at the end of every program *)\n\nlet _ = do_at_exit()\n"]}